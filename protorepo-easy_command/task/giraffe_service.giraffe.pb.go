// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package task

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	easy_command "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/easy_command"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateSyncTask(ctx context.Context, in *easy_command.TaskSpec) (*easy_command.TaskDetail, error)
	GetTaskDetail(ctx context.Context, in *GetTaskDetailRequest) (*easy_command.TaskDetail, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateSyncTask(ctx context.Context, in *easy_command.TaskSpec) (*easy_command.TaskDetail, error) {
	out := new(easy_command.TaskDetail)
	err := c.c.Invoke(ctx, _CreateSyncTaskContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetTaskDetail(ctx context.Context, in *GetTaskDetailRequest) (*easy_command.TaskDetail, error) {
	out := new(easy_command.TaskDetail)
	err := c.c.Invoke(ctx, _GetTaskDetailContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for task service.
type Service interface {
	CreateSyncTask(context.Context, *easy_command.TaskSpec) (*easy_command.TaskDetail, error)
	GetTaskDetail(context.Context, *GetTaskDetailRequest) (*easy_command.TaskDetail, error)
}

func _CreateSyncTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateSyncTask(ctx, req.(*easy_command.TaskSpec))
	}
}

func _GetTaskDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTaskDetail(ctx, req.(*GetTaskDetailRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateSyncTaskContract, _CreateSyncTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetTaskDetailContract, _GetTaskDetailEndpoint(srv))
}

// API Contract
var _CreateSyncTaskContract = &createSyncTaskContract{}

type createSyncTaskContract struct{}

func (*createSyncTaskContract) ServiceName() string          { return "task.rpc" }
func (*createSyncTaskContract) MethodName() string           { return "CreateSyncTask" }
func (*createSyncTaskContract) RequestMessage() interface{}  { return new(easy_command.TaskSpec) }
func (*createSyncTaskContract) ResponseMessage() interface{} { return new(easy_command.TaskSpec) }
func (*createSyncTaskContract) ContractName() string {
	return "easyops.api.easy_command.task.CreateSyncTask"
}
func (*createSyncTaskContract) ContractVersion() string   { return "1.0" }
func (*createSyncTaskContract) Pattern() (string, string) { return "POST", "/cmd/sync" }
func (*createSyncTaskContract) Body() string              { return "" }

var _GetTaskDetailContract = &getTaskDetailContract{}

type getTaskDetailContract struct{}

func (*getTaskDetailContract) ServiceName() string          { return "task.rpc" }
func (*getTaskDetailContract) MethodName() string           { return "GetTaskDetail" }
func (*getTaskDetailContract) RequestMessage() interface{}  { return new(GetTaskDetailRequest) }
func (*getTaskDetailContract) ResponseMessage() interface{} { return new(GetTaskDetailRequest) }
func (*getTaskDetailContract) ContractName() string {
	return "easyops.api.easy_command.task.GetTaskDetail"
}
func (*getTaskDetailContract) ContractVersion() string   { return "1.0" }
func (*getTaskDetailContract) Pattern() (string, string) { return "GET", "/cmd/detail/:taskId" }
func (*getTaskDetailContract) Body() string              { return "" }
