// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.easyops.local/contracts/protorepo-ens_ng/enspb/enspb.proto

//enspb 为本地服务定义的pb

package enspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	protocol "github.com/easyopsapis/easyops-api-go/protorepo-ens_ng/protocol"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//Contract 契约信息, 契约由 name 和 version 组成, version 需要满足 semver 规范
type Contract struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{0}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contract.Unmarshal(m, b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return xxx_messageInfo_Contract.Size(m)
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contract) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

//Service 服务节点信息, 服务节点由 host, port, hostname 组成
type Service struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{1}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Service) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

//Route 路由定义, Contract + Service 作为一条路由的定义, 路由
type Route struct {
	Contract             *Contract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Service              *Service  `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{2}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *Route) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

//RouteInfo 路由信息
type RouteInfo struct {
	Route                *Route        `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Hostname             string        `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Weight               uint32        `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Protocol             protocol.Type `protobuf:"varint,5,opt,name=protocol,proto3,enum=protocol.Type" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RouteInfo) Reset()         { *m = RouteInfo{} }
func (m *RouteInfo) String() string { return proto.CompactTextString(m) }
func (*RouteInfo) ProtoMessage()    {}
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{3}
}
func (m *RouteInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteInfo.Unmarshal(m, b)
}
func (m *RouteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteInfo.Marshal(b, m, deterministic)
}
func (m *RouteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteInfo.Merge(m, src)
}
func (m *RouteInfo) XXX_Size() int {
	return xxx_messageInfo_RouteInfo.Size(m)
}
func (m *RouteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RouteInfo proto.InternalMessageInfo

func (m *RouteInfo) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *RouteInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *RouteInfo) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *RouteInfo) GetProtocol() protocol.Type {
	if m != nil {
		return m.Protocol
	}
	return protocol.Type_GRPC
}

type RouteQuery struct {
	ContractName         string   `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	VersionConstraint    string   `protobuf:"bytes,2,opt,name=version_constraint,json=versionConstraint,proto3" json:"version_constraint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteQuery) Reset()         { *m = RouteQuery{} }
func (m *RouteQuery) String() string { return proto.CompactTextString(m) }
func (*RouteQuery) ProtoMessage()    {}
func (*RouteQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{4}
}
func (m *RouteQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteQuery.Unmarshal(m, b)
}
func (m *RouteQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteQuery.Marshal(b, m, deterministic)
}
func (m *RouteQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteQuery.Merge(m, src)
}
func (m *RouteQuery) XXX_Size() int {
	return xxx_messageInfo_RouteQuery.Size(m)
}
func (m *RouteQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RouteQuery proto.InternalMessageInfo

func (m *RouteQuery) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *RouteQuery) GetVersionConstraint() string {
	if m != nil {
		return m.VersionConstraint
	}
	return ""
}

//Status 返回状态
//TODO 未来可能扩展
type Status struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{5}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

type HostStatus struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Active               bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostStatus) Reset()         { *m = HostStatus{} }
func (m *HostStatus) String() string { return proto.CompactTextString(m) }
func (*HostStatus) ProtoMessage()    {}
func (*HostStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{6}
}
func (m *HostStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostStatus.Unmarshal(m, b)
}
func (m *HostStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostStatus.Marshal(b, m, deterministic)
}
func (m *HostStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostStatus.Merge(m, src)
}
func (m *HostStatus) XXX_Size() int {
	return xxx_messageInfo_HostStatus.Size(m)
}
func (m *HostStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HostStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HostStatus proto.InternalMessageInfo

func (m *HostStatus) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HostStatus) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type HostList struct {
	List                 []*HostStatus `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HostList) Reset()         { *m = HostList{} }
func (m *HostList) String() string { return proto.CompactTextString(m) }
func (*HostList) ProtoMessage()    {}
func (*HostList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{7}
}
func (m *HostList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostList.Unmarshal(m, b)
}
func (m *HostList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostList.Marshal(b, m, deterministic)
}
func (m *HostList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostList.Merge(m, src)
}
func (m *HostList) XXX_Size() int {
	return xxx_messageInfo_HostList.Size(m)
}
func (m *HostList) XXX_DiscardUnknown() {
	xxx_messageInfo_HostList.DiscardUnknown(m)
}

var xxx_messageInfo_HostList proto.InternalMessageInfo

func (m *HostList) GetList() []*HostStatus {
	if m != nil {
		return m.List
	}
	return nil
}

type RouteList struct {
	List                 []*Route `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteList) Reset()         { *m = RouteList{} }
func (m *RouteList) String() string { return proto.CompactTextString(m) }
func (*RouteList) ProtoMessage()    {}
func (*RouteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{8}
}
func (m *RouteList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteList.Unmarshal(m, b)
}
func (m *RouteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteList.Marshal(b, m, deterministic)
}
func (m *RouteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteList.Merge(m, src)
}
func (m *RouteList) XXX_Size() int {
	return xxx_messageInfo_RouteList.Size(m)
}
func (m *RouteList) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteList.DiscardUnknown(m)
}

var xxx_messageInfo_RouteList proto.InternalMessageInfo

func (m *RouteList) GetList() []*Route {
	if m != nil {
		return m.List
	}
	return nil
}

//Name 名字
type Name struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{9}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Name.Unmarshal(m, b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Name.Marshal(b, m, deterministic)
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return xxx_messageInfo_Name.Size(m)
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//NameRoute 名字路由
type NameRoute struct {
	Name                 *Name    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Service              *Service `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameRoute) Reset()         { *m = NameRoute{} }
func (m *NameRoute) String() string { return proto.CompactTextString(m) }
func (*NameRoute) ProtoMessage()    {}
func (*NameRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{10}
}
func (m *NameRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameRoute.Unmarshal(m, b)
}
func (m *NameRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameRoute.Marshal(b, m, deterministic)
}
func (m *NameRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRoute.Merge(m, src)
}
func (m *NameRoute) XXX_Size() int {
	return xxx_messageInfo_NameRoute.Size(m)
}
func (m *NameRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRoute.DiscardUnknown(m)
}

var xxx_messageInfo_NameRoute proto.InternalMessageInfo

func (m *NameRoute) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *NameRoute) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type NameRouteInfo struct {
	Route                *NameRoute `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Weight               uint32     `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NameRouteInfo) Reset()         { *m = NameRouteInfo{} }
func (m *NameRouteInfo) String() string { return proto.CompactTextString(m) }
func (*NameRouteInfo) ProtoMessage()    {}
func (*NameRouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9ec9e55a9656ae6, []int{11}
}
func (m *NameRouteInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameRouteInfo.Unmarshal(m, b)
}
func (m *NameRouteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameRouteInfo.Marshal(b, m, deterministic)
}
func (m *NameRouteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRouteInfo.Merge(m, src)
}
func (m *NameRouteInfo) XXX_Size() int {
	return xxx_messageInfo_NameRouteInfo.Size(m)
}
func (m *NameRouteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRouteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NameRouteInfo proto.InternalMessageInfo

func (m *NameRouteInfo) GetRoute() *NameRoute {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *NameRouteInfo) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*Contract)(nil), "enspb.Contract")
	proto.RegisterType((*Service)(nil), "enspb.Service")
	proto.RegisterType((*Route)(nil), "enspb.Route")
	proto.RegisterType((*RouteInfo)(nil), "enspb.RouteInfo")
	proto.RegisterType((*RouteQuery)(nil), "enspb.RouteQuery")
	proto.RegisterType((*Status)(nil), "enspb.Status")
	proto.RegisterType((*HostStatus)(nil), "enspb.HostStatus")
	proto.RegisterType((*HostList)(nil), "enspb.HostList")
	proto.RegisterType((*RouteList)(nil), "enspb.RouteList")
	proto.RegisterType((*Name)(nil), "enspb.Name")
	proto.RegisterType((*NameRoute)(nil), "enspb.NameRoute")
	proto.RegisterType((*NameRouteInfo)(nil), "enspb.NameRouteInfo")
}

func init() {
	proto.RegisterFile("github.com/easyopsapis/easyops-api-go/protorepo-ens_ng/enspb/enspb.proto", fileDescriptor_b9ec9e55a9656ae6)
}

var fileDescriptor_b9ec9e55a9656ae6 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xc9, 0x97, 0x33, 0x6e, 0xd2, 0x66, 0x0f, 0x55, 0x64, 0x0e, 0x44, 0x46, 0xa0, 0xa8,
	0x28, 0x0e, 0x75, 0x84, 0x28, 0x42, 0x1c, 0x20, 0xa9, 0x54, 0xa4, 0xaa, 0x08, 0x07, 0x71, 0xe0,
	0x40, 0x70, 0xdc, 0xad, 0x6b, 0xc9, 0xf1, 0x5a, 0xde, 0x4d, 0x50, 0x7e, 0x05, 0x3f, 0x19, 0xb4,
	0xb3, 0x6b, 0xe3, 0xf4, 0x43, 0x6a, 0x2f, 0xd6, 0xce, 0xbc, 0x79, 0x33, 0x3b, 0x6f, 0x66, 0x0d,
	0x1f, 0x22, 0xe6, 0xd2, 0x80, 0x6f, 0x59, 0xc6, 0xdd, 0x84, 0x85, 0x41, 0x32, 0x0e, 0x59, 0x2a,
	0xf2, 0x20, 0x14, 0x7c, 0x9c, 0xe5, 0x4c, 0xb0, 0x9c, 0x66, 0x6c, 0x44, 0x53, 0xbe, 0x48, 0xa3,
	0x31, 0x4d, 0x79, 0xb6, 0x54, 0x5f, 0x17, 0x41, 0xd2, 0x40, 0xc3, 0x9e, 0x3e, 0x26, 0x0b, 0x3a,
	0x42, 0x96, 0x94, 0x07, 0x95, 0xcb, 0x7e, 0x1a, 0x31, 0x16, 0x25, 0x54, 0xb9, 0x97, 0xeb, 0xab,
	0x31, 0x5d, 0x65, 0x62, 0xab, 0x40, 0xe7, 0x04, 0xcc, 0xa9, 0x4e, 0x49, 0x08, 0xd4, 0xd3, 0x60,
	0x45, 0xfb, 0xc6, 0xc0, 0x18, 0xb6, 0x7d, 0x3c, 0x93, 0x3e, 0xb4, 0x36, 0x34, 0xe7, 0x31, 0x4b,
	0xfb, 0x4f, 0xd0, 0x5d, 0x98, 0xce, 0x31, 0xb4, 0xe6, 0x34, 0xdf, 0xc4, 0x21, 0x95, 0xc4, 0x6b,
	0xc6, 0x45, 0x41, 0x94, 0x67, 0xe9, 0xcb, 0x58, 0x2e, 0x90, 0xd5, 0xf1, 0xf1, 0xec, 0xfc, 0x84,
	0x86, 0xcf, 0xd6, 0x82, 0x92, 0x57, 0x60, 0x16, 0x8d, 0x20, 0xc9, 0xf2, 0xf6, 0x5d, 0xd5, 0x7e,
	0x71, 0x19, 0xbf, 0x0c, 0x20, 0x43, 0x68, 0x71, 0x55, 0x08, 0x93, 0x59, 0x5e, 0x57, 0xc7, 0xea,
	0xf2, 0x7e, 0x01, 0x3b, 0x7f, 0x0c, 0x68, 0x63, 0x81, 0xcf, 0xe9, 0x15, 0x23, 0x0e, 0x34, 0x72,
	0x69, 0xe8, 0x0a, 0x7b, 0x9a, 0x85, 0x01, 0xbe, 0x82, 0x88, 0x0d, 0xa6, 0xbc, 0x2d, 0xb6, 0x5d,
	0xc3, 0xdb, 0x97, 0x36, 0x39, 0x84, 0xe6, 0x6f, 0x1a, 0x47, 0xd7, 0xa2, 0x5f, 0xc7, 0x1e, 0xb4,
	0x45, 0x8e, 0xc0, 0x2c, 0x14, 0xee, 0x37, 0x06, 0xc6, 0xb0, 0xeb, 0x75, 0xdd, 0x52, 0xf2, 0x6f,
	0xdb, 0x8c, 0xfa, 0x25, 0xee, 0xfc, 0x02, 0xc0, 0x7a, 0x5f, 0xd7, 0x34, 0xdf, 0x92, 0xe7, 0xd0,
	0x29, 0xba, 0x5a, 0x54, 0x94, 0xde, 0x2b, 0x9c, 0x17, 0xb2, 0xec, 0x08, 0x88, 0x96, 0x78, 0x11,
	0xb2, 0x94, 0x8b, 0x3c, 0x88, 0x53, 0xa1, 0xc5, 0xef, 0x69, 0x64, 0x5a, 0x02, 0x8e, 0x09, 0xcd,
	0xb9, 0x08, 0xc4, 0x9a, 0x3b, 0x27, 0x00, 0x67, 0x8c, 0x0b, 0x65, 0xdd, 0x39, 0x93, 0x43, 0x68,
	0x06, 0xa1, 0x88, 0x37, 0x4a, 0x48, 0xd3, 0xd7, 0x96, 0x73, 0x0c, 0xa6, 0x64, 0x9e, 0xc7, 0x5c,
	0x90, 0x17, 0x50, 0x4f, 0x62, 0xe4, 0xd5, 0x86, 0x96, 0xd7, 0xd3, 0xa2, 0xfd, 0x4f, 0xec, 0x23,
	0xec, 0x8c, 0xb4, 0xd2, 0xc8, 0x19, 0xec, 0x70, 0x76, 0x85, 0x56, 0xe1, 0x36, 0xd4, 0xb1, 0xb9,
	0x3b, 0x56, 0xcc, 0xf9, 0x0e, 0x6d, 0x89, 0xa9, 0xcd, 0x78, 0x56, 0x09, 0xb0, 0x3c, 0x4b, 0xa7,
	0x42, 0x5c, 0x2d, 0xe4, 0xc3, 0xb7, 0xe1, 0x0b, 0x74, 0xca, 0xbc, 0xb8, 0x10, 0x2f, 0x77, 0x17,
	0xe2, 0xa0, 0x9a, 0xbc, 0xba, 0x14, 0xf7, 0x0c, 0xde, 0xfb, 0x6b, 0x40, 0xed, 0xf4, 0x62, 0x2e,
	0xb7, 0xf7, 0xe3, 0xe5, 0xa5, 0xba, 0xef, 0x41, 0xb5, 0x59, 0x59, 0xc5, 0xee, 0x14, 0xf7, 0x51,
	0x73, 0x38, 0x02, 0x6b, 0x46, 0x13, 0x2a, 0x74, 0x7f, 0x3b, 0xe2, 0xdc, 0x8c, 0x9d, 0x00, 0xe0,
	0xa2, 0xa8, 0xd0, 0x5e, 0x35, 0x14, 0xfd, 0xf6, 0xad, 0x6a, 0xaf, 0x0d, 0x32, 0x01, 0x73, 0xb6,
	0x5e, 0x65, 0x67, 0x38, 0x60, 0x57, 0xbd, 0x75, 0xb7, 0x78, 0xeb, 0xee, 0xa9, 0x7c, 0xeb, 0xf6,
	0x7e, 0x65, 0x8c, 0x38, 0xb1, 0x37, 0xd0, 0x96, 0x24, 0x55, 0xe8, 0x3e, 0xd6, 0x4e, 0x35, 0x49,
	0xf3, 0x22, 0x68, 0x9f, 0xd3, 0x28, 0x08, 0xb7, 0x5a, 0x06, 0x9f, 0x46, 0x31, 0x17, 0x34, 0x27,
	0xb7, 0xb4, 0xbc, 0xd9, 0xda, 0x08, 0x60, 0x46, 0xf3, 0x87, 0x86, 0x7f, 0x7a, 0xf7, 0xe3, 0xed,
	0xa3, 0x7f, 0xa0, 0xef, 0xf1, 0xbb, 0x6c, 0x22, 0x3a, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0x12,
	0xbc, 0xbc, 0x36, 0x82, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ENSClient is the client API for ENS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ENSClient interface {
	//AddRoute 添加一条契约路由
	AddRoute(ctx context.Context, in *RouteInfo, opts ...grpc.CallOption) (*Status, error)
	//DeleteRoute 删除一条契约路由
	DeleteRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*Status, error)
	//QueryRoute 根据契约查询路由信息
	QueryRoute(ctx context.Context, in *RouteQuery, opts ...grpc.CallOption) (ENS_QueryRouteClient, error)
	//DumpHost 输出所有缓存主机
	DumpHost(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HostList, error)
	//DumpRoute 输出所有缓存路由
	DumpRoute(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*RouteList, error)
}

type eNSClient struct {
	cc *grpc.ClientConn
}

func NewENSClient(cc *grpc.ClientConn) ENSClient {
	return &eNSClient{cc}
}

func (c *eNSClient) AddRoute(ctx context.Context, in *RouteInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/enspb.ENS/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eNSClient) DeleteRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/enspb.ENS/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eNSClient) QueryRoute(ctx context.Context, in *RouteQuery, opts ...grpc.CallOption) (ENS_QueryRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ENS_serviceDesc.Streams[0], "/enspb.ENS/QueryRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &eNSQueryRouteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ENS_QueryRouteClient interface {
	Recv() (*RouteInfo, error)
	grpc.ClientStream
}

type eNSQueryRouteClient struct {
	grpc.ClientStream
}

func (x *eNSQueryRouteClient) Recv() (*RouteInfo, error) {
	m := new(RouteInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eNSClient) DumpHost(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HostList, error) {
	out := new(HostList)
	err := c.cc.Invoke(ctx, "/enspb.ENS/DumpHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eNSClient) DumpRoute(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*RouteList, error) {
	out := new(RouteList)
	err := c.cc.Invoke(ctx, "/enspb.ENS/DumpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ENSServer is the server API for ENS service.
type ENSServer interface {
	//AddRoute 添加一条契约路由
	AddRoute(context.Context, *RouteInfo) (*Status, error)
	//DeleteRoute 删除一条契约路由
	DeleteRoute(context.Context, *Route) (*Status, error)
	//QueryRoute 根据契约查询路由信息
	QueryRoute(*RouteQuery, ENS_QueryRouteServer) error
	//DumpHost 输出所有缓存主机
	DumpHost(context.Context, *types.Empty) (*HostList, error)
	//DumpRoute 输出所有缓存路由
	DumpRoute(context.Context, *types.Empty) (*RouteList, error)
}

// UnimplementedENSServer can be embedded to have forward compatible implementations.
type UnimplementedENSServer struct {
}

func (*UnimplementedENSServer) AddRoute(ctx context.Context, req *RouteInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (*UnimplementedENSServer) DeleteRoute(ctx context.Context, req *Route) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (*UnimplementedENSServer) QueryRoute(req *RouteQuery, srv ENS_QueryRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryRoute not implemented")
}
func (*UnimplementedENSServer) DumpHost(ctx context.Context, req *types.Empty) (*HostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpHost not implemented")
}
func (*UnimplementedENSServer) DumpRoute(ctx context.Context, req *types.Empty) (*RouteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpRoute not implemented")
}

func RegisterENSServer(s *grpc.Server, srv ENSServer) {
	s.RegisterService(&_ENS_serviceDesc, srv)
}

func _ENS_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ENSServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enspb.ENS/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ENSServer).AddRoute(ctx, req.(*RouteInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ENS_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ENSServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enspb.ENS/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ENSServer).DeleteRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _ENS_QueryRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RouteQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ENSServer).QueryRoute(m, &eNSQueryRouteServer{stream})
}

type ENS_QueryRouteServer interface {
	Send(*RouteInfo) error
	grpc.ServerStream
}

type eNSQueryRouteServer struct {
	grpc.ServerStream
}

func (x *eNSQueryRouteServer) Send(m *RouteInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _ENS_DumpHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ENSServer).DumpHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enspb.ENS/DumpHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ENSServer).DumpHost(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ENS_DumpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ENSServer).DumpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enspb.ENS/DumpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ENSServer).DumpRoute(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ENS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enspb.ENS",
	HandlerType: (*ENSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRoute",
			Handler:    _ENS_AddRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _ENS_DeleteRoute_Handler,
		},
		{
			MethodName: "DumpHost",
			Handler:    _ENS_DumpHost_Handler,
		},
		{
			MethodName: "DumpRoute",
			Handler:    _ENS_DumpRoute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryRoute",
			Handler:       _ENS_QueryRoute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/easyopsapis/easyops-api-go/protorepo-ens_ng/enspb/enspb.proto",
}

// LegacyENSClient is the client API for LegacyENS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LegacyENSClient interface {
	Register(ctx context.Context, in *NameRoute, opts ...grpc.CallOption) (*Status, error)
	Deregister(ctx context.Context, in *NameRoute, opts ...grpc.CallOption) (*Status, error)
}

type legacyENSClient struct {
	cc *grpc.ClientConn
}

func NewLegacyENSClient(cc *grpc.ClientConn) LegacyENSClient {
	return &legacyENSClient{cc}
}

func (c *legacyENSClient) Register(ctx context.Context, in *NameRoute, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/enspb.LegacyENS/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyENSClient) Deregister(ctx context.Context, in *NameRoute, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/enspb.LegacyENS/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LegacyENSServer is the server API for LegacyENS service.
type LegacyENSServer interface {
	Register(context.Context, *NameRoute) (*Status, error)
	Deregister(context.Context, *NameRoute) (*Status, error)
}

// UnimplementedLegacyENSServer can be embedded to have forward compatible implementations.
type UnimplementedLegacyENSServer struct {
}

func (*UnimplementedLegacyENSServer) Register(ctx context.Context, req *NameRoute) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedLegacyENSServer) Deregister(ctx context.Context, req *NameRoute) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}

func RegisterLegacyENSServer(s *grpc.Server, srv LegacyENSServer) {
	s.RegisterService(&_LegacyENS_serviceDesc, srv)
}

func _LegacyENS_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyENSServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enspb.LegacyENS/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyENSServer).Register(ctx, req.(*NameRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyENS_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyENSServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enspb.LegacyENS/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyENSServer).Deregister(ctx, req.(*NameRoute))
	}
	return interceptor(ctx, in, info, handler)
}

var _LegacyENS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enspb.LegacyENS",
	HandlerType: (*LegacyENSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _LegacyENS_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _LegacyENS_Deregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/easyopsapis/easyops-api-go/protorepo-ens_ng/enspb/enspb.proto",
}
