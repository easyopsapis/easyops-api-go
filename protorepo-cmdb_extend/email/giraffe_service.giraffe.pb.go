// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package email

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for email service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	SendMail(ctx context.Context, in *SendMailRequest) (*types.Empty, error)
	SendMailByInstanceId(ctx context.Context, in *SendMailByInstanceIdRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) SendMail(ctx context.Context, in *SendMailRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _SendMailMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SendMailByInstanceId(ctx context.Context, in *SendMailByInstanceIdRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _SendMailByInstanceIdMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for email service.
type Service interface {
	SendMail(context.Context, *SendMailRequest) (*types.Empty, error)
	SendMailByInstanceId(context.Context, *SendMailByInstanceIdRequest) (*types.Empty, error)
}

func _SendMailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendMail(ctx, req.(*SendMailRequest))
	}
}

func _SendMailByInstanceIdEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendMailByInstanceId(ctx, req.(*SendMailByInstanceIdRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_SendMailMethodDesc, _SendMailEndpoint(srv))
	s.RegisterUnaryEndpoint(_SendMailByInstanceIdMethodDesc, _SendMailByInstanceIdEndpoint(srv))
}

// Method Description
var _SendMailMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.email.SendMail",
		Version: "1.0",
	},
	ServiceName:  "email.rpc",
	MethodName:   "SendMail",
	RequestType:  (*SendMailRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/message/email",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _SendMailByInstanceIdMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.email.SendMailByInstanceId",
		Version: "1.0",
	},
	ServiceName:  "email.rpc",
	MethodName:   "SendMailByInstanceId",
	RequestType:  (*SendMailByInstanceIdRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/v2/message/email",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
