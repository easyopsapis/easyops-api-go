// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package instance

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for instance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	AddClusterDevice(ctx context.Context, in *AddClusterDeviceRequest) (*AddClusterDeviceResponse, error)
	AppDeletePackage(ctx context.Context, in *AppDeletePackageRequest) (*types.Empty, error)
	AppUpdatePackage(ctx context.Context, in *AppUpdatePackageRequest) (*types.Empty, error)
	ClusterDeletePackage(ctx context.Context, in *ClusterDeletePackageRequest) (*types.Empty, error)
	ClusterUpdatePackage(ctx context.Context, in *ClusterUpdatePackageRequest) (*types.Empty, error)
	DeleteClusterDevice(ctx context.Context, in *DeleteClusterDeviceRequest) (*DeleteClusterDeviceResponse, error)
	GetInstance(ctx context.Context, in *GetInstanceRequest) (*types.Struct, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) AddClusterDevice(ctx context.Context, in *AddClusterDeviceRequest) (*AddClusterDeviceResponse, error) {
	out := new(AddClusterDeviceResponse)
	err := c.c.Invoke(ctx, _AddClusterDeviceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) AppDeletePackage(ctx context.Context, in *AppDeletePackageRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _AppDeletePackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) AppUpdatePackage(ctx context.Context, in *AppUpdatePackageRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _AppUpdatePackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ClusterDeletePackage(ctx context.Context, in *ClusterDeletePackageRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ClusterDeletePackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ClusterUpdatePackage(ctx context.Context, in *ClusterUpdatePackageRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ClusterUpdatePackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteClusterDevice(ctx context.Context, in *DeleteClusterDeviceRequest) (*DeleteClusterDeviceResponse, error) {
	out := new(DeleteClusterDeviceResponse)
	err := c.c.Invoke(ctx, _DeleteClusterDeviceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetInstance(ctx context.Context, in *GetInstanceRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _GetInstanceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for instance service.
type Service interface {
	AddClusterDevice(context.Context, *AddClusterDeviceRequest) (*AddClusterDeviceResponse, error)
	AppDeletePackage(context.Context, *AppDeletePackageRequest) (*types.Empty, error)
	AppUpdatePackage(context.Context, *AppUpdatePackageRequest) (*types.Empty, error)
	ClusterDeletePackage(context.Context, *ClusterDeletePackageRequest) (*types.Empty, error)
	ClusterUpdatePackage(context.Context, *ClusterUpdatePackageRequest) (*types.Empty, error)
	DeleteClusterDevice(context.Context, *DeleteClusterDeviceRequest) (*DeleteClusterDeviceResponse, error)
	GetInstance(context.Context, *GetInstanceRequest) (*types.Struct, error)
}

func _AddClusterDeviceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AddClusterDevice(ctx, req.(*AddClusterDeviceRequest))
	}
}

func _AppDeletePackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AppDeletePackage(ctx, req.(*AppDeletePackageRequest))
	}
}

func _AppUpdatePackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AppUpdatePackage(ctx, req.(*AppUpdatePackageRequest))
	}
}

func _ClusterDeletePackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ClusterDeletePackage(ctx, req.(*ClusterDeletePackageRequest))
	}
}

func _ClusterUpdatePackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ClusterUpdatePackage(ctx, req.(*ClusterUpdatePackageRequest))
	}
}

func _DeleteClusterDeviceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteClusterDevice(ctx, req.(*DeleteClusterDeviceRequest))
	}
}

func _GetInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetInstance(ctx, req.(*GetInstanceRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_AddClusterDeviceMethodDesc, _AddClusterDeviceEndpoint(srv))
	s.RegisterUnaryEndpoint(_AppDeletePackageMethodDesc, _AppDeletePackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_AppUpdatePackageMethodDesc, _AppUpdatePackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_ClusterDeletePackageMethodDesc, _ClusterDeletePackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_ClusterUpdatePackageMethodDesc, _ClusterUpdatePackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteClusterDeviceMethodDesc, _DeleteClusterDeviceEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetInstanceMethodDesc, _GetInstanceEndpoint(srv))
}

// Method Description
var _AddClusterDeviceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.instance.AddClusterDevice",
		Version: "1.0",
	},
	ServiceName:  "instance.rpc",
	MethodName:   "AddClusterDevice",
	RequestType:  (*AddClusterDeviceRequest)(nil),
	ResponseType: (*AddClusterDeviceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/cluster/:instanceId/device/:deviceIds",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _AppDeletePackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.instance.AppDeletePackage",
		Version: "1.0",
	},
	ServiceName:  "instance.rpc",
	MethodName:   "AppDeletePackage",
	RequestType:  (*AppDeletePackageRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/app/:instanceId/package/:packageId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _AppUpdatePackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.instance.AppUpdatePackage",
		Version: "1.0",
	},
	ServiceName:  "instance.rpc",
	MethodName:   "AppUpdatePackage",
	RequestType:  (*AppUpdatePackageRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/app/:instanceId/package",
		},
		Body:         "package",
		ResponseBody: "data",
	},
}

var _ClusterDeletePackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.instance.ClusterDeletePackage",
		Version: "1.0",
	},
	ServiceName:  "instance.rpc",
	MethodName:   "ClusterDeletePackage",
	RequestType:  (*ClusterDeletePackageRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/cluster/:instanceId/package/:packageIds",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ClusterUpdatePackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.instance.ClusterUpdatePackage",
		Version: "1.0",
	},
	ServiceName:  "instance.rpc",
	MethodName:   "ClusterUpdatePackage",
	RequestType:  (*ClusterUpdatePackageRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/cluster/:instanceId/package",
		},
		Body:         "package",
		ResponseBody: "data",
	},
}

var _DeleteClusterDeviceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.instance.DeleteClusterDevice",
		Version: "1.0",
	},
	ServiceName:  "instance.rpc",
	MethodName:   "DeleteClusterDevice",
	RequestType:  (*DeleteClusterDeviceRequest)(nil),
	ResponseType: (*DeleteClusterDeviceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/cluster/:instanceId/device/:deviceIds",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _GetInstanceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.instance.GetInstance",
		Version: "1.0",
	},
	ServiceName:  "instance.rpc",
	MethodName:   "GetInstance",
	RequestType:  (*GetInstanceRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/object_instance/:objectId/:instanceId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
