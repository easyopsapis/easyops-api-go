// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package pipeline

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	cmdb_extend "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/cmdb_extend"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for pipeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	BindPipeline(ctx context.Context, in *BindPipelineRequest) (*cmdb_extend.AppPipeline, error)
	GetPipeline(ctx context.Context, in *GetPipelineRequest) (*cmdb_extend.AppPipeline, error)
	GetPipelines(ctx context.Context, in *GetPipelinesRequest) (*GetPipelinesResponse, error)
	ModifyPipeline(ctx context.Context, in *ModifyPipelineRequest) (*cmdb_extend.AppPipeline, error)
	UnBindPipeline(ctx context.Context, in *UnBindPipelineRequest) (*cmdb_extend.AppPipeline, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) BindPipeline(ctx context.Context, in *BindPipelineRequest) (*cmdb_extend.AppPipeline, error) {
	out := new(cmdb_extend.AppPipeline)
	err := c.c.Invoke(ctx, _BindPipelineMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPipeline(ctx context.Context, in *GetPipelineRequest) (*cmdb_extend.AppPipeline, error) {
	out := new(cmdb_extend.AppPipeline)
	err := c.c.Invoke(ctx, _GetPipelineMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPipelines(ctx context.Context, in *GetPipelinesRequest) (*GetPipelinesResponse, error) {
	out := new(GetPipelinesResponse)
	err := c.c.Invoke(ctx, _GetPipelinesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ModifyPipeline(ctx context.Context, in *ModifyPipelineRequest) (*cmdb_extend.AppPipeline, error) {
	out := new(cmdb_extend.AppPipeline)
	err := c.c.Invoke(ctx, _ModifyPipelineMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UnBindPipeline(ctx context.Context, in *UnBindPipelineRequest) (*cmdb_extend.AppPipeline, error) {
	out := new(cmdb_extend.AppPipeline)
	err := c.c.Invoke(ctx, _UnBindPipelineMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for pipeline service.
type Service interface {
	BindPipeline(context.Context, *BindPipelineRequest) (*cmdb_extend.AppPipeline, error)
	GetPipeline(context.Context, *GetPipelineRequest) (*cmdb_extend.AppPipeline, error)
	GetPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error)
	ModifyPipeline(context.Context, *ModifyPipelineRequest) (*cmdb_extend.AppPipeline, error)
	UnBindPipeline(context.Context, *UnBindPipelineRequest) (*cmdb_extend.AppPipeline, error)
}

func _BindPipelineEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.BindPipeline(ctx, req.(*BindPipelineRequest))
	}
}

func _GetPipelineEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPipeline(ctx, req.(*GetPipelineRequest))
	}
}

func _GetPipelinesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPipelines(ctx, req.(*GetPipelinesRequest))
	}
}

func _ModifyPipelineEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ModifyPipeline(ctx, req.(*ModifyPipelineRequest))
	}
}

func _UnBindPipelineEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UnBindPipeline(ctx, req.(*UnBindPipelineRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_BindPipelineMethodDesc, _BindPipelineEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPipelineMethodDesc, _GetPipelineEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPipelinesMethodDesc, _GetPipelinesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ModifyPipelineMethodDesc, _ModifyPipelineEndpoint(srv))
	s.RegisterUnaryEndpoint(_UnBindPipelineMethodDesc, _UnBindPipelineEndpoint(srv))
}

// Method Description
var _BindPipelineMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.pipeline.BindPipeline",
		Version: "1.0",
	},
	ServiceName:  "pipeline.rpc",
	MethodName:   "BindPipeline",
	RequestType:  (*BindPipelineRequest)(nil),
	ResponseType: (*cmdb_extend.AppPipeline)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/application/:appId/pipeline",
		},
		Body:         "pipeline",
		ResponseBody: "data",
	},
}

var _GetPipelineMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.pipeline.GetPipeline",
		Version: "1.0",
	},
	ServiceName:  "pipeline.rpc",
	MethodName:   "GetPipeline",
	RequestType:  (*GetPipelineRequest)(nil),
	ResponseType: (*cmdb_extend.AppPipeline)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/application/:appId/pipeline/:flowId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetPipelinesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.pipeline.GetPipelines",
		Version: "1.0",
	},
	ServiceName:  "pipeline.rpc",
	MethodName:   "GetPipelines",
	RequestType:  (*GetPipelinesRequest)(nil),
	ResponseType: (*GetPipelinesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/application/:appId/pipeline",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _ModifyPipelineMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.pipeline.ModifyPipeline",
		Version: "1.0",
	},
	ServiceName:  "pipeline.rpc",
	MethodName:   "ModifyPipeline",
	RequestType:  (*ModifyPipelineRequest)(nil),
	ResponseType: (*cmdb_extend.AppPipeline)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/application/:appId/pipeline/:flowId",
		},
		Body:         "pipeline",
		ResponseBody: "data",
	},
}

var _UnBindPipelineMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.pipeline.UnBindPipeline",
		Version: "1.0",
	},
	ServiceName:  "pipeline.rpc",
	MethodName:   "UnBindPipeline",
	RequestType:  (*UnBindPipelineRequest)(nil),
	ResponseType: (*cmdb_extend.AppPipeline)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/application/:appId/pipeline/:flowId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
