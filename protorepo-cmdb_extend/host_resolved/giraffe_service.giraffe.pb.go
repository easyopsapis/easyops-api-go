// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package host_resolved

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for host_resolved service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateOne(ctx context.Context, in *CreateOneRequest) (*types.Struct, error)
	UpdateByQuery(ctx context.Context, in *UpdateByQueryRequest) (*types.Empty, error)
	UpdateHostUnresolved(ctx context.Context, in *UpdateHostUnresolvedRequest) (*types.Struct, error)
	UpdateOne(ctx context.Context, in *UpdateOneRequest) (*types.Struct, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateOne(ctx context.Context, in *CreateOneRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _CreateOneMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateByQuery(ctx context.Context, in *UpdateByQueryRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateByQueryMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateHostUnresolved(ctx context.Context, in *UpdateHostUnresolvedRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _UpdateHostUnresolvedMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateOne(ctx context.Context, in *UpdateOneRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _UpdateOneMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for host_resolved service.
type Service interface {
	CreateOne(context.Context, *CreateOneRequest) (*types.Struct, error)
	UpdateByQuery(context.Context, *UpdateByQueryRequest) (*types.Empty, error)
	UpdateHostUnresolved(context.Context, *UpdateHostUnresolvedRequest) (*types.Struct, error)
	UpdateOne(context.Context, *UpdateOneRequest) (*types.Struct, error)
}

func _CreateOneEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateOne(ctx, req.(*CreateOneRequest))
	}
}

func _UpdateByQueryEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateByQuery(ctx, req.(*UpdateByQueryRequest))
	}
}

func _UpdateHostUnresolvedEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateHostUnresolved(ctx, req.(*UpdateHostUnresolvedRequest))
	}
}

func _UpdateOneEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateOne(ctx, req.(*UpdateOneRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateOneMethodDesc, _CreateOneEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateByQueryMethodDesc, _UpdateByQueryEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateHostUnresolvedMethodDesc, _UpdateHostUnresolvedEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateOneMethodDesc, _UpdateOneEndpoint(srv))
}

// Method Description
var _CreateOneMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.host_resolved.CreateOne",
		Version: "1.0",
	},
	ServiceName:  "host_resolved.rpc",
	MethodName:   "CreateOne",
	RequestType:  (*CreateOneRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/system/storage/collection/t_alert_hostresolved/document",
		},
		Body:         "data",
		ResponseBody: "data",
	},
}

var _UpdateByQueryMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.host_resolved.UpdateByQuery",
		Version: "1.0",
	},
	ServiceName:  "host_resolved.rpc",
	MethodName:   "UpdateByQuery",
	RequestType:  (*UpdateByQueryRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/system/storage/collection/t_alert_hostresolved/document_by_query",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateHostUnresolvedMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.host_resolved.UpdateHostUnresolved",
		Version: "1.0",
	},
	ServiceName:  "host_resolved.rpc",
	MethodName:   "UpdateHostUnresolved",
	RequestType:  (*UpdateHostUnresolvedRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/system/storage/hostResolved/document",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateOneMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb_extend.host_resolved.UpdateOne",
		Version: "1.0",
	},
	ServiceName:  "host_resolved.rpc",
	MethodName:   "UpdateOne",
	RequestType:  (*UpdateOneRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/system/storage/collection/t_alert_hostresolved/document/:id",
		},
		Body:         "data",
		ResponseBody: "data",
	},
}
