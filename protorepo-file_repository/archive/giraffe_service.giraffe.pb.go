// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package archive

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	file_repository "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/file_repository"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for archive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	DeleteArchive(ctx context.Context, in *DeleteArchiveRequest) (*DeleteArchiveResponse, error)
	DeleteArchiveV2(ctx context.Context, in *DeleteArchiveV2Request) (*DeleteArchiveV2Response, error)
	GetDiffSize(ctx context.Context, in *GetDiffSizeRequest) (*GetDiffSizeResponse, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest) (*GetFileInfoResponse, error)
	Listdir(ctx context.Context, in *ListdirRequest) (*ListdirResponse, error)
	GetSign(ctx context.Context, in *GetSignRequest) (*GetSignResponse, error)
	GetSize(ctx context.Context, in *GetSizeRequest) (*GetSizeResponse, error)
	GetDifference(ctx context.Context, in *GetDifferenceRequest) (*file_repository.Diff, error)
	GetPackageDifference(ctx context.Context, in *GetPackageDifferenceRequest) (*file_repository.Diff, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) DeleteArchive(ctx context.Context, in *DeleteArchiveRequest) (*DeleteArchiveResponse, error) {
	out := new(DeleteArchiveResponse)
	err := c.c.Invoke(ctx, _DeleteArchiveContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteArchiveV2(ctx context.Context, in *DeleteArchiveV2Request) (*DeleteArchiveV2Response, error) {
	out := new(DeleteArchiveV2Response)
	err := c.c.Invoke(ctx, _DeleteArchiveV2Contract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetDiffSize(ctx context.Context, in *GetDiffSizeRequest) (*GetDiffSizeResponse, error) {
	out := new(GetDiffSizeResponse)
	err := c.c.Invoke(ctx, _GetDiffSizeContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFileInfo(ctx context.Context, in *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	out := new(GetFileInfoResponse)
	err := c.c.Invoke(ctx, _GetFileInfoContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Listdir(ctx context.Context, in *ListdirRequest) (*ListdirResponse, error) {
	out := new(ListdirResponse)
	err := c.c.Invoke(ctx, _ListdirContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetSign(ctx context.Context, in *GetSignRequest) (*GetSignResponse, error) {
	out := new(GetSignResponse)
	err := c.c.Invoke(ctx, _GetSignContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetSize(ctx context.Context, in *GetSizeRequest) (*GetSizeResponse, error) {
	out := new(GetSizeResponse)
	err := c.c.Invoke(ctx, _GetSizeContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetDifference(ctx context.Context, in *GetDifferenceRequest) (*file_repository.Diff, error) {
	out := new(file_repository.Diff)
	err := c.c.Invoke(ctx, _GetDifferenceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPackageDifference(ctx context.Context, in *GetPackageDifferenceRequest) (*file_repository.Diff, error) {
	out := new(file_repository.Diff)
	err := c.c.Invoke(ctx, _GetPackageDifferenceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for archive service.
type Service interface {
	DeleteArchive(context.Context, *DeleteArchiveRequest) (*DeleteArchiveResponse, error)
	DeleteArchiveV2(context.Context, *DeleteArchiveV2Request) (*DeleteArchiveV2Response, error)
	GetDiffSize(context.Context, *GetDiffSizeRequest) (*GetDiffSizeResponse, error)
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	Listdir(context.Context, *ListdirRequest) (*ListdirResponse, error)
	GetSign(context.Context, *GetSignRequest) (*GetSignResponse, error)
	GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error)
	GetDifference(context.Context, *GetDifferenceRequest) (*file_repository.Diff, error)
	GetPackageDifference(context.Context, *GetPackageDifferenceRequest) (*file_repository.Diff, error)
}

func _DeleteArchiveEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteArchive(ctx, req.(*DeleteArchiveRequest))
	}
}

func _DeleteArchiveV2Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteArchiveV2(ctx, req.(*DeleteArchiveV2Request))
	}
}

func _GetDiffSizeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetDiffSize(ctx, req.(*GetDiffSizeRequest))
	}
}

func _GetFileInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
}

func _ListdirEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Listdir(ctx, req.(*ListdirRequest))
	}
}

func _GetSignEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSign(ctx, req.(*GetSignRequest))
	}
}

func _GetSizeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSize(ctx, req.(*GetSizeRequest))
	}
}

func _GetDifferenceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetDifference(ctx, req.(*GetDifferenceRequest))
	}
}

func _GetPackageDifferenceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPackageDifference(ctx, req.(*GetPackageDifferenceRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_DeleteArchiveContract, _DeleteArchiveEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteArchiveV2Contract, _DeleteArchiveV2Endpoint(srv))
	s.RegisterUnaryEndpoint(_GetDiffSizeContract, _GetDiffSizeEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFileInfoContract, _GetFileInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListdirContract, _ListdirEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetSignContract, _GetSignEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetSizeContract, _GetSizeEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetDifferenceContract, _GetDifferenceEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPackageDifferenceContract, _GetPackageDifferenceEndpoint(srv))
}

// API Contract
var _DeleteArchiveContract = &deleteArchiveContract{}

type deleteArchiveContract struct{}

func (*deleteArchiveContract) ServiceName() string          { return "archive.rpc" }
func (*deleteArchiveContract) MethodName() string           { return "DeleteArchive" }
func (*deleteArchiveContract) RequestMessage() interface{}  { return new(DeleteArchiveRequest) }
func (*deleteArchiveContract) ResponseMessage() interface{} { return new(DeleteArchiveRequest) }
func (*deleteArchiveContract) ContractName() string {
	return "easyops.api.file_repository.archive.DeleteArchive"
}
func (*deleteArchiveContract) ContractVersion() string { return "1.0" }
func (*deleteArchiveContract) Pattern() (string, string) {
	return "DELETE", "/archive/:packageId/:versionId"
}
func (*deleteArchiveContract) Body() string { return "" }

var _DeleteArchiveV2Contract = &deleteArchiveV2Contract{}

type deleteArchiveV2Contract struct{}

func (*deleteArchiveV2Contract) ServiceName() string          { return "archive.rpc" }
func (*deleteArchiveV2Contract) MethodName() string           { return "DeleteArchiveV2" }
func (*deleteArchiveV2Contract) RequestMessage() interface{}  { return new(DeleteArchiveV2Request) }
func (*deleteArchiveV2Contract) ResponseMessage() interface{} { return new(DeleteArchiveV2Request) }
func (*deleteArchiveV2Contract) ContractName() string {
	return "easyops.api.file_repository.archive.DeleteArchiveV2"
}
func (*deleteArchiveV2Contract) ContractVersion() string { return "1.0" }
func (*deleteArchiveV2Contract) Pattern() (string, string) {
	return "DELETE", "/v2/archive/:packageId/:versionId"
}
func (*deleteArchiveV2Contract) Body() string { return "" }

var _GetDiffSizeContract = &getDiffSizeContract{}

type getDiffSizeContract struct{}

func (*getDiffSizeContract) ServiceName() string          { return "archive.rpc" }
func (*getDiffSizeContract) MethodName() string           { return "GetDiffSize" }
func (*getDiffSizeContract) RequestMessage() interface{}  { return new(GetDiffSizeRequest) }
func (*getDiffSizeContract) ResponseMessage() interface{} { return new(GetDiffSizeRequest) }
func (*getDiffSizeContract) ContractName() string {
	return "easyops.api.file_repository.archive.GetDiffSize"
}
func (*getDiffSizeContract) ContractVersion() string   { return "1.0" }
func (*getDiffSizeContract) Pattern() (string, string) { return "GET", "/archive/diff/size/@packageId" }
func (*getDiffSizeContract) Body() string              { return "" }

var _GetFileInfoContract = &getFileInfoContract{}

type getFileInfoContract struct{}

func (*getFileInfoContract) ServiceName() string          { return "archive.rpc" }
func (*getFileInfoContract) MethodName() string           { return "GetFileInfo" }
func (*getFileInfoContract) RequestMessage() interface{}  { return new(GetFileInfoRequest) }
func (*getFileInfoContract) ResponseMessage() interface{} { return new(GetFileInfoRequest) }
func (*getFileInfoContract) ContractName() string {
	return "easyops.api.file_repository.archive.GetFileInfo"
}
func (*getFileInfoContract) ContractVersion() string { return "1.0" }
func (*getFileInfoContract) Pattern() (string, string) {
	return "GET", "/archive/info/@packageId/@versionId"
}
func (*getFileInfoContract) Body() string { return "" }

var _ListdirContract = &listdirContract{}

type listdirContract struct{}

func (*listdirContract) ServiceName() string          { return "archive.rpc" }
func (*listdirContract) MethodName() string           { return "Listdir" }
func (*listdirContract) RequestMessage() interface{}  { return new(ListdirRequest) }
func (*listdirContract) ResponseMessage() interface{} { return new(ListdirRequest) }
func (*listdirContract) ContractName() string         { return "easyops.api.file_repository.archive.Listdir" }
func (*listdirContract) ContractVersion() string      { return "1.0" }
func (*listdirContract) Pattern() (string, string) {
	return "GET", "/archive/list/@packageId/@versionId"
}
func (*listdirContract) Body() string { return "" }

var _GetSignContract = &getSignContract{}

type getSignContract struct{}

func (*getSignContract) ServiceName() string          { return "archive.rpc" }
func (*getSignContract) MethodName() string           { return "GetSign" }
func (*getSignContract) RequestMessage() interface{}  { return new(GetSignRequest) }
func (*getSignContract) ResponseMessage() interface{} { return new(GetSignRequest) }
func (*getSignContract) ContractName() string         { return "easyops.api.file_repository.archive.GetSign" }
func (*getSignContract) ContractVersion() string      { return "1.0" }
func (*getSignContract) Pattern() (string, string) {
	return "GET", "/archive/sign/@packageId/@versionId"
}
func (*getSignContract) Body() string { return "" }

var _GetSizeContract = &getSizeContract{}

type getSizeContract struct{}

func (*getSizeContract) ServiceName() string          { return "archive.rpc" }
func (*getSizeContract) MethodName() string           { return "GetSize" }
func (*getSizeContract) RequestMessage() interface{}  { return new(GetSizeRequest) }
func (*getSizeContract) ResponseMessage() interface{} { return new(GetSizeRequest) }
func (*getSizeContract) ContractName() string         { return "easyops.api.file_repository.archive.GetSize" }
func (*getSizeContract) ContractVersion() string      { return "1.0" }
func (*getSizeContract) Pattern() (string, string) {
	return "GET", "/archive/size/@packageId/@versionId"
}
func (*getSizeContract) Body() string { return "" }

var _GetDifferenceContract = &getDifferenceContract{}

type getDifferenceContract struct{}

func (*getDifferenceContract) ServiceName() string          { return "archive.rpc" }
func (*getDifferenceContract) MethodName() string           { return "GetDifference" }
func (*getDifferenceContract) RequestMessage() interface{}  { return new(GetDifferenceRequest) }
func (*getDifferenceContract) ResponseMessage() interface{} { return new(GetDifferenceRequest) }
func (*getDifferenceContract) ContractName() string {
	return "easyops.api.file_repository.archive.GetDifference"
}
func (*getDifferenceContract) ContractVersion() string { return "1.0" }
func (*getDifferenceContract) Pattern() (string, string) {
	return "GET", "/archive/difference/:packageId"
}
func (*getDifferenceContract) Body() string { return "" }

var _GetPackageDifferenceContract = &getPackageDifferenceContract{}

type getPackageDifferenceContract struct{}

func (*getPackageDifferenceContract) ServiceName() string { return "archive.rpc" }
func (*getPackageDifferenceContract) MethodName() string  { return "GetPackageDifference" }
func (*getPackageDifferenceContract) RequestMessage() interface{} {
	return new(GetPackageDifferenceRequest)
}
func (*getPackageDifferenceContract) ResponseMessage() interface{} {
	return new(GetPackageDifferenceRequest)
}
func (*getPackageDifferenceContract) ContractName() string {
	return "easyops.api.file_repository.archive.GetPackageDifference"
}
func (*getPackageDifferenceContract) ContractVersion() string   { return "1.0" }
func (*getPackageDifferenceContract) Pattern() (string, string) { return "GET", "/archive/difference" }
func (*getPackageDifferenceContract) Body() string              { return "" }
