// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package workspace

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for workspace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CheckWorkspaceBase(ctx context.Context, in *CheckWorkspaceBaseRequest) (*CheckWorkspaceBaseResponse, error)
	Clear(ctx context.Context, in *ClearRequest) (*types.Empty, error)
	CommitWorkspace(ctx context.Context, in *CommitWorkspaceRequest) (*CommitWorkspaceResponse, error)
	CommitWorkspaceV2(ctx context.Context, in *CommitWorkspaceV2Request) (*CommitWorkspaceV2Response, error)
	FileCompare(ctx context.Context, in *FileCompareRequest) (*FileCompareResponse, error)
	CompareWorkspaceWithVersion(ctx context.Context, in *CompareWorkspaceWithVersionRequest) (*CompareWorkspaceWithVersionResponse, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest) (*GetFileInfoResponse, error)
	GetFileList(ctx context.Context, in *GetFileListRequest) (*GetFileListResponse, error)
	Init(ctx context.Context, in *InitRequest) (*InitResponse, error)
	SafeCommitWorkspace(ctx context.Context, in *SafeCommitWorkspaceRequest) (*SafeCommitWorkspaceResponse, error)
	UpdateFile(ctx context.Context, in *UpdateFileRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CheckWorkspaceBase(ctx context.Context, in *CheckWorkspaceBaseRequest) (*CheckWorkspaceBaseResponse, error) {
	out := new(CheckWorkspaceBaseResponse)
	err := c.c.Invoke(ctx, _CheckWorkspaceBaseMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Clear(ctx context.Context, in *ClearRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ClearMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CommitWorkspace(ctx context.Context, in *CommitWorkspaceRequest) (*CommitWorkspaceResponse, error) {
	out := new(CommitWorkspaceResponse)
	err := c.c.Invoke(ctx, _CommitWorkspaceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CommitWorkspaceV2(ctx context.Context, in *CommitWorkspaceV2Request) (*CommitWorkspaceV2Response, error) {
	out := new(CommitWorkspaceV2Response)
	err := c.c.Invoke(ctx, _CommitWorkspaceV2MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) FileCompare(ctx context.Context, in *FileCompareRequest) (*FileCompareResponse, error) {
	out := new(FileCompareResponse)
	err := c.c.Invoke(ctx, _FileCompareMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CompareWorkspaceWithVersion(ctx context.Context, in *CompareWorkspaceWithVersionRequest) (*CompareWorkspaceWithVersionResponse, error) {
	out := new(CompareWorkspaceWithVersionResponse)
	err := c.c.Invoke(ctx, _CompareWorkspaceWithVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFileInfo(ctx context.Context, in *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	out := new(GetFileInfoResponse)
	err := c.c.Invoke(ctx, _GetFileInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFileList(ctx context.Context, in *GetFileListRequest) (*GetFileListResponse, error) {
	out := new(GetFileListResponse)
	err := c.c.Invoke(ctx, _GetFileListMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Init(ctx context.Context, in *InitRequest) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.c.Invoke(ctx, _InitMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SafeCommitWorkspace(ctx context.Context, in *SafeCommitWorkspaceRequest) (*SafeCommitWorkspaceResponse, error) {
	out := new(SafeCommitWorkspaceResponse)
	err := c.c.Invoke(ctx, _SafeCommitWorkspaceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateFile(ctx context.Context, in *UpdateFileRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateFileMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for workspace service.
type Service interface {
	CheckWorkspaceBase(context.Context, *CheckWorkspaceBaseRequest) (*CheckWorkspaceBaseResponse, error)
	Clear(context.Context, *ClearRequest) (*types.Empty, error)
	CommitWorkspace(context.Context, *CommitWorkspaceRequest) (*CommitWorkspaceResponse, error)
	CommitWorkspaceV2(context.Context, *CommitWorkspaceV2Request) (*CommitWorkspaceV2Response, error)
	FileCompare(context.Context, *FileCompareRequest) (*FileCompareResponse, error)
	CompareWorkspaceWithVersion(context.Context, *CompareWorkspaceWithVersionRequest) (*CompareWorkspaceWithVersionResponse, error)
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	SafeCommitWorkspace(context.Context, *SafeCommitWorkspaceRequest) (*SafeCommitWorkspaceResponse, error)
	UpdateFile(context.Context, *UpdateFileRequest) (*types.Empty, error)
}

func _CheckWorkspaceBaseEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CheckWorkspaceBase(ctx, req.(*CheckWorkspaceBaseRequest))
	}
}

func _ClearEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Clear(ctx, req.(*ClearRequest))
	}
}

func _CommitWorkspaceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CommitWorkspace(ctx, req.(*CommitWorkspaceRequest))
	}
}

func _CommitWorkspaceV2Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CommitWorkspaceV2(ctx, req.(*CommitWorkspaceV2Request))
	}
}

func _FileCompareEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FileCompare(ctx, req.(*FileCompareRequest))
	}
}

func _CompareWorkspaceWithVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CompareWorkspaceWithVersion(ctx, req.(*CompareWorkspaceWithVersionRequest))
	}
}

func _GetFileInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
}

func _GetFileListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFileList(ctx, req.(*GetFileListRequest))
	}
}

func _InitEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Init(ctx, req.(*InitRequest))
	}
}

func _SafeCommitWorkspaceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SafeCommitWorkspace(ctx, req.(*SafeCommitWorkspaceRequest))
	}
}

func _UpdateFileEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateFile(ctx, req.(*UpdateFileRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CheckWorkspaceBaseMethodDesc, _CheckWorkspaceBaseEndpoint(srv))
	s.RegisterUnaryEndpoint(_ClearMethodDesc, _ClearEndpoint(srv))
	s.RegisterUnaryEndpoint(_CommitWorkspaceMethodDesc, _CommitWorkspaceEndpoint(srv))
	s.RegisterUnaryEndpoint(_CommitWorkspaceV2MethodDesc, _CommitWorkspaceV2Endpoint(srv))
	s.RegisterUnaryEndpoint(_FileCompareMethodDesc, _FileCompareEndpoint(srv))
	s.RegisterUnaryEndpoint(_CompareWorkspaceWithVersionMethodDesc, _CompareWorkspaceWithVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFileInfoMethodDesc, _GetFileInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFileListMethodDesc, _GetFileListEndpoint(srv))
	s.RegisterUnaryEndpoint(_InitMethodDesc, _InitEndpoint(srv))
	s.RegisterUnaryEndpoint(_SafeCommitWorkspaceMethodDesc, _SafeCommitWorkspaceEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateFileMethodDesc, _UpdateFileEndpoint(srv))
}

// Method Description
var _CheckWorkspaceBaseMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.CheckWorkspaceBase",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "CheckWorkspaceBase",
	RequestType:  (*CheckWorkspaceBaseRequest)(nil),
	ResponseType: (*CheckWorkspaceBaseResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/workspace/check/:packageId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ClearMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.Clear",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "Clear",
	RequestType:  (*ClearRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/workspace/:packageId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CommitWorkspaceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.CommitWorkspace",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "CommitWorkspace",
	RequestType:  (*CommitWorkspaceRequest)(nil),
	ResponseType: (*CommitWorkspaceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/workspace/:packageId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CommitWorkspaceV2MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.CommitWorkspaceV2",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "CommitWorkspaceV2",
	RequestType:  (*CommitWorkspaceV2Request)(nil),
	ResponseType: (*CommitWorkspaceV2Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/v2/workspace/:packageId",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _FileCompareMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.FileCompare",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "FileCompare",
	RequestType:  (*FileCompareRequest)(nil),
	ResponseType: (*FileCompareResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/workspace/:packageId/file/compare",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CompareWorkspaceWithVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.CompareWorkspaceWithVersion",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "CompareWorkspaceWithVersion",
	RequestType:  (*CompareWorkspaceWithVersionRequest)(nil),
	ResponseType: (*CompareWorkspaceWithVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/workspace/:packageId/compareWithVersion",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetFileInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.GetFileInfo",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "GetFileInfo",
	RequestType:  (*GetFileInfoRequest)(nil),
	ResponseType: (*GetFileInfoResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/v2/workspace/:packageId/file",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetFileListMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.GetFileList",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "GetFileList",
	RequestType:  (*GetFileListRequest)(nil),
	ResponseType: (*GetFileListResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/v2/workspace/:packageId/file",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _InitMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.Init",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "Init",
	RequestType:  (*InitRequest)(nil),
	ResponseType: (*InitResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/workspace/:packageId",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _SafeCommitWorkspaceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.SafeCommitWorkspace",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "SafeCommitWorkspace",
	RequestType:  (*SafeCommitWorkspaceRequest)(nil),
	ResponseType: (*SafeCommitWorkspaceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/v2/workspace/:packageId",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _UpdateFileMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.file_repository.workspace.UpdateFile",
		Version: "1.0",
	},
	ServiceName:  "workspace.rpc",
	MethodName:   "UpdateFile",
	RequestType:  (*UpdateFileRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/v2/workspace/:packageId/file",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
