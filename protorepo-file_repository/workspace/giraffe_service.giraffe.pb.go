// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package workspace

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for workspace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CheckWorkspaceBase(ctx context.Context, in *CheckWorkspaceBaseRequest) (*CheckWorkspaceBaseResponse, error)
	Clear(ctx context.Context, in *ClearRequest) (*types.Empty, error)
	CommitWorkspace(ctx context.Context, in *CommitWorkspaceRequest) (*CommitWorkspaceResponse, error)
	FileCompare(ctx context.Context, in *FileCompareRequest) (*FileCompareResponse, error)
	CompareWorkspaceWithVersion(ctx context.Context, in *CompareWorkspaceWithVersionRequest) (*CompareWorkspaceWithVersionResponse, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest) (*GetFileInfoResponse, error)
	GetFileList(ctx context.Context, in *GetFileListRequest) (*GetFileListResponse, error)
	Init(ctx context.Context, in *InitRequest) (*InitResponse, error)
	SafeCommitWorkspace(ctx context.Context, in *SafeCommitWorkspaceRequest) (*SafeCommitWorkspaceResponse, error)
	UpdateFile(ctx context.Context, in *UpdateFileRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CheckWorkspaceBase(ctx context.Context, in *CheckWorkspaceBaseRequest) (*CheckWorkspaceBaseResponse, error) {
	out := new(CheckWorkspaceBaseResponse)
	err := c.c.Invoke(ctx, _CheckWorkspaceBaseContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Clear(ctx context.Context, in *ClearRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ClearContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CommitWorkspace(ctx context.Context, in *CommitWorkspaceRequest) (*CommitWorkspaceResponse, error) {
	out := new(CommitWorkspaceResponse)
	err := c.c.Invoke(ctx, _CommitWorkspaceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) FileCompare(ctx context.Context, in *FileCompareRequest) (*FileCompareResponse, error) {
	out := new(FileCompareResponse)
	err := c.c.Invoke(ctx, _FileCompareContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CompareWorkspaceWithVersion(ctx context.Context, in *CompareWorkspaceWithVersionRequest) (*CompareWorkspaceWithVersionResponse, error) {
	out := new(CompareWorkspaceWithVersionResponse)
	err := c.c.Invoke(ctx, _CompareWorkspaceWithVersionContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFileInfo(ctx context.Context, in *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	out := new(GetFileInfoResponse)
	err := c.c.Invoke(ctx, _GetFileInfoContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFileList(ctx context.Context, in *GetFileListRequest) (*GetFileListResponse, error) {
	out := new(GetFileListResponse)
	err := c.c.Invoke(ctx, _GetFileListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Init(ctx context.Context, in *InitRequest) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.c.Invoke(ctx, _InitContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SafeCommitWorkspace(ctx context.Context, in *SafeCommitWorkspaceRequest) (*SafeCommitWorkspaceResponse, error) {
	out := new(SafeCommitWorkspaceResponse)
	err := c.c.Invoke(ctx, _SafeCommitWorkspaceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateFile(ctx context.Context, in *UpdateFileRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateFileContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for workspace service.
type Service interface {
	CheckWorkspaceBase(context.Context, *CheckWorkspaceBaseRequest) (*CheckWorkspaceBaseResponse, error)
	Clear(context.Context, *ClearRequest) (*types.Empty, error)
	CommitWorkspace(context.Context, *CommitWorkspaceRequest) (*CommitWorkspaceResponse, error)
	FileCompare(context.Context, *FileCompareRequest) (*FileCompareResponse, error)
	CompareWorkspaceWithVersion(context.Context, *CompareWorkspaceWithVersionRequest) (*CompareWorkspaceWithVersionResponse, error)
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	SafeCommitWorkspace(context.Context, *SafeCommitWorkspaceRequest) (*SafeCommitWorkspaceResponse, error)
	UpdateFile(context.Context, *UpdateFileRequest) (*types.Empty, error)
}

func _CheckWorkspaceBaseEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CheckWorkspaceBase(ctx, req.(*CheckWorkspaceBaseRequest))
	}
}

func _ClearEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Clear(ctx, req.(*ClearRequest))
	}
}

func _CommitWorkspaceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CommitWorkspace(ctx, req.(*CommitWorkspaceRequest))
	}
}

func _FileCompareEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FileCompare(ctx, req.(*FileCompareRequest))
	}
}

func _CompareWorkspaceWithVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CompareWorkspaceWithVersion(ctx, req.(*CompareWorkspaceWithVersionRequest))
	}
}

func _GetFileInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
}

func _GetFileListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFileList(ctx, req.(*GetFileListRequest))
	}
}

func _InitEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Init(ctx, req.(*InitRequest))
	}
}

func _SafeCommitWorkspaceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SafeCommitWorkspace(ctx, req.(*SafeCommitWorkspaceRequest))
	}
}

func _UpdateFileEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateFile(ctx, req.(*UpdateFileRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CheckWorkspaceBaseContract, _CheckWorkspaceBaseEndpoint(srv))
	s.RegisterUnaryEndpoint(_ClearContract, _ClearEndpoint(srv))
	s.RegisterUnaryEndpoint(_CommitWorkspaceContract, _CommitWorkspaceEndpoint(srv))
	s.RegisterUnaryEndpoint(_FileCompareContract, _FileCompareEndpoint(srv))
	s.RegisterUnaryEndpoint(_CompareWorkspaceWithVersionContract, _CompareWorkspaceWithVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFileInfoContract, _GetFileInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFileListContract, _GetFileListEndpoint(srv))
	s.RegisterUnaryEndpoint(_InitContract, _InitEndpoint(srv))
	s.RegisterUnaryEndpoint(_SafeCommitWorkspaceContract, _SafeCommitWorkspaceEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateFileContract, _UpdateFileEndpoint(srv))
}

// API Contract
var _CheckWorkspaceBaseContract = &checkWorkspaceBaseContract{}

type checkWorkspaceBaseContract struct{}

func (*checkWorkspaceBaseContract) ServiceName() string         { return "workspace.rpc" }
func (*checkWorkspaceBaseContract) MethodName() string          { return "CheckWorkspaceBase" }
func (*checkWorkspaceBaseContract) RequestMessage() interface{} { return new(CheckWorkspaceBaseRequest) }
func (*checkWorkspaceBaseContract) ResponseMessage() interface{} {
	return new(CheckWorkspaceBaseRequest)
}
func (*checkWorkspaceBaseContract) ContractName() string {
	return "easyops.api.file_repository.workspace.CheckWorkspaceBase"
}
func (*checkWorkspaceBaseContract) ContractVersion() string { return "1.0" }
func (*checkWorkspaceBaseContract) Pattern() (string, string) {
	return "GET", "/workspace/check/@packageId"
}
func (*checkWorkspaceBaseContract) Body() string { return "" }

var _ClearContract = &clearContract{}

type clearContract struct{}

func (*clearContract) ServiceName() string          { return "workspace.rpc" }
func (*clearContract) MethodName() string           { return "Clear" }
func (*clearContract) RequestMessage() interface{}  { return new(ClearRequest) }
func (*clearContract) ResponseMessage() interface{} { return new(ClearRequest) }
func (*clearContract) ContractName() string         { return "easyops.api.file_repository.workspace.Clear" }
func (*clearContract) ContractVersion() string      { return "1.0" }
func (*clearContract) Pattern() (string, string)    { return "DELETE", "/workspace/@packageId" }
func (*clearContract) Body() string                 { return "" }

var _CommitWorkspaceContract = &commitWorkspaceContract{}

type commitWorkspaceContract struct{}

func (*commitWorkspaceContract) ServiceName() string          { return "workspace.rpc" }
func (*commitWorkspaceContract) MethodName() string           { return "CommitWorkspace" }
func (*commitWorkspaceContract) RequestMessage() interface{}  { return new(CommitWorkspaceRequest) }
func (*commitWorkspaceContract) ResponseMessage() interface{} { return new(CommitWorkspaceRequest) }
func (*commitWorkspaceContract) ContractName() string {
	return "easyops.api.file_repository.workspace.CommitWorkspace"
}
func (*commitWorkspaceContract) ContractVersion() string   { return "1.0" }
func (*commitWorkspaceContract) Pattern() (string, string) { return "POST", "/workspace/:packageId" }
func (*commitWorkspaceContract) Body() string              { return "" }

var _FileCompareContract = &fileCompareContract{}

type fileCompareContract struct{}

func (*fileCompareContract) ServiceName() string          { return "workspace.rpc" }
func (*fileCompareContract) MethodName() string           { return "FileCompare" }
func (*fileCompareContract) RequestMessage() interface{}  { return new(FileCompareRequest) }
func (*fileCompareContract) ResponseMessage() interface{} { return new(FileCompareRequest) }
func (*fileCompareContract) ContractName() string {
	return "easyops.api.file_repository.workspace.FileCompare"
}
func (*fileCompareContract) ContractVersion() string { return "1.0" }
func (*fileCompareContract) Pattern() (string, string) {
	return "POST", "/workspace/@packageId/file/compare"
}
func (*fileCompareContract) Body() string { return "" }

var _CompareWorkspaceWithVersionContract = &compareWorkspaceWithVersionContract{}

type compareWorkspaceWithVersionContract struct{}

func (*compareWorkspaceWithVersionContract) ServiceName() string { return "workspace.rpc" }
func (*compareWorkspaceWithVersionContract) MethodName() string  { return "CompareWorkspaceWithVersion" }
func (*compareWorkspaceWithVersionContract) RequestMessage() interface{} {
	return new(CompareWorkspaceWithVersionRequest)
}
func (*compareWorkspaceWithVersionContract) ResponseMessage() interface{} {
	return new(CompareWorkspaceWithVersionRequest)
}
func (*compareWorkspaceWithVersionContract) ContractName() string {
	return "easyops.api.file_repository.workspace.CompareWorkspaceWithVersion"
}
func (*compareWorkspaceWithVersionContract) ContractVersion() string { return "1.0" }
func (*compareWorkspaceWithVersionContract) Pattern() (string, string) {
	return "GET", "/workspace/@packageId/compareWithVersion"
}
func (*compareWorkspaceWithVersionContract) Body() string { return "" }

var _GetFileInfoContract = &getFileInfoContract{}

type getFileInfoContract struct{}

func (*getFileInfoContract) ServiceName() string          { return "workspace.rpc" }
func (*getFileInfoContract) MethodName() string           { return "GetFileInfo" }
func (*getFileInfoContract) RequestMessage() interface{}  { return new(GetFileInfoRequest) }
func (*getFileInfoContract) ResponseMessage() interface{} { return new(GetFileInfoRequest) }
func (*getFileInfoContract) ContractName() string {
	return "easyops.api.file_repository.workspace.GetFileInfo"
}
func (*getFileInfoContract) ContractVersion() string   { return "1.0" }
func (*getFileInfoContract) Pattern() (string, string) { return "POST", "/v2/workspace/:packageId/file" }
func (*getFileInfoContract) Body() string              { return "" }

var _GetFileListContract = &getFileListContract{}

type getFileListContract struct{}

func (*getFileListContract) ServiceName() string          { return "workspace.rpc" }
func (*getFileListContract) MethodName() string           { return "GetFileList" }
func (*getFileListContract) RequestMessage() interface{}  { return new(GetFileListRequest) }
func (*getFileListContract) ResponseMessage() interface{} { return new(GetFileListRequest) }
func (*getFileListContract) ContractName() string {
	return "easyops.api.file_repository.workspace.GetFileList"
}
func (*getFileListContract) ContractVersion() string   { return "1.0" }
func (*getFileListContract) Pattern() (string, string) { return "POST", "/v2/workspace/:packageId/file" }
func (*getFileListContract) Body() string              { return "" }

var _InitContract = &initContract{}

type initContract struct{}

func (*initContract) ServiceName() string          { return "workspace.rpc" }
func (*initContract) MethodName() string           { return "Init" }
func (*initContract) RequestMessage() interface{}  { return new(InitRequest) }
func (*initContract) ResponseMessage() interface{} { return new(InitRequest) }
func (*initContract) ContractName() string         { return "easyops.api.file_repository.workspace.Init" }
func (*initContract) ContractVersion() string      { return "1.0" }
func (*initContract) Pattern() (string, string)    { return "PUT", "/workspace/@packageId" }
func (*initContract) Body() string                 { return "" }

var _SafeCommitWorkspaceContract = &safeCommitWorkspaceContract{}

type safeCommitWorkspaceContract struct{}

func (*safeCommitWorkspaceContract) ServiceName() string { return "workspace.rpc" }
func (*safeCommitWorkspaceContract) MethodName() string  { return "SafeCommitWorkspace" }
func (*safeCommitWorkspaceContract) RequestMessage() interface{} {
	return new(SafeCommitWorkspaceRequest)
}
func (*safeCommitWorkspaceContract) ResponseMessage() interface{} {
	return new(SafeCommitWorkspaceRequest)
}
func (*safeCommitWorkspaceContract) ContractName() string {
	return "easyops.api.file_repository.workspace.SafeCommitWorkspace"
}
func (*safeCommitWorkspaceContract) ContractVersion() string { return "1.0" }
func (*safeCommitWorkspaceContract) Pattern() (string, string) {
	return "POST", "/v2/workspace/:packageId"
}
func (*safeCommitWorkspaceContract) Body() string { return "" }

var _UpdateFileContract = &updateFileContract{}

type updateFileContract struct{}

func (*updateFileContract) ServiceName() string          { return "workspace.rpc" }
func (*updateFileContract) MethodName() string           { return "UpdateFile" }
func (*updateFileContract) RequestMessage() interface{}  { return new(UpdateFileRequest) }
func (*updateFileContract) ResponseMessage() interface{} { return new(UpdateFileRequest) }
func (*updateFileContract) ContractName() string {
	return "easyops.api.file_repository.workspace.UpdateFile"
}
func (*updateFileContract) ContractVersion() string   { return "1.0" }
func (*updateFileContract) Pattern() (string, string) { return "POST", "/v2/workspace/:packageId/file" }
func (*updateFileContract) Body() string              { return "" }
