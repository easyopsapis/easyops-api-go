// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package collector

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	GetList(ctx context.Context, in *GetListRequest) (*GetListResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) GetList(ctx context.Context, in *GetListRequest) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.c.Invoke(ctx, _GetListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for collector service.
type Service interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
}

func _GetListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetList(ctx, req.(*GetListRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_GetListContract, _GetListEndpoint(srv))
}

// API Contract
var _GetListContract = &getListContract{}

type getListContract struct{}

func (*getListContract) ServiceName() string          { return "collector.rpc" }
func (*getListContract) MethodName() string           { return "GetList" }
func (*getListContract) RequestMessage() interface{}  { return new(GetListRequest) }
func (*getListContract) ResponseMessage() interface{} { return new(GetListRequest) }
func (*getListContract) ContractName() string         { return "easyops.api.monitor.collector.GetList" }
func (*getListContract) ContractVersion() string      { return "1.0" }
func (*getListContract) Pattern() (string, string)    { return "GET", "/api/v1/collector/list/:table" }
func (*getListContract) Body() string                 { return "" }
