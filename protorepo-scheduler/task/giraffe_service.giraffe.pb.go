// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package task

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	scheduler "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/scheduler"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateTask(ctx context.Context, in *scheduler.SchedulerTask) (*CreateTaskResponse, error)
	DelTask(ctx context.Context, in *DelTaskRequest) (*types.Empty, error)
	GetTask(ctx context.Context, in *GetTaskRequest) (*scheduler.SchedulerTask, error)
	ListTask(ctx context.Context, in *ListTaskRequest) (*ListTaskResponse, error)
	UpdateTaskDetail(ctx context.Context, in *UpdateTaskDetailRequest) (*UpdateTaskDetailResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateTask(ctx context.Context, in *scheduler.SchedulerTask) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.c.Invoke(ctx, _CreateTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DelTask(ctx context.Context, in *DelTaskRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DelTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetTask(ctx context.Context, in *GetTaskRequest) (*scheduler.SchedulerTask, error) {
	out := new(scheduler.SchedulerTask)
	err := c.c.Invoke(ctx, _GetTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTask(ctx context.Context, in *ListTaskRequest) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.c.Invoke(ctx, _ListTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTaskDetail(ctx context.Context, in *UpdateTaskDetailRequest) (*UpdateTaskDetailResponse, error) {
	out := new(UpdateTaskDetailResponse)
	err := c.c.Invoke(ctx, _UpdateTaskDetailMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for task service.
type Service interface {
	CreateTask(context.Context, *scheduler.SchedulerTask) (*CreateTaskResponse, error)
	DelTask(context.Context, *DelTaskRequest) (*types.Empty, error)
	GetTask(context.Context, *GetTaskRequest) (*scheduler.SchedulerTask, error)
	ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error)
	UpdateTaskDetail(context.Context, *UpdateTaskDetailRequest) (*UpdateTaskDetailResponse, error)
}

func _CreateTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTask(ctx, req.(*scheduler.SchedulerTask))
	}
}

func _DelTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DelTask(ctx, req.(*DelTaskRequest))
	}
}

func _GetTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTask(ctx, req.(*GetTaskRequest))
	}
}

func _ListTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListTask(ctx, req.(*ListTaskRequest))
	}
}

func _UpdateTaskDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateTaskDetail(ctx, req.(*UpdateTaskDetailRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateTaskMethodDesc, _CreateTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_DelTaskMethodDesc, _DelTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetTaskMethodDesc, _GetTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListTaskMethodDesc, _ListTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateTaskDetailMethodDesc, _UpdateTaskDetailEndpoint(srv))
}

// Method Description
var _CreateTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.scheduler.task.CreateTask",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "CreateTask",
	RequestType:  (*scheduler.SchedulerTask)(nil),
	ResponseType: (*CreateTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/scheduler/task",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _DelTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.scheduler.task.DelTask",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "DelTask",
	RequestType:  (*DelTaskRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/scheduler/task/:taskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.scheduler.task.GetTask",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "GetTask",
	RequestType:  (*GetTaskRequest)(nil),
	ResponseType: (*scheduler.SchedulerTask)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/scheduler/task/:taskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.scheduler.task.ListTask",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "ListTask",
	RequestType:  (*ListTaskRequest)(nil),
	ResponseType: (*ListTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/scheduler/task",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _UpdateTaskDetailMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.scheduler.task.UpdateTaskDetail",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "UpdateTaskDetail",
	RequestType:  (*UpdateTaskDetailRequest)(nil),
	ResponseType: (*UpdateTaskDetailResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/scheduler/task/:taskId",
		},
		Body:         "",
		ResponseBody: "",
	},
}
