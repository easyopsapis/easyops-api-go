// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package instance

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for instance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	PostSearch(ctx context.Context, in *PostSearchRequest) (*PostSearchResponse, error)
	GetSearch(ctx context.Context, in *GetSearchRequest) (*GetSearchResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) PostSearch(ctx context.Context, in *PostSearchRequest) (*PostSearchResponse, error) {
	out := new(PostSearchResponse)
	err := c.c.Invoke(ctx, _PostSearchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetSearch(ctx context.Context, in *GetSearchRequest) (*GetSearchResponse, error) {
	out := new(GetSearchResponse)
	err := c.c.Invoke(ctx, _GetSearchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for instance service.
type Service interface {
	PostSearch(context.Context, *PostSearchRequest) (*PostSearchResponse, error)
	GetSearch(context.Context, *GetSearchRequest) (*GetSearchResponse, error)
}

func _PostSearchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.PostSearch(ctx, req.(*PostSearchRequest))
	}
}

func _GetSearchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSearch(ctx, req.(*GetSearchRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_PostSearchContract, _PostSearchEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetSearchContract, _GetSearchEndpoint(srv))
}

// API Contract
var _PostSearchContract = &postSearchContract{}

type postSearchContract struct{}

func (*postSearchContract) ServiceName() string          { return "instance.rpc" }
func (*postSearchContract) MethodName() string           { return "PostSearch" }
func (*postSearchContract) RequestMessage() interface{}  { return new(PostSearchRequest) }
func (*postSearchContract) ResponseMessage() interface{} { return new(PostSearchRequest) }
func (*postSearchContract) ContractName() string         { return "easyops.api.easy_flow.instance.PostSearch" }
func (*postSearchContract) ContractVersion() string      { return "1.0" }
func (*postSearchContract) Pattern() (string, string)    { return "GET", "/instance/search" }
func (*postSearchContract) Body() string                 { return "" }

var _GetSearchContract = &getSearchContract{}

type getSearchContract struct{}

func (*getSearchContract) ServiceName() string          { return "instance.rpc" }
func (*getSearchContract) MethodName() string           { return "GetSearch" }
func (*getSearchContract) RequestMessage() interface{}  { return new(GetSearchRequest) }
func (*getSearchContract) ResponseMessage() interface{} { return new(GetSearchRequest) }
func (*getSearchContract) ContractName() string         { return "easyops.api.easy_flow.instance.GetSearch" }
func (*getSearchContract) ContractVersion() string      { return "1.0" }
func (*getSearchContract) Pattern() (string, string)    { return "POST", "/instance/search" }
func (*getSearchContract) Body() string                 { return "" }
