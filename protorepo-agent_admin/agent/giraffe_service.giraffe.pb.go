// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package agent

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	agent_admin "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/agent_admin"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	GetAgent(ctx context.Context, in *GetAgentRequest) (*agent_admin.Agent, error)
	ListAgent(ctx context.Context, in *ListAgentRequest) (*ListAgentResponse, error)
	ListAgentPlugins(ctx context.Context, in *ListAgentPluginsRequest) (*ListAgentPluginsResponse, error)
	ListAgentPluginsV1(ctx context.Context, in *ListAgentPluginsV1Request) (*ListAgentPluginsV1Response, error)
	ListAgentStatusOld(ctx context.Context, in *ListAgentStatusOldRequest) (*ListAgentStatusOldResponse, error)
	UpsertAgentPlugins(ctx context.Context, in *UpsertAgentPluginsRequest) (*UpsertAgentPluginsResponse, error)
	UpsertAgentPluginsV1(ctx context.Context, in *UpsertAgentPluginsV1Request) (*UpsertAgentPluginsV1Response, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) GetAgent(ctx context.Context, in *GetAgentRequest) (*agent_admin.Agent, error) {
	out := new(agent_admin.Agent)
	err := c.c.Invoke(ctx, _GetAgentMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAgent(ctx context.Context, in *ListAgentRequest) (*ListAgentResponse, error) {
	out := new(ListAgentResponse)
	err := c.c.Invoke(ctx, _ListAgentMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAgentPlugins(ctx context.Context, in *ListAgentPluginsRequest) (*ListAgentPluginsResponse, error) {
	out := new(ListAgentPluginsResponse)
	err := c.c.Invoke(ctx, _ListAgentPluginsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAgentPluginsV1(ctx context.Context, in *ListAgentPluginsV1Request) (*ListAgentPluginsV1Response, error) {
	out := new(ListAgentPluginsV1Response)
	err := c.c.Invoke(ctx, _ListAgentPluginsV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAgentStatusOld(ctx context.Context, in *ListAgentStatusOldRequest) (*ListAgentStatusOldResponse, error) {
	out := new(ListAgentStatusOldResponse)
	err := c.c.Invoke(ctx, _ListAgentStatusOldMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpsertAgentPlugins(ctx context.Context, in *UpsertAgentPluginsRequest) (*UpsertAgentPluginsResponse, error) {
	out := new(UpsertAgentPluginsResponse)
	err := c.c.Invoke(ctx, _UpsertAgentPluginsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpsertAgentPluginsV1(ctx context.Context, in *UpsertAgentPluginsV1Request) (*UpsertAgentPluginsV1Response, error) {
	out := new(UpsertAgentPluginsV1Response)
	err := c.c.Invoke(ctx, _UpsertAgentPluginsV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for agent service.
type Service interface {
	GetAgent(context.Context, *GetAgentRequest) (*agent_admin.Agent, error)
	ListAgent(context.Context, *ListAgentRequest) (*ListAgentResponse, error)
	ListAgentPlugins(context.Context, *ListAgentPluginsRequest) (*ListAgentPluginsResponse, error)
	ListAgentPluginsV1(context.Context, *ListAgentPluginsV1Request) (*ListAgentPluginsV1Response, error)
	ListAgentStatusOld(context.Context, *ListAgentStatusOldRequest) (*ListAgentStatusOldResponse, error)
	UpsertAgentPlugins(context.Context, *UpsertAgentPluginsRequest) (*UpsertAgentPluginsResponse, error)
	UpsertAgentPluginsV1(context.Context, *UpsertAgentPluginsV1Request) (*UpsertAgentPluginsV1Response, error)
}

func _GetAgentEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetAgent(ctx, req.(*GetAgentRequest))
	}
}

func _ListAgentEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListAgent(ctx, req.(*ListAgentRequest))
	}
}

func _ListAgentPluginsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListAgentPlugins(ctx, req.(*ListAgentPluginsRequest))
	}
}

func _ListAgentPluginsV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListAgentPluginsV1(ctx, req.(*ListAgentPluginsV1Request))
	}
}

func _ListAgentStatusOldEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListAgentStatusOld(ctx, req.(*ListAgentStatusOldRequest))
	}
}

func _UpsertAgentPluginsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpsertAgentPlugins(ctx, req.(*UpsertAgentPluginsRequest))
	}
}

func _UpsertAgentPluginsV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpsertAgentPluginsV1(ctx, req.(*UpsertAgentPluginsV1Request))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_GetAgentMethodDesc, _GetAgentEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListAgentMethodDesc, _ListAgentEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListAgentPluginsMethodDesc, _ListAgentPluginsEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListAgentPluginsV1MethodDesc, _ListAgentPluginsV1Endpoint(srv))
	s.RegisterUnaryEndpoint(_ListAgentStatusOldMethodDesc, _ListAgentStatusOldEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpsertAgentPluginsMethodDesc, _UpsertAgentPluginsEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpsertAgentPluginsV1MethodDesc, _UpsertAgentPluginsV1Endpoint(srv))
}

// Method Description
var _GetAgentMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.agent.GetAgent",
		Version: "1.0",
	},
	ServiceName:  "agent.rpc",
	MethodName:   "GetAgent",
	RequestType:  (*GetAgentRequest)(nil),
	ResponseType: (*agent_admin.Agent)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListAgentMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.agent.ListAgent",
		Version: "1.0",
	},
	ServiceName:  "agent.rpc",
	MethodName:   "ListAgent",
	RequestType:  (*ListAgentRequest)(nil),
	ResponseType: (*ListAgentResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListAgentPluginsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.agent.ListAgentPlugins",
		Version: "1.0",
	},
	ServiceName:  "agent.rpc",
	MethodName:   "ListAgentPlugins",
	RequestType:  (*ListAgentPluginsRequest)(nil),
	ResponseType: (*ListAgentPluginsResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent/:id/plugins",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListAgentPluginsV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.agent.ListAgentPluginsV1",
		Version: "1.0",
	},
	ServiceName:  "agent.rpc",
	MethodName:   "ListAgentPluginsV1",
	RequestType:  (*ListAgentPluginsV1Request)(nil),
	ResponseType: (*ListAgentPluginsV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agents/:id/plugins",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListAgentStatusOldMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.agent.ListAgentStatusOld",
		Version: "1.0",
	},
	ServiceName:  "agent.rpc",
	MethodName:   "ListAgentStatusOld",
	RequestType:  (*ListAgentStatusOldRequest)(nil),
	ResponseType: (*ListAgentStatusOldResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent_status/status",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpsertAgentPluginsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.agent.UpsertAgentPlugins",
		Version: "1.0",
	},
	ServiceName:  "agent.rpc",
	MethodName:   "UpsertAgentPlugins",
	RequestType:  (*UpsertAgentPluginsRequest)(nil),
	ResponseType: (*UpsertAgentPluginsResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/agent/plugins",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpsertAgentPluginsV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.agent.UpsertAgentPluginsV1",
		Version: "1.0",
	},
	ServiceName:  "agent.rpc",
	MethodName:   "UpsertAgentPluginsV1",
	RequestType:  (*UpsertAgentPluginsV1Request)(nil),
	ResponseType: (*UpsertAgentPluginsV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/deploy-info",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
