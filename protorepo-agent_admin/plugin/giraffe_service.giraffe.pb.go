// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package plugin

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	agent_admin "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/agent_admin"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreatePlugin(ctx context.Context, in *CreatePluginRequest) (*CreatePluginResponse, error)
	CreatePluginV1(ctx context.Context, in *CreatePluginV1Request) (*CreatePluginV1Response, error)
	DeletePlugin(ctx context.Context, in *DeletePluginRequest) (*DeletePluginResponse, error)
	GetPlugin(ctx context.Context, in *GetPluginRequest) (*agent_admin.Plugin, error)
	GetPluginV1(ctx context.Context, in *GetPluginV1Request) (*GetPluginV1Response, error)
	ListPlugin(ctx context.Context, in *ListPluginRequest) (*ListPluginResponse, error)
	ListPluginAgents(ctx context.Context, in *ListPluginAgentsRequest) (*ListPluginAgentsResponse, error)
	ListPluginAgentsV1(ctx context.Context, in *ListPluginAgentsV1Request) (*ListPluginAgentsV1Response, error)
	ListPluginV1(ctx context.Context, in *ListPluginV1Request) (*ListPluginV1Response, error)
	UpdatePlugin(ctx context.Context, in *UpdatePluginRequest) (*UpdatePluginResponse, error)
	UpdatePluginV1(ctx context.Context, in *UpdatePluginV1Request) (*UpdatePluginV1Response, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreatePlugin(ctx context.Context, in *CreatePluginRequest) (*CreatePluginResponse, error) {
	out := new(CreatePluginResponse)
	err := c.c.Invoke(ctx, _CreatePluginMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreatePluginV1(ctx context.Context, in *CreatePluginV1Request) (*CreatePluginV1Response, error) {
	out := new(CreatePluginV1Response)
	err := c.c.Invoke(ctx, _CreatePluginV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePlugin(ctx context.Context, in *DeletePluginRequest) (*DeletePluginResponse, error) {
	out := new(DeletePluginResponse)
	err := c.c.Invoke(ctx, _DeletePluginMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPlugin(ctx context.Context, in *GetPluginRequest) (*agent_admin.Plugin, error) {
	out := new(agent_admin.Plugin)
	err := c.c.Invoke(ctx, _GetPluginMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPluginV1(ctx context.Context, in *GetPluginV1Request) (*GetPluginV1Response, error) {
	out := new(GetPluginV1Response)
	err := c.c.Invoke(ctx, _GetPluginV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPlugin(ctx context.Context, in *ListPluginRequest) (*ListPluginResponse, error) {
	out := new(ListPluginResponse)
	err := c.c.Invoke(ctx, _ListPluginMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPluginAgents(ctx context.Context, in *ListPluginAgentsRequest) (*ListPluginAgentsResponse, error) {
	out := new(ListPluginAgentsResponse)
	err := c.c.Invoke(ctx, _ListPluginAgentsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPluginAgentsV1(ctx context.Context, in *ListPluginAgentsV1Request) (*ListPluginAgentsV1Response, error) {
	out := new(ListPluginAgentsV1Response)
	err := c.c.Invoke(ctx, _ListPluginAgentsV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPluginV1(ctx context.Context, in *ListPluginV1Request) (*ListPluginV1Response, error) {
	out := new(ListPluginV1Response)
	err := c.c.Invoke(ctx, _ListPluginV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePlugin(ctx context.Context, in *UpdatePluginRequest) (*UpdatePluginResponse, error) {
	out := new(UpdatePluginResponse)
	err := c.c.Invoke(ctx, _UpdatePluginMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePluginV1(ctx context.Context, in *UpdatePluginV1Request) (*UpdatePluginV1Response, error) {
	out := new(UpdatePluginV1Response)
	err := c.c.Invoke(ctx, _UpdatePluginV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for plugin service.
type Service interface {
	CreatePlugin(context.Context, *CreatePluginRequest) (*CreatePluginResponse, error)
	CreatePluginV1(context.Context, *CreatePluginV1Request) (*CreatePluginV1Response, error)
	DeletePlugin(context.Context, *DeletePluginRequest) (*DeletePluginResponse, error)
	GetPlugin(context.Context, *GetPluginRequest) (*agent_admin.Plugin, error)
	GetPluginV1(context.Context, *GetPluginV1Request) (*GetPluginV1Response, error)
	ListPlugin(context.Context, *ListPluginRequest) (*ListPluginResponse, error)
	ListPluginAgents(context.Context, *ListPluginAgentsRequest) (*ListPluginAgentsResponse, error)
	ListPluginAgentsV1(context.Context, *ListPluginAgentsV1Request) (*ListPluginAgentsV1Response, error)
	ListPluginV1(context.Context, *ListPluginV1Request) (*ListPluginV1Response, error)
	UpdatePlugin(context.Context, *UpdatePluginRequest) (*UpdatePluginResponse, error)
	UpdatePluginV1(context.Context, *UpdatePluginV1Request) (*UpdatePluginV1Response, error)
}

func _CreatePluginEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreatePlugin(ctx, req.(*CreatePluginRequest))
	}
}

func _CreatePluginV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreatePluginV1(ctx, req.(*CreatePluginV1Request))
	}
}

func _DeletePluginEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeletePlugin(ctx, req.(*DeletePluginRequest))
	}
}

func _GetPluginEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPlugin(ctx, req.(*GetPluginRequest))
	}
}

func _GetPluginV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPluginV1(ctx, req.(*GetPluginV1Request))
	}
}

func _ListPluginEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListPlugin(ctx, req.(*ListPluginRequest))
	}
}

func _ListPluginAgentsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListPluginAgents(ctx, req.(*ListPluginAgentsRequest))
	}
}

func _ListPluginAgentsV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListPluginAgentsV1(ctx, req.(*ListPluginAgentsV1Request))
	}
}

func _ListPluginV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListPluginV1(ctx, req.(*ListPluginV1Request))
	}
}

func _UpdatePluginEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePlugin(ctx, req.(*UpdatePluginRequest))
	}
}

func _UpdatePluginV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePluginV1(ctx, req.(*UpdatePluginV1Request))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreatePluginMethodDesc, _CreatePluginEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreatePluginV1MethodDesc, _CreatePluginV1Endpoint(srv))
	s.RegisterUnaryEndpoint(_DeletePluginMethodDesc, _DeletePluginEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPluginMethodDesc, _GetPluginEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPluginV1MethodDesc, _GetPluginV1Endpoint(srv))
	s.RegisterUnaryEndpoint(_ListPluginMethodDesc, _ListPluginEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListPluginAgentsMethodDesc, _ListPluginAgentsEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListPluginAgentsV1MethodDesc, _ListPluginAgentsV1Endpoint(srv))
	s.RegisterUnaryEndpoint(_ListPluginV1MethodDesc, _ListPluginV1Endpoint(srv))
	s.RegisterUnaryEndpoint(_UpdatePluginMethodDesc, _UpdatePluginEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdatePluginV1MethodDesc, _UpdatePluginV1Endpoint(srv))
}

// Method Description
var _CreatePluginMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.CreatePlugin",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "CreatePlugin",
	RequestType:  (*CreatePluginRequest)(nil),
	ResponseType: (*CreatePluginResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/plugin",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreatePluginV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.CreatePluginV1",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "CreatePluginV1",
	RequestType:  (*CreatePluginV1Request)(nil),
	ResponseType: (*CreatePluginV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/agent-plugins",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeletePluginMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.DeletePlugin",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "DeletePlugin",
	RequestType:  (*DeletePluginRequest)(nil),
	ResponseType: (*DeletePluginResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/plugin/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetPluginMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.GetPlugin",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "GetPlugin",
	RequestType:  (*GetPluginRequest)(nil),
	ResponseType: (*agent_admin.Plugin)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/plugin/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetPluginV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.GetPluginV1",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "GetPluginV1",
	RequestType:  (*GetPluginV1Request)(nil),
	ResponseType: (*GetPluginV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent-plugins/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListPluginMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.ListPlugin",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "ListPlugin",
	RequestType:  (*ListPluginRequest)(nil),
	ResponseType: (*ListPluginResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/plugin",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListPluginAgentsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.ListPluginAgents",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "ListPluginAgents",
	RequestType:  (*ListPluginAgentsRequest)(nil),
	ResponseType: (*ListPluginAgentsResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/plugin/:id/agents",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListPluginAgentsV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.ListPluginAgentsV1",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "ListPluginAgentsV1",
	RequestType:  (*ListPluginAgentsV1Request)(nil),
	ResponseType: (*ListPluginAgentsV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent-plugins/:id/agents",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListPluginV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.ListPluginV1",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "ListPluginV1",
	RequestType:  (*ListPluginV1Request)(nil),
	ResponseType: (*ListPluginV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent-plugins",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdatePluginMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.UpdatePlugin",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "UpdatePlugin",
	RequestType:  (*UpdatePluginRequest)(nil),
	ResponseType: (*UpdatePluginResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/plugin/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdatePluginV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin.UpdatePluginV1",
		Version: "1.0",
	},
	ServiceName:  "plugin.rpc",
	MethodName:   "UpdatePluginV1",
	RequestType:  (*UpdatePluginV1Request)(nil),
	ResponseType: (*UpdatePluginV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/agent-plugins/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
