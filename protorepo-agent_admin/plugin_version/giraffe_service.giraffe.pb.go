// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package plugin_version

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	agent_admin "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/agent_admin"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for plugin_version service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreatePluginVersion(ctx context.Context, in *CreatePluginVersionRequest) (*CreatePluginVersionResponse, error)
	CreatePluginVersionV1(ctx context.Context, in *CreatePluginVersionV1Request) (*CreatePluginVersionV1Response, error)
	DeletePluginVersion(ctx context.Context, in *DeletePluginVersionRequest) (*DeletePluginVersionResponse, error)
	GetPluginVersion(ctx context.Context, in *GetPluginVersionRequest) (*agent_admin.PluginVersion, error)
	GetPluginVersionV1(ctx context.Context, in *GetPluginVersionV1Request) (*GetPluginVersionV1Response, error)
	ListPluginVersion(ctx context.Context, in *ListPluginVersionRequest) (*ListPluginVersionResponse, error)
	ListPluginVersionV1(ctx context.Context, in *ListPluginVersionV1Request) (*ListPluginVersionV1Response, error)
	UpdatePluginVersion(ctx context.Context, in *UpdatePluginVersionRequest) (*UpdatePluginVersionResponse, error)
	UpdatePluginVersionV1(ctx context.Context, in *UpdatePluginVersionV1Request) (*UpdatePluginVersionV1Response, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreatePluginVersion(ctx context.Context, in *CreatePluginVersionRequest) (*CreatePluginVersionResponse, error) {
	out := new(CreatePluginVersionResponse)
	err := c.c.Invoke(ctx, _CreatePluginVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreatePluginVersionV1(ctx context.Context, in *CreatePluginVersionV1Request) (*CreatePluginVersionV1Response, error) {
	out := new(CreatePluginVersionV1Response)
	err := c.c.Invoke(ctx, _CreatePluginVersionV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePluginVersion(ctx context.Context, in *DeletePluginVersionRequest) (*DeletePluginVersionResponse, error) {
	out := new(DeletePluginVersionResponse)
	err := c.c.Invoke(ctx, _DeletePluginVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPluginVersion(ctx context.Context, in *GetPluginVersionRequest) (*agent_admin.PluginVersion, error) {
	out := new(agent_admin.PluginVersion)
	err := c.c.Invoke(ctx, _GetPluginVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPluginVersionV1(ctx context.Context, in *GetPluginVersionV1Request) (*GetPluginVersionV1Response, error) {
	out := new(GetPluginVersionV1Response)
	err := c.c.Invoke(ctx, _GetPluginVersionV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPluginVersion(ctx context.Context, in *ListPluginVersionRequest) (*ListPluginVersionResponse, error) {
	out := new(ListPluginVersionResponse)
	err := c.c.Invoke(ctx, _ListPluginVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPluginVersionV1(ctx context.Context, in *ListPluginVersionV1Request) (*ListPluginVersionV1Response, error) {
	out := new(ListPluginVersionV1Response)
	err := c.c.Invoke(ctx, _ListPluginVersionV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePluginVersion(ctx context.Context, in *UpdatePluginVersionRequest) (*UpdatePluginVersionResponse, error) {
	out := new(UpdatePluginVersionResponse)
	err := c.c.Invoke(ctx, _UpdatePluginVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePluginVersionV1(ctx context.Context, in *UpdatePluginVersionV1Request) (*UpdatePluginVersionV1Response, error) {
	out := new(UpdatePluginVersionV1Response)
	err := c.c.Invoke(ctx, _UpdatePluginVersionV1MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for plugin_version service.
type Service interface {
	CreatePluginVersion(context.Context, *CreatePluginVersionRequest) (*CreatePluginVersionResponse, error)
	CreatePluginVersionV1(context.Context, *CreatePluginVersionV1Request) (*CreatePluginVersionV1Response, error)
	DeletePluginVersion(context.Context, *DeletePluginVersionRequest) (*DeletePluginVersionResponse, error)
	GetPluginVersion(context.Context, *GetPluginVersionRequest) (*agent_admin.PluginVersion, error)
	GetPluginVersionV1(context.Context, *GetPluginVersionV1Request) (*GetPluginVersionV1Response, error)
	ListPluginVersion(context.Context, *ListPluginVersionRequest) (*ListPluginVersionResponse, error)
	ListPluginVersionV1(context.Context, *ListPluginVersionV1Request) (*ListPluginVersionV1Response, error)
	UpdatePluginVersion(context.Context, *UpdatePluginVersionRequest) (*UpdatePluginVersionResponse, error)
	UpdatePluginVersionV1(context.Context, *UpdatePluginVersionV1Request) (*UpdatePluginVersionV1Response, error)
}

func _CreatePluginVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreatePluginVersion(ctx, req.(*CreatePluginVersionRequest))
	}
}

func _CreatePluginVersionV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreatePluginVersionV1(ctx, req.(*CreatePluginVersionV1Request))
	}
}

func _DeletePluginVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeletePluginVersion(ctx, req.(*DeletePluginVersionRequest))
	}
}

func _GetPluginVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPluginVersion(ctx, req.(*GetPluginVersionRequest))
	}
}

func _GetPluginVersionV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPluginVersionV1(ctx, req.(*GetPluginVersionV1Request))
	}
}

func _ListPluginVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListPluginVersion(ctx, req.(*ListPluginVersionRequest))
	}
}

func _ListPluginVersionV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListPluginVersionV1(ctx, req.(*ListPluginVersionV1Request))
	}
}

func _UpdatePluginVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePluginVersion(ctx, req.(*UpdatePluginVersionRequest))
	}
}

func _UpdatePluginVersionV1Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePluginVersionV1(ctx, req.(*UpdatePluginVersionV1Request))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreatePluginVersionMethodDesc, _CreatePluginVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreatePluginVersionV1MethodDesc, _CreatePluginVersionV1Endpoint(srv))
	s.RegisterUnaryEndpoint(_DeletePluginVersionMethodDesc, _DeletePluginVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPluginVersionMethodDesc, _GetPluginVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPluginVersionV1MethodDesc, _GetPluginVersionV1Endpoint(srv))
	s.RegisterUnaryEndpoint(_ListPluginVersionMethodDesc, _ListPluginVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListPluginVersionV1MethodDesc, _ListPluginVersionV1Endpoint(srv))
	s.RegisterUnaryEndpoint(_UpdatePluginVersionMethodDesc, _UpdatePluginVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdatePluginVersionV1MethodDesc, _UpdatePluginVersionV1Endpoint(srv))
}

// Method Description
var _CreatePluginVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.CreatePluginVersion",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "CreatePluginVersion",
	RequestType:  (*CreatePluginVersionRequest)(nil),
	ResponseType: (*CreatePluginVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/plugin/:id/version",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreatePluginVersionV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.CreatePluginVersionV1",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "CreatePluginVersionV1",
	RequestType:  (*CreatePluginVersionV1Request)(nil),
	ResponseType: (*CreatePluginVersionV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/agent-plugins/:id/versions",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeletePluginVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.DeletePluginVersion",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "DeletePluginVersion",
	RequestType:  (*DeletePluginVersionRequest)(nil),
	ResponseType: (*DeletePluginVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/plugin/:id/version/:verId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetPluginVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.GetPluginVersion",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "GetPluginVersion",
	RequestType:  (*GetPluginVersionRequest)(nil),
	ResponseType: (*agent_admin.PluginVersion)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/plugin/:id/version/:verId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetPluginVersionV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.GetPluginVersionV1",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "GetPluginVersionV1",
	RequestType:  (*GetPluginVersionV1Request)(nil),
	ResponseType: (*GetPluginVersionV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent-plugins/:id/versions/:verId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListPluginVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.ListPluginVersion",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "ListPluginVersion",
	RequestType:  (*ListPluginVersionRequest)(nil),
	ResponseType: (*ListPluginVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/plugin/:id/version",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListPluginVersionV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.ListPluginVersionV1",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "ListPluginVersionV1",
	RequestType:  (*ListPluginVersionV1Request)(nil),
	ResponseType: (*ListPluginVersionV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/agent-plugins/:id/versions",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdatePluginVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.UpdatePluginVersion",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "UpdatePluginVersion",
	RequestType:  (*UpdatePluginVersionRequest)(nil),
	ResponseType: (*UpdatePluginVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/plugin/:id/version/:verId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdatePluginVersionV1MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.agent_admin.plugin_version.UpdatePluginVersionV1",
		Version: "1.0",
	},
	ServiceName:  "plugin_version.rpc",
	MethodName:   "UpdatePluginVersionV1",
	RequestType:  (*UpdatePluginVersionV1Request)(nil),
	ResponseType: (*UpdatePluginVersionV1Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/agent-plugins/:id/versions/:verId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
