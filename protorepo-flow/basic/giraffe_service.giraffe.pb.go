// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package basic

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	flow "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/flow"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for basic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	UpdateBatchPermission(ctx context.Context, in *UpdateBatchPermissionRequest) (*types.Struct, error)
	CreateFlow(ctx context.Context, in *flow.Flow) (*flow.Flow, error)
	DeleteFlow(ctx context.Context, in *DeleteFlowRequest) (*DeleteFlowResponse, error)
	GetFlowInfo(ctx context.Context, in *GetFlowInfoRequest) (*flow.Flow, error)
	GetFlowCategories(ctx context.Context, in *types.Empty) (*GetFlowCategoriesResponse, error)
	GetVersionList(ctx context.Context, in *GetVersionListRequest) (*GetVersionListResponse, error)
	GetFlowList(ctx context.Context, in *GetFlowListRequest) (*GetFlowListResponse, error)
	UpdateFlow(ctx context.Context, in *flow.Flow) (*flow.Flow, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) UpdateBatchPermission(ctx context.Context, in *UpdateBatchPermissionRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _UpdateBatchPermissionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateFlow(ctx context.Context, in *flow.Flow) (*flow.Flow, error) {
	out := new(flow.Flow)
	err := c.c.Invoke(ctx, _CreateFlowMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteFlow(ctx context.Context, in *DeleteFlowRequest) (*DeleteFlowResponse, error) {
	out := new(DeleteFlowResponse)
	err := c.c.Invoke(ctx, _DeleteFlowMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFlowInfo(ctx context.Context, in *GetFlowInfoRequest) (*flow.Flow, error) {
	out := new(flow.Flow)
	err := c.c.Invoke(ctx, _GetFlowInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFlowCategories(ctx context.Context, in *types.Empty) (*GetFlowCategoriesResponse, error) {
	out := new(GetFlowCategoriesResponse)
	err := c.c.Invoke(ctx, _GetFlowCategoriesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetVersionList(ctx context.Context, in *GetVersionListRequest) (*GetVersionListResponse, error) {
	out := new(GetVersionListResponse)
	err := c.c.Invoke(ctx, _GetVersionListMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFlowList(ctx context.Context, in *GetFlowListRequest) (*GetFlowListResponse, error) {
	out := new(GetFlowListResponse)
	err := c.c.Invoke(ctx, _GetFlowListMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateFlow(ctx context.Context, in *flow.Flow) (*flow.Flow, error) {
	out := new(flow.Flow)
	err := c.c.Invoke(ctx, _UpdateFlowMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for basic service.
type Service interface {
	UpdateBatchPermission(context.Context, *UpdateBatchPermissionRequest) (*types.Struct, error)
	CreateFlow(context.Context, *flow.Flow) (*flow.Flow, error)
	DeleteFlow(context.Context, *DeleteFlowRequest) (*DeleteFlowResponse, error)
	GetFlowInfo(context.Context, *GetFlowInfoRequest) (*flow.Flow, error)
	GetFlowCategories(context.Context, *types.Empty) (*GetFlowCategoriesResponse, error)
	GetVersionList(context.Context, *GetVersionListRequest) (*GetVersionListResponse, error)
	GetFlowList(context.Context, *GetFlowListRequest) (*GetFlowListResponse, error)
	UpdateFlow(context.Context, *flow.Flow) (*flow.Flow, error)
}

func _UpdateBatchPermissionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateBatchPermission(ctx, req.(*UpdateBatchPermissionRequest))
	}
}

func _CreateFlowEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateFlow(ctx, req.(*flow.Flow))
	}
}

func _DeleteFlowEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteFlow(ctx, req.(*DeleteFlowRequest))
	}
}

func _GetFlowInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFlowInfo(ctx, req.(*GetFlowInfoRequest))
	}
}

func _GetFlowCategoriesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFlowCategories(ctx, req.(*types.Empty))
	}
}

func _GetVersionListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetVersionList(ctx, req.(*GetVersionListRequest))
	}
}

func _GetFlowListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFlowList(ctx, req.(*GetFlowListRequest))
	}
}

func _UpdateFlowEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateFlow(ctx, req.(*flow.Flow))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_UpdateBatchPermissionMethodDesc, _UpdateBatchPermissionEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateFlowMethodDesc, _CreateFlowEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteFlowMethodDesc, _DeleteFlowEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFlowInfoMethodDesc, _GetFlowInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFlowCategoriesMethodDesc, _GetFlowCategoriesEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetVersionListMethodDesc, _GetVersionListEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFlowListMethodDesc, _GetFlowListEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateFlowMethodDesc, _UpdateFlowEndpoint(srv))
}

// Method Description
var _UpdateBatchPermissionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.flow.basic.UpdateBatchPermission",
		Version: "1.0",
	},
	ServiceName:  "basic.rpc",
	MethodName:   "UpdateBatchPermission",
	RequestType:  (*UpdateBatchPermissionRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/flows/batch/permission",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateFlowMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.flow.basic.CreateFlow",
		Version: "1.0",
	},
	ServiceName:  "basic.rpc",
	MethodName:   "CreateFlow",
	RequestType:  (*flow.Flow)(nil),
	ResponseType: (*flow.Flow)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/flows",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteFlowMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.flow.basic.DeleteFlow",
		Version: "1.0",
	},
	ServiceName:  "basic.rpc",
	MethodName:   "DeleteFlow",
	RequestType:  (*DeleteFlowRequest)(nil),
	ResponseType: (*DeleteFlowResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/flows/:flowId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetFlowInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.flow.basic.GetFlowInfo",
		Version: "1.0",
	},
	ServiceName:  "basic.rpc",
	MethodName:   "GetFlowInfo",
	RequestType:  (*GetFlowInfoRequest)(nil),
	ResponseType: (*flow.Flow)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/flows/:flowId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetFlowCategoriesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.flow.basic.GetFlowCategories",
		Version: "1.0",
	},
	ServiceName:  "basic.rpc",
	MethodName:   "GetFlowCategories",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*GetFlowCategoriesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/flow_categories",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _GetVersionListMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.flow.basic.GetVersionList",
		Version: "1.0",
	},
	ServiceName:  "basic.rpc",
	MethodName:   "GetVersionList",
	RequestType:  (*GetVersionListRequest)(nil),
	ResponseType: (*GetVersionListResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/flows/:flowId/versions",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetFlowListMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.flow.basic.GetFlowList",
		Version: "1.0",
	},
	ServiceName:  "basic.rpc",
	MethodName:   "GetFlowList",
	RequestType:  (*GetFlowListRequest)(nil),
	ResponseType: (*GetFlowListResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/flows",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateFlowMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.flow.basic.UpdateFlow",
		Version: "1.0",
	},
	ServiceName:  "basic.rpc",
	MethodName:   "UpdateFlow",
	RequestType:  (*flow.Flow)(nil),
	ResponseType: (*flow.Flow)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/flows/:flowId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
