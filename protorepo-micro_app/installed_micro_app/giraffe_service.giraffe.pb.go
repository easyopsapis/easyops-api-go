// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package installed_micro_app

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	micro_app "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/micro_app"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for installed_micro_app service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Create(ctx context.Context, in *CreateRequest) (*CreateResponse, error)
	DeleteMicroApp(ctx context.Context, in *DeleteMicroAppRequest) (*types.Empty, error)
	GetInstalledMicroApp(ctx context.Context, in *GetInstalledMicroAppRequest) (*GetInstalledMicroAppResponse, error)
	ListMicroApp(ctx context.Context, in *ListMicroAppRequest) (*ListMicroAppResponse, error)
	SearchInstalledMicroApp(ctx context.Context, in *SearchInstalledMicroAppRequest) (*SearchInstalledMicroAppResponse, error)
	SearchInstalledMicroAppWithUniqKey(ctx context.Context, in *SearchInstalledMicroAppWithUniqKeyRequest) (*SearchInstalledMicroAppWithUniqKeyResponse, error)
	UpdateInstalledMicroApp(ctx context.Context, in *UpdateInstalledMicroAppRequest) (*UpdateInstalledMicroAppResponse, error)
	UpdateInstalledMicroAppStatus(ctx context.Context, in *UpdateInstalledMicroAppStatusRequest) (*micro_app.InstalledMicroApp, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Create(ctx context.Context, in *CreateRequest) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.c.Invoke(ctx, _CreateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteMicroApp(ctx context.Context, in *DeleteMicroAppRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteMicroAppMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetInstalledMicroApp(ctx context.Context, in *GetInstalledMicroAppRequest) (*GetInstalledMicroAppResponse, error) {
	out := new(GetInstalledMicroAppResponse)
	err := c.c.Invoke(ctx, _GetInstalledMicroAppMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMicroApp(ctx context.Context, in *ListMicroAppRequest) (*ListMicroAppResponse, error) {
	out := new(ListMicroAppResponse)
	err := c.c.Invoke(ctx, _ListMicroAppMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchInstalledMicroApp(ctx context.Context, in *SearchInstalledMicroAppRequest) (*SearchInstalledMicroAppResponse, error) {
	out := new(SearchInstalledMicroAppResponse)
	err := c.c.Invoke(ctx, _SearchInstalledMicroAppMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchInstalledMicroAppWithUniqKey(ctx context.Context, in *SearchInstalledMicroAppWithUniqKeyRequest) (*SearchInstalledMicroAppWithUniqKeyResponse, error) {
	out := new(SearchInstalledMicroAppWithUniqKeyResponse)
	err := c.c.Invoke(ctx, _SearchInstalledMicroAppWithUniqKeyMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateInstalledMicroApp(ctx context.Context, in *UpdateInstalledMicroAppRequest) (*UpdateInstalledMicroAppResponse, error) {
	out := new(UpdateInstalledMicroAppResponse)
	err := c.c.Invoke(ctx, _UpdateInstalledMicroAppMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateInstalledMicroAppStatus(ctx context.Context, in *UpdateInstalledMicroAppStatusRequest) (*micro_app.InstalledMicroApp, error) {
	out := new(micro_app.InstalledMicroApp)
	err := c.c.Invoke(ctx, _UpdateInstalledMicroAppStatusMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for installed_micro_app service.
type Service interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	DeleteMicroApp(context.Context, *DeleteMicroAppRequest) (*types.Empty, error)
	GetInstalledMicroApp(context.Context, *GetInstalledMicroAppRequest) (*GetInstalledMicroAppResponse, error)
	ListMicroApp(context.Context, *ListMicroAppRequest) (*ListMicroAppResponse, error)
	SearchInstalledMicroApp(context.Context, *SearchInstalledMicroAppRequest) (*SearchInstalledMicroAppResponse, error)
	SearchInstalledMicroAppWithUniqKey(context.Context, *SearchInstalledMicroAppWithUniqKeyRequest) (*SearchInstalledMicroAppWithUniqKeyResponse, error)
	UpdateInstalledMicroApp(context.Context, *UpdateInstalledMicroAppRequest) (*UpdateInstalledMicroAppResponse, error)
	UpdateInstalledMicroAppStatus(context.Context, *UpdateInstalledMicroAppStatusRequest) (*micro_app.InstalledMicroApp, error)
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*CreateRequest))
	}
}

func _DeleteMicroAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteMicroApp(ctx, req.(*DeleteMicroAppRequest))
	}
}

func _GetInstalledMicroAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetInstalledMicroApp(ctx, req.(*GetInstalledMicroAppRequest))
	}
}

func _ListMicroAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListMicroApp(ctx, req.(*ListMicroAppRequest))
	}
}

func _SearchInstalledMicroAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SearchInstalledMicroApp(ctx, req.(*SearchInstalledMicroAppRequest))
	}
}

func _SearchInstalledMicroAppWithUniqKeyEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SearchInstalledMicroAppWithUniqKey(ctx, req.(*SearchInstalledMicroAppWithUniqKeyRequest))
	}
}

func _UpdateInstalledMicroAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateInstalledMicroApp(ctx, req.(*UpdateInstalledMicroAppRequest))
	}
}

func _UpdateInstalledMicroAppStatusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateInstalledMicroAppStatus(ctx, req.(*UpdateInstalledMicroAppStatusRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateMethodDesc, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteMicroAppMethodDesc, _DeleteMicroAppEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetInstalledMicroAppMethodDesc, _GetInstalledMicroAppEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListMicroAppMethodDesc, _ListMicroAppEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchInstalledMicroAppMethodDesc, _SearchInstalledMicroAppEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchInstalledMicroAppWithUniqKeyMethodDesc, _SearchInstalledMicroAppWithUniqKeyEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateInstalledMicroAppMethodDesc, _UpdateInstalledMicroAppEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateInstalledMicroAppStatusMethodDesc, _UpdateInstalledMicroAppStatusEndpoint(srv))
}

// Method Description
var _CreateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.micro_app.installed_micro_app.Create",
		Version: "1.0",
	},
	ServiceName:  "installed_micro_app.rpc",
	MethodName:   "Create",
	RequestType:  (*CreateRequest)(nil),
	ResponseType: (*CreateResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/micro_app/v1/installed_micro_app",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteMicroAppMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.micro_app.installed_micro_app.DeleteMicroApp",
		Version: "1.0",
	},
	ServiceName:  "installed_micro_app.rpc",
	MethodName:   "DeleteMicroApp",
	RequestType:  (*DeleteMicroAppRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/micro_app/v1/installed_micro_app/:app_id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetInstalledMicroAppMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.micro_app.installed_micro_app.GetInstalledMicroApp",
		Version: "1.0",
	},
	ServiceName:  "installed_micro_app.rpc",
	MethodName:   "GetInstalledMicroApp",
	RequestType:  (*GetInstalledMicroAppRequest)(nil),
	ResponseType: (*GetInstalledMicroAppResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/micro_app/v1/installed_micro_app/:app_id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListMicroAppMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.micro_app.installed_micro_app.ListMicroApp",
		Version: "1.0",
	},
	ServiceName:  "installed_micro_app.rpc",
	MethodName:   "ListMicroApp",
	RequestType:  (*ListMicroAppRequest)(nil),
	ResponseType: (*ListMicroAppResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/micro_app/v1/installed_micro_app",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _SearchInstalledMicroAppMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.micro_app.installed_micro_app.SearchInstalledMicroApp",
		Version: "1.0",
	},
	ServiceName:  "installed_micro_app.rpc",
	MethodName:   "SearchInstalledMicroApp",
	RequestType:  (*SearchInstalledMicroAppRequest)(nil),
	ResponseType: (*SearchInstalledMicroAppResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/micro_app/v1/installed_micro_app/search",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _SearchInstalledMicroAppWithUniqKeyMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.micro_app.installed_micro_app.SearchInstalledMicroAppWithUniqKey",
		Version: "1.0",
	},
	ServiceName:  "installed_micro_app.rpc",
	MethodName:   "SearchInstalledMicroAppWithUniqKey",
	RequestType:  (*SearchInstalledMicroAppWithUniqKeyRequest)(nil),
	ResponseType: (*SearchInstalledMicroAppWithUniqKeyResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/micro_app/v1/installed_micro_app/search/uniq_key",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateInstalledMicroAppMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.micro_app.installed_micro_app.UpdateInstalledMicroApp",
		Version: "1.0",
	},
	ServiceName:  "installed_micro_app.rpc",
	MethodName:   "UpdateInstalledMicroApp",
	RequestType:  (*UpdateInstalledMicroAppRequest)(nil),
	ResponseType: (*UpdateInstalledMicroAppResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/micro_app/v1/installed_micro_app/:app_id",
		},
		Body:         "micro_app",
		ResponseBody: "data",
	},
}

var _UpdateInstalledMicroAppStatusMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.micro_app.installed_micro_app.UpdateInstalledMicroAppStatus",
		Version: "1.0",
	},
	ServiceName:  "installed_micro_app.rpc",
	MethodName:   "UpdateInstalledMicroAppStatus",
	RequestType:  (*UpdateInstalledMicroAppStatusRequest)(nil),
	ResponseType: (*micro_app.InstalledMicroApp)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/micro_app/v1/installed_micro_app/:app_id/status",
		},
		Body:         "micro_app",
		ResponseBody: "data",
	},
}
