// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package custom_sender

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	msgsender "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/msgsender"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for custom_sender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	SendMessage(ctx context.Context, in *msgsender.SendMessageRequest) (*msgsender.SendMessageResponse, error)
	SendMessageForAlert(ctx context.Context, in *msgsender.SendMessageForAlertRequest) (*msgsender.SendMessageResponse, error)
	SendMessageWithAppendix(ctx context.Context, in *msgsender.SendMessageWithAppendixRequest) (*msgsender.SendMessageResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) SendMessage(ctx context.Context, in *msgsender.SendMessageRequest) (*msgsender.SendMessageResponse, error) {
	out := new(msgsender.SendMessageResponse)
	err := c.c.Invoke(ctx, _SendMessageContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SendMessageForAlert(ctx context.Context, in *msgsender.SendMessageForAlertRequest) (*msgsender.SendMessageResponse, error) {
	out := new(msgsender.SendMessageResponse)
	err := c.c.Invoke(ctx, _SendMessageForAlertContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SendMessageWithAppendix(ctx context.Context, in *msgsender.SendMessageWithAppendixRequest) (*msgsender.SendMessageResponse, error) {
	out := new(msgsender.SendMessageResponse)
	err := c.c.Invoke(ctx, _SendMessageWithAppendixContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for custom_sender service.
type Service interface {
	SendMessage(context.Context, *msgsender.SendMessageRequest) (*msgsender.SendMessageResponse, error)
	SendMessageForAlert(context.Context, *msgsender.SendMessageForAlertRequest) (*msgsender.SendMessageResponse, error)
	SendMessageWithAppendix(context.Context, *msgsender.SendMessageWithAppendixRequest) (*msgsender.SendMessageResponse, error)
}

func _SendMessageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendMessage(ctx, req.(*msgsender.SendMessageRequest))
	}
}

func _SendMessageForAlertEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendMessageForAlert(ctx, req.(*msgsender.SendMessageForAlertRequest))
	}
}

func _SendMessageWithAppendixEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendMessageWithAppendix(ctx, req.(*msgsender.SendMessageWithAppendixRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_SendMessageContract, _SendMessageEndpoint(srv))
	s.RegisterUnaryEndpoint(_SendMessageForAlertContract, _SendMessageForAlertEndpoint(srv))
	s.RegisterUnaryEndpoint(_SendMessageWithAppendixContract, _SendMessageWithAppendixEndpoint(srv))
}

// API Contract
var _SendMessageContract = &sendMessageContract{}

type sendMessageContract struct{}

func (*sendMessageContract) ServiceName() string          { return "custom_sender.rpc" }
func (*sendMessageContract) MethodName() string           { return "SendMessage" }
func (*sendMessageContract) RequestMessage() interface{}  { return new(msgsender.SendMessageRequest) }
func (*sendMessageContract) ResponseMessage() interface{} { return new(msgsender.SendMessageRequest) }
func (*sendMessageContract) ContractName() string {
	return "easyops.api.msgsender.custom_sender.SendMessage"
}
func (*sendMessageContract) ContractVersion() string { return "1.0" }
func (*sendMessageContract) Pattern() (string, string) {
	return "POST", "/api/v1/message_sender/send_message"
}
func (*sendMessageContract) Body() string { return "" }

var _SendMessageForAlertContract = &sendMessageForAlertContract{}

type sendMessageForAlertContract struct{}

func (*sendMessageForAlertContract) ServiceName() string { return "custom_sender.rpc" }
func (*sendMessageForAlertContract) MethodName() string  { return "SendMessageForAlert" }
func (*sendMessageForAlertContract) RequestMessage() interface{} {
	return new(msgsender.SendMessageForAlertRequest)
}
func (*sendMessageForAlertContract) ResponseMessage() interface{} {
	return new(msgsender.SendMessageForAlertRequest)
}
func (*sendMessageForAlertContract) ContractName() string {
	return "easyops.api.msgsender.custom_sender.SendMessageForAlert"
}
func (*sendMessageForAlertContract) ContractVersion() string { return "1.0" }
func (*sendMessageForAlertContract) Pattern() (string, string) {
	return "POST", "/api/v1/alert_adapter/receive"
}
func (*sendMessageForAlertContract) Body() string { return "" }

var _SendMessageWithAppendixContract = &sendMessageWithAppendixContract{}

type sendMessageWithAppendixContract struct{}

func (*sendMessageWithAppendixContract) ServiceName() string { return "custom_sender.rpc" }
func (*sendMessageWithAppendixContract) MethodName() string  { return "SendMessageWithAppendix" }
func (*sendMessageWithAppendixContract) RequestMessage() interface{} {
	return new(msgsender.SendMessageWithAppendixRequest)
}
func (*sendMessageWithAppendixContract) ResponseMessage() interface{} {
	return new(msgsender.SendMessageWithAppendixRequest)
}
func (*sendMessageWithAppendixContract) ContractName() string {
	return "easyops.api.msgsender.custom_sender.SendMessageWithAppendix"
}
func (*sendMessageWithAppendixContract) ContractVersion() string { return "1.0" }
func (*sendMessageWithAppendixContract) Pattern() (string, string) {
	return "POST", "/api/v1/message_sender/mail_with_appendix"
}
func (*sendMessageWithAppendixContract) Body() string { return "" }
