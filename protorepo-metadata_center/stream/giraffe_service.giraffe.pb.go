// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package stream

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	ListAlertStates(ctx context.Context, in *types.Empty) (*ListAlertStatesResponse, error)
	ListMetricStates(ctx context.Context, in *types.Empty) (*ListMetricStatesResponse, error)
	ListMetricsStates(ctx context.Context, in *types.Empty) (*ListMetricsStatesResponse, error)
	ListTranslateStates(ctx context.Context, in *types.Empty) (*ListTranslateStatesResponse, error)
	ReplaceAlertStates(ctx context.Context, in *types.Empty) (*ReplaceAlertStatesResponse, error)
	ReplaceMetricStates(ctx context.Context, in *types.Empty) (*ReplaceMetricStatesResponse, error)
	ReplaceMetricsStates(ctx context.Context, in *types.Empty) (*ReplaceMetricsStatesResponse, error)
	ReplaceTranslateStates(ctx context.Context, in *types.Empty) (*ReplaceTranslateStatesResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) ListAlertStates(ctx context.Context, in *types.Empty) (*ListAlertStatesResponse, error) {
	out := new(ListAlertStatesResponse)
	err := c.c.Invoke(ctx, _ListAlertStatesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMetricStates(ctx context.Context, in *types.Empty) (*ListMetricStatesResponse, error) {
	out := new(ListMetricStatesResponse)
	err := c.c.Invoke(ctx, _ListMetricStatesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMetricsStates(ctx context.Context, in *types.Empty) (*ListMetricsStatesResponse, error) {
	out := new(ListMetricsStatesResponse)
	err := c.c.Invoke(ctx, _ListMetricsStatesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTranslateStates(ctx context.Context, in *types.Empty) (*ListTranslateStatesResponse, error) {
	out := new(ListTranslateStatesResponse)
	err := c.c.Invoke(ctx, _ListTranslateStatesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ReplaceAlertStates(ctx context.Context, in *types.Empty) (*ReplaceAlertStatesResponse, error) {
	out := new(ReplaceAlertStatesResponse)
	err := c.c.Invoke(ctx, _ReplaceAlertStatesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ReplaceMetricStates(ctx context.Context, in *types.Empty) (*ReplaceMetricStatesResponse, error) {
	out := new(ReplaceMetricStatesResponse)
	err := c.c.Invoke(ctx, _ReplaceMetricStatesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ReplaceMetricsStates(ctx context.Context, in *types.Empty) (*ReplaceMetricsStatesResponse, error) {
	out := new(ReplaceMetricsStatesResponse)
	err := c.c.Invoke(ctx, _ReplaceMetricsStatesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ReplaceTranslateStates(ctx context.Context, in *types.Empty) (*ReplaceTranslateStatesResponse, error) {
	out := new(ReplaceTranslateStatesResponse)
	err := c.c.Invoke(ctx, _ReplaceTranslateStatesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for stream service.
type Service interface {
	ListAlertStates(context.Context, *types.Empty) (*ListAlertStatesResponse, error)
	ListMetricStates(context.Context, *types.Empty) (*ListMetricStatesResponse, error)
	ListMetricsStates(context.Context, *types.Empty) (*ListMetricsStatesResponse, error)
	ListTranslateStates(context.Context, *types.Empty) (*ListTranslateStatesResponse, error)
	ReplaceAlertStates(context.Context, *types.Empty) (*ReplaceAlertStatesResponse, error)
	ReplaceMetricStates(context.Context, *types.Empty) (*ReplaceMetricStatesResponse, error)
	ReplaceMetricsStates(context.Context, *types.Empty) (*ReplaceMetricsStatesResponse, error)
	ReplaceTranslateStates(context.Context, *types.Empty) (*ReplaceTranslateStatesResponse, error)
}

func _ListAlertStatesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListAlertStates(ctx, req.(*types.Empty))
	}
}

func _ListMetricStatesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListMetricStates(ctx, req.(*types.Empty))
	}
}

func _ListMetricsStatesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListMetricsStates(ctx, req.(*types.Empty))
	}
}

func _ListTranslateStatesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListTranslateStates(ctx, req.(*types.Empty))
	}
}

func _ReplaceAlertStatesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ReplaceAlertStates(ctx, req.(*types.Empty))
	}
}

func _ReplaceMetricStatesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ReplaceMetricStates(ctx, req.(*types.Empty))
	}
}

func _ReplaceMetricsStatesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ReplaceMetricsStates(ctx, req.(*types.Empty))
	}
}

func _ReplaceTranslateStatesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ReplaceTranslateStates(ctx, req.(*types.Empty))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_ListAlertStatesMethodDesc, _ListAlertStatesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListMetricStatesMethodDesc, _ListMetricStatesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListMetricsStatesMethodDesc, _ListMetricsStatesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListTranslateStatesMethodDesc, _ListTranslateStatesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ReplaceAlertStatesMethodDesc, _ReplaceAlertStatesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ReplaceMetricStatesMethodDesc, _ReplaceMetricStatesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ReplaceMetricsStatesMethodDesc, _ReplaceMetricsStatesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ReplaceTranslateStatesMethodDesc, _ReplaceTranslateStatesEndpoint(srv))
}

// Method Description
var _ListAlertStatesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.metadata_center.stream.ListAlertStates",
		Version: "1.0",
	},
	ServiceName:  "stream.rpc",
	MethodName:   "ListAlertStates",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ListAlertStatesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/stream/alert/states/",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListMetricStatesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.metadata_center.stream.ListMetricStates",
		Version: "1.0",
	},
	ServiceName:  "stream.rpc",
	MethodName:   "ListMetricStates",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ListMetricStatesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/stream/metric/states/",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListMetricsStatesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.metadata_center.stream.ListMetricsStates",
		Version: "1.0",
	},
	ServiceName:  "stream.rpc",
	MethodName:   "ListMetricsStates",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ListMetricsStatesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/stream/metrics/states/",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListTranslateStatesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.metadata_center.stream.ListTranslateStates",
		Version: "1.0",
	},
	ServiceName:  "stream.rpc",
	MethodName:   "ListTranslateStates",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ListTranslateStatesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/stream/translate/states/",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ReplaceAlertStatesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.metadata_center.stream.ReplaceAlertStates",
		Version: "1.0",
	},
	ServiceName:  "stream.rpc",
	MethodName:   "ReplaceAlertStates",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ReplaceAlertStatesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/stream/alert/states/",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ReplaceMetricStatesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.metadata_center.stream.ReplaceMetricStates",
		Version: "1.0",
	},
	ServiceName:  "stream.rpc",
	MethodName:   "ReplaceMetricStates",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ReplaceMetricStatesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/stream/metric/states/",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ReplaceMetricsStatesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.metadata_center.stream.ReplaceMetricsStates",
		Version: "1.0",
	},
	ServiceName:  "stream.rpc",
	MethodName:   "ReplaceMetricsStates",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ReplaceMetricsStatesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/stream/metrics/states/",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ReplaceTranslateStatesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.metadata_center.stream.ReplaceTranslateStates",
		Version: "1.0",
	},
	ServiceName:  "stream.rpc",
	MethodName:   "ReplaceTranslateStates",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ReplaceTranslateStatesResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/stream/translate/states/",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
