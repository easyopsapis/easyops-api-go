// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package mongo

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for mongo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Insert(ctx context.Context, in *InsertRequest) (*types.Empty, error)
	Remove(ctx context.Context, in *RemoveRequest) (*types.Empty, error)
	RemoveAll(ctx context.Context, in *RemoveAllRequest) (*RemoveAllResponse, error)
	Search(ctx context.Context, in *SearchRequest) (*SearchResponse, error)
	SearchAll(ctx context.Context, in *SearchAllRequest) (*SearchAllResponse, error)
	SearchOne(ctx context.Context, in *SearchOneRequest) (*SearchOneResponse, error)
	Update(ctx context.Context, in *UpdateRequest) (*types.Empty, error)
	UpdateAll(ctx context.Context, in *UpdateAllRequest) (*UpdateAllResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Insert(ctx context.Context, in *InsertRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _InsertContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Remove(ctx context.Context, in *RemoveRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _RemoveContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RemoveAll(ctx context.Context, in *RemoveAllRequest) (*RemoveAllResponse, error) {
	out := new(RemoveAllResponse)
	err := c.c.Invoke(ctx, _RemoveAllContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Search(ctx context.Context, in *SearchRequest) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.c.Invoke(ctx, _SearchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchAll(ctx context.Context, in *SearchAllRequest) (*SearchAllResponse, error) {
	out := new(SearchAllResponse)
	err := c.c.Invoke(ctx, _SearchAllContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchOne(ctx context.Context, in *SearchOneRequest) (*SearchOneResponse, error) {
	out := new(SearchOneResponse)
	err := c.c.Invoke(ctx, _SearchOneContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Update(ctx context.Context, in *UpdateRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateAll(ctx context.Context, in *UpdateAllRequest) (*UpdateAllResponse, error) {
	out := new(UpdateAllResponse)
	err := c.c.Invoke(ctx, _UpdateAllContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for mongo service.
type Service interface {
	Insert(context.Context, *InsertRequest) (*types.Empty, error)
	Remove(context.Context, *RemoveRequest) (*types.Empty, error)
	RemoveAll(context.Context, *RemoveAllRequest) (*RemoveAllResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	SearchAll(context.Context, *SearchAllRequest) (*SearchAllResponse, error)
	SearchOne(context.Context, *SearchOneRequest) (*SearchOneResponse, error)
	Update(context.Context, *UpdateRequest) (*types.Empty, error)
	UpdateAll(context.Context, *UpdateAllRequest) (*UpdateAllResponse, error)
}

func _InsertEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Insert(ctx, req.(*InsertRequest))
	}
}

func _RemoveEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Remove(ctx, req.(*RemoveRequest))
	}
}

func _RemoveAllEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RemoveAll(ctx, req.(*RemoveAllRequest))
	}
}

func _SearchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Search(ctx, req.(*SearchRequest))
	}
}

func _SearchAllEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SearchAll(ctx, req.(*SearchAllRequest))
	}
}

func _SearchOneEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SearchOne(ctx, req.(*SearchOneRequest))
	}
}

func _UpdateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*UpdateRequest))
	}
}

func _UpdateAllEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateAll(ctx, req.(*UpdateAllRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_InsertContract, _InsertEndpoint(srv))
	s.RegisterUnaryEndpoint(_RemoveContract, _RemoveEndpoint(srv))
	s.RegisterUnaryEndpoint(_RemoveAllContract, _RemoveAllEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchContract, _SearchEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchAllContract, _SearchAllEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchOneContract, _SearchOneEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateContract, _UpdateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateAllContract, _UpdateAllEndpoint(srv))
}

// API Contract
var _InsertContract = &insertContract{}

type insertContract struct{}

func (*insertContract) ServiceName() string          { return "mongo.rpc" }
func (*insertContract) MethodName() string           { return "Insert" }
func (*insertContract) RequestMessage() interface{}  { return new(InsertRequest) }
func (*insertContract) ResponseMessage() interface{} { return new(InsertRequest) }
func (*insertContract) ContractName() string         { return "easyops.api.user_service.mongo.Insert" }
func (*insertContract) ContractVersion() string      { return "1.0" }
func (*insertContract) Pattern() (string, string) {
	return "POST", "/api/v1/mongo/:collection/documents/insert"
}
func (*insertContract) Body() string { return "" }

var _RemoveContract = &removeContract{}

type removeContract struct{}

func (*removeContract) ServiceName() string          { return "mongo.rpc" }
func (*removeContract) MethodName() string           { return "Remove" }
func (*removeContract) RequestMessage() interface{}  { return new(RemoveRequest) }
func (*removeContract) ResponseMessage() interface{} { return new(RemoveRequest) }
func (*removeContract) ContractName() string         { return "easyops.api.user_service.mongo.Remove" }
func (*removeContract) ContractVersion() string      { return "1.0" }
func (*removeContract) Pattern() (string, string) {
	return "POST", "/api/v1/mongo/:collection/documents/remove"
}
func (*removeContract) Body() string { return "" }

var _RemoveAllContract = &removeAllContract{}

type removeAllContract struct{}

func (*removeAllContract) ServiceName() string          { return "mongo.rpc" }
func (*removeAllContract) MethodName() string           { return "RemoveAll" }
func (*removeAllContract) RequestMessage() interface{}  { return new(RemoveAllRequest) }
func (*removeAllContract) ResponseMessage() interface{} { return new(RemoveAllRequest) }
func (*removeAllContract) ContractName() string         { return "easyops.api.user_service.mongo.RemoveAll" }
func (*removeAllContract) ContractVersion() string      { return "1.0" }
func (*removeAllContract) Pattern() (string, string) {
	return "POST", "/api/v1/mongo/:collection/documents/remove/all"
}
func (*removeAllContract) Body() string { return "" }

var _SearchContract = &searchContract{}

type searchContract struct{}

func (*searchContract) ServiceName() string          { return "mongo.rpc" }
func (*searchContract) MethodName() string           { return "Search" }
func (*searchContract) RequestMessage() interface{}  { return new(SearchRequest) }
func (*searchContract) ResponseMessage() interface{} { return new(SearchRequest) }
func (*searchContract) ContractName() string         { return "easyops.api.user_service.mongo.Search" }
func (*searchContract) ContractVersion() string      { return "1.0" }
func (*searchContract) Pattern() (string, string) {
	return "POST", "/api/v1/mongo/:collection/documents/search"
}
func (*searchContract) Body() string { return "" }

var _SearchAllContract = &searchAllContract{}

type searchAllContract struct{}

func (*searchAllContract) ServiceName() string          { return "mongo.rpc" }
func (*searchAllContract) MethodName() string           { return "SearchAll" }
func (*searchAllContract) RequestMessage() interface{}  { return new(SearchAllRequest) }
func (*searchAllContract) ResponseMessage() interface{} { return new(SearchAllRequest) }
func (*searchAllContract) ContractName() string         { return "easyops.api.user_service.mongo.SearchAll" }
func (*searchAllContract) ContractVersion() string      { return "1.0" }
func (*searchAllContract) Pattern() (string, string) {
	return "POST", "/api/v1/mongo/:collection/documents/search/all"
}
func (*searchAllContract) Body() string { return "" }

var _SearchOneContract = &searchOneContract{}

type searchOneContract struct{}

func (*searchOneContract) ServiceName() string          { return "mongo.rpc" }
func (*searchOneContract) MethodName() string           { return "SearchOne" }
func (*searchOneContract) RequestMessage() interface{}  { return new(SearchOneRequest) }
func (*searchOneContract) ResponseMessage() interface{} { return new(SearchOneRequest) }
func (*searchOneContract) ContractName() string         { return "easyops.api.user_service.mongo.SearchOne" }
func (*searchOneContract) ContractVersion() string      { return "1.0" }
func (*searchOneContract) Pattern() (string, string) {
	return "POST", "/api/v1/mongo/:collection/documents/search/one"
}
func (*searchOneContract) Body() string { return "" }

var _UpdateContract = &updateContract{}

type updateContract struct{}

func (*updateContract) ServiceName() string          { return "mongo.rpc" }
func (*updateContract) MethodName() string           { return "Update" }
func (*updateContract) RequestMessage() interface{}  { return new(UpdateRequest) }
func (*updateContract) ResponseMessage() interface{} { return new(UpdateRequest) }
func (*updateContract) ContractName() string         { return "easyops.api.user_service.mongo.Update" }
func (*updateContract) ContractVersion() string      { return "1.0" }
func (*updateContract) Pattern() (string, string) {
	return "POST", "/api/v1/mongo/:collection/documents/update"
}
func (*updateContract) Body() string { return "" }

var _UpdateAllContract = &updateAllContract{}

type updateAllContract struct{}

func (*updateAllContract) ServiceName() string          { return "mongo.rpc" }
func (*updateAllContract) MethodName() string           { return "UpdateAll" }
func (*updateAllContract) RequestMessage() interface{}  { return new(UpdateAllRequest) }
func (*updateAllContract) ResponseMessage() interface{} { return new(UpdateAllRequest) }
func (*updateAllContract) ContractName() string         { return "easyops.api.user_service.mongo.UpdateAll" }
func (*updateAllContract) ContractVersion() string      { return "1.0" }
func (*updateAllContract) Pattern() (string, string) {
	return "POST", "/api/v1/mongo/:collection/documents/update/all"
}
func (*updateAllContract) Body() string { return "" }
