// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package user_admin

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for user_admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	AlterPassword(ctx context.Context, in *AlterPasswordRequest) (*types.Empty, error)
	UserRegister(ctx context.Context, in *UserRegisterRequest) (*UserRegisterResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) AlterPassword(ctx context.Context, in *AlterPasswordRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _AlterPasswordContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UserRegister(ctx context.Context, in *UserRegisterRequest) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.c.Invoke(ctx, _UserRegisterContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for user_admin service.
type Service interface {
	AlterPassword(context.Context, *AlterPasswordRequest) (*types.Empty, error)
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
}

func _AlterPasswordEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AlterPassword(ctx, req.(*AlterPasswordRequest))
	}
}

func _UserRegisterEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UserRegister(ctx, req.(*UserRegisterRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_AlterPasswordContract, _AlterPasswordEndpoint(srv))
	s.RegisterUnaryEndpoint(_UserRegisterContract, _UserRegisterEndpoint(srv))
}

// API Contract
var _AlterPasswordContract = &alterPasswordContract{}

type alterPasswordContract struct{}

func (*alterPasswordContract) ServiceName() string          { return "user_admin.rpc" }
func (*alterPasswordContract) MethodName() string           { return "AlterPassword" }
func (*alterPasswordContract) RequestMessage() interface{}  { return new(AlterPasswordRequest) }
func (*alterPasswordContract) ResponseMessage() interface{} { return new(AlterPasswordRequest) }
func (*alterPasswordContract) ContractName() string {
	return "easyops.api.user_service.user_admin.AlterPassword"
}
func (*alterPasswordContract) ContractVersion() string { return "1.0" }
func (*alterPasswordContract) Pattern() (string, string) {
	return "POST", "/api/v1/users/alter_password"
}
func (*alterPasswordContract) Body() string { return "" }

var _UserRegisterContract = &userRegisterContract{}

type userRegisterContract struct{}

func (*userRegisterContract) ServiceName() string          { return "user_admin.rpc" }
func (*userRegisterContract) MethodName() string           { return "UserRegister" }
func (*userRegisterContract) RequestMessage() interface{}  { return new(UserRegisterRequest) }
func (*userRegisterContract) ResponseMessage() interface{} { return new(UserRegisterRequest) }
func (*userRegisterContract) ContractName() string {
	return "easyops.api.user_service.user_admin.UserRegister"
}
func (*userRegisterContract) ContractVersion() string   { return "1.0" }
func (*userRegisterContract) Pattern() (string, string) { return "POST", "/api/v1/users/register" }
func (*userRegisterContract) Body() string              { return "" }
