// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package user_admin

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for user_admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	AlterPassword(ctx context.Context, in *AlterPasswordRequest) (*types.Empty, error)
	AlterSelfPassword(ctx context.Context, in *AlterSelfPasswordRequest) (*types.Empty, error)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest) (*types.Empty, error)
	GetPasswordConfig(ctx context.Context, in *types.Empty) (*GetPasswordConfigResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest) (*types.Struct, error)
	ListGroupsIdName(ctx context.Context, in *ListGroupsIdNameRequest) (*types.Struct, error)
	ListUsersInfo(ctx context.Context, in *ListUsersInfoRequest) (*ListUsersInfoResponse, error)
	ListUsersIdNick(ctx context.Context, in *ListUsersIdNickRequest) (*types.Struct, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest) (*types.Empty, error)
	SearchAllUsersInfo(ctx context.Context, in *SearchAllUsersInfoRequest) (*SearchAllUsersInfoResponse, error)
	UserDelete(ctx context.Context, in *UserDeleteRequest) (*types.Empty, error)
	GetUserLoginInfo(ctx context.Context, in *GetUserLoginInfoRequest) (*GetUserLoginInfoResponse, error)
	UserRegister(ctx context.Context, in *UserRegisterRequest) (*UserRegisterResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) AlterPassword(ctx context.Context, in *AlterPasswordRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _AlterPasswordMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) AlterSelfPassword(ctx context.Context, in *AlterSelfPasswordRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _AlterSelfPasswordMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ForgotPasswordMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPasswordConfig(ctx context.Context, in *types.Empty) (*GetPasswordConfigResponse, error) {
	out := new(GetPasswordConfigResponse)
	err := c.c.Invoke(ctx, _GetPasswordConfigMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetUserInfo(ctx context.Context, in *GetUserInfoRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _GetUserInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListGroupsIdName(ctx context.Context, in *ListGroupsIdNameRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _ListGroupsIdNameMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListUsersInfo(ctx context.Context, in *ListUsersInfoRequest) (*ListUsersInfoResponse, error) {
	out := new(ListUsersInfoResponse)
	err := c.c.Invoke(ctx, _ListUsersInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListUsersIdNick(ctx context.Context, in *ListUsersIdNickRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _ListUsersIdNickMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ResetPassword(ctx context.Context, in *ResetPasswordRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ResetPasswordMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchAllUsersInfo(ctx context.Context, in *SearchAllUsersInfoRequest) (*SearchAllUsersInfoResponse, error) {
	out := new(SearchAllUsersInfoResponse)
	err := c.c.Invoke(ctx, _SearchAllUsersInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UserDelete(ctx context.Context, in *UserDeleteRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UserDeleteMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetUserLoginInfo(ctx context.Context, in *GetUserLoginInfoRequest) (*GetUserLoginInfoResponse, error) {
	out := new(GetUserLoginInfoResponse)
	err := c.c.Invoke(ctx, _GetUserLoginInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UserRegister(ctx context.Context, in *UserRegisterRequest) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.c.Invoke(ctx, _UserRegisterMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for user_admin service.
type Service interface {
	AlterPassword(context.Context, *AlterPasswordRequest) (*types.Empty, error)
	AlterSelfPassword(context.Context, *AlterSelfPasswordRequest) (*types.Empty, error)
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*types.Empty, error)
	GetPasswordConfig(context.Context, *types.Empty) (*GetPasswordConfigResponse, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*types.Struct, error)
	ListGroupsIdName(context.Context, *ListGroupsIdNameRequest) (*types.Struct, error)
	ListUsersInfo(context.Context, *ListUsersInfoRequest) (*ListUsersInfoResponse, error)
	ListUsersIdNick(context.Context, *ListUsersIdNickRequest) (*types.Struct, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*types.Empty, error)
	SearchAllUsersInfo(context.Context, *SearchAllUsersInfoRequest) (*SearchAllUsersInfoResponse, error)
	UserDelete(context.Context, *UserDeleteRequest) (*types.Empty, error)
	GetUserLoginInfo(context.Context, *GetUserLoginInfoRequest) (*GetUserLoginInfoResponse, error)
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
}

func _AlterPasswordEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AlterPassword(ctx, req.(*AlterPasswordRequest))
	}
}

func _AlterSelfPasswordEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AlterSelfPassword(ctx, req.(*AlterSelfPasswordRequest))
	}
}

func _ForgotPasswordEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
}

func _GetPasswordConfigEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPasswordConfig(ctx, req.(*types.Empty))
	}
}

func _GetUserInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
}

func _ListGroupsIdNameEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListGroupsIdName(ctx, req.(*ListGroupsIdNameRequest))
	}
}

func _ListUsersInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListUsersInfo(ctx, req.(*ListUsersInfoRequest))
	}
}

func _ListUsersIdNickEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListUsersIdNick(ctx, req.(*ListUsersIdNickRequest))
	}
}

func _ResetPasswordEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
}

func _SearchAllUsersInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SearchAllUsersInfo(ctx, req.(*SearchAllUsersInfoRequest))
	}
}

func _UserDeleteEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UserDelete(ctx, req.(*UserDeleteRequest))
	}
}

func _GetUserLoginInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetUserLoginInfo(ctx, req.(*GetUserLoginInfoRequest))
	}
}

func _UserRegisterEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UserRegister(ctx, req.(*UserRegisterRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_AlterPasswordMethodDesc, _AlterPasswordEndpoint(srv))
	s.RegisterUnaryEndpoint(_AlterSelfPasswordMethodDesc, _AlterSelfPasswordEndpoint(srv))
	s.RegisterUnaryEndpoint(_ForgotPasswordMethodDesc, _ForgotPasswordEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPasswordConfigMethodDesc, _GetPasswordConfigEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetUserInfoMethodDesc, _GetUserInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListGroupsIdNameMethodDesc, _ListGroupsIdNameEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListUsersInfoMethodDesc, _ListUsersInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListUsersIdNickMethodDesc, _ListUsersIdNickEndpoint(srv))
	s.RegisterUnaryEndpoint(_ResetPasswordMethodDesc, _ResetPasswordEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchAllUsersInfoMethodDesc, _SearchAllUsersInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_UserDeleteMethodDesc, _UserDeleteEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetUserLoginInfoMethodDesc, _GetUserLoginInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_UserRegisterMethodDesc, _UserRegisterEndpoint(srv))
}

// Method Description
var _AlterPasswordMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.AlterPassword",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "AlterPassword",
	RequestType:  (*AlterPasswordRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/users/alter_password",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _AlterSelfPasswordMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.AlterSelfPassword",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "AlterSelfPassword",
	RequestType:  (*AlterSelfPasswordRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/users/password",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ForgotPasswordMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.ForgotPassword",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "ForgotPassword",
	RequestType:  (*ForgotPasswordRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/users/password/forgot",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetPasswordConfigMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.GetPasswordConfig",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "GetPasswordConfig",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*GetPasswordConfigResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/users/passconf",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetUserInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.GetUserInfo",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "GetUserInfo",
	RequestType:  (*GetUserInfoRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/users/detail/:username",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListGroupsIdNameMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.ListGroupsIdName",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "ListGroupsIdName",
	RequestType:  (*ListGroupsIdNameRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/groups/id_map_name",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListUsersInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.ListUsersInfo",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "ListUsersInfo",
	RequestType:  (*ListUsersInfoRequest)(nil),
	ResponseType: (*ListUsersInfoResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/users",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListUsersIdNickMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.ListUsersIdNick",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "ListUsersIdNick",
	RequestType:  (*ListUsersIdNickRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/users/id_map_nickname",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ResetPasswordMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.ResetPassword",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "ResetPassword",
	RequestType:  (*ResetPasswordRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/users/password/reset",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _SearchAllUsersInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.SearchAllUsersInfo",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "SearchAllUsersInfo",
	RequestType:  (*SearchAllUsersInfoRequest)(nil),
	ResponseType: (*SearchAllUsersInfoResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/users/all",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UserDeleteMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.UserDelete",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "UserDelete",
	RequestType:  (*UserDeleteRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/users/:username",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetUserLoginInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.GetUserLoginInfo",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "GetUserLoginInfo",
	RequestType:  (*GetUserLoginInfoRequest)(nil),
	ResponseType: (*GetUserLoginInfoResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/user/login_info",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UserRegisterMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.user_service.user_admin.UserRegister",
		Version: "1.0",
	},
	ServiceName:  "user_admin.rpc",
	MethodName:   "UserRegister",
	RequestType:  (*UserRegisterRequest)(nil),
	ResponseType: (*UserRegisterResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/users/register",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
