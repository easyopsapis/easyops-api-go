// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package backend

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	DeleteState(ctx context.Context, in *DeleteStateRequest) (*types.Empty, error)
	GetState(ctx context.Context, in *GetStateRequest) (*types.Struct, error)
	LockState(ctx context.Context, in *LockStateRequest) (*types.Empty, error)
	UnLockState(ctx context.Context, in *UnLockStateRequest) (*types.Empty, error)
	UpdateState(ctx context.Context, in *UpdateStateRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) DeleteState(ctx context.Context, in *DeleteStateRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteStateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetState(ctx context.Context, in *GetStateRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _GetStateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) LockState(ctx context.Context, in *LockStateRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _LockStateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UnLockState(ctx context.Context, in *UnLockStateRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UnLockStateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateState(ctx context.Context, in *UpdateStateRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateStateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for backend service.
type Service interface {
	DeleteState(context.Context, *DeleteStateRequest) (*types.Empty, error)
	GetState(context.Context, *GetStateRequest) (*types.Struct, error)
	LockState(context.Context, *LockStateRequest) (*types.Empty, error)
	UnLockState(context.Context, *UnLockStateRequest) (*types.Empty, error)
	UpdateState(context.Context, *UpdateStateRequest) (*types.Empty, error)
}

func _DeleteStateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteState(ctx, req.(*DeleteStateRequest))
	}
}

func _GetStateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetState(ctx, req.(*GetStateRequest))
	}
}

func _LockStateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.LockState(ctx, req.(*LockStateRequest))
	}
}

func _UnLockStateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UnLockState(ctx, req.(*UnLockStateRequest))
	}
}

func _UpdateStateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateState(ctx, req.(*UpdateStateRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_DeleteStateMethodDesc, _DeleteStateEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetStateMethodDesc, _GetStateEndpoint(srv))
	s.RegisterUnaryEndpoint(_LockStateMethodDesc, _LockStateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UnLockStateMethodDesc, _UnLockStateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateStateMethodDesc, _UpdateStateEndpoint(srv))
}

// Method Description
var _DeleteStateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.terraform.backend.DeleteState",
		Version: "1.0",
	},
	ServiceName:  "backend.rpc",
	MethodName:   "DeleteState",
	RequestType:  (*DeleteStateRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/terraform/v1/state/org/:org/tfId/:tfId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetStateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.terraform.backend.GetState",
		Version: "1.0",
	},
	ServiceName:  "backend.rpc",
	MethodName:   "GetState",
	RequestType:  (*GetStateRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/terraform/v1/state/org/:org/tfId/:tfId",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _LockStateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.terraform.backend.LockState",
		Version: "1.0",
	},
	ServiceName:  "backend.rpc",
	MethodName:   "LockState",
	RequestType:  (*LockStateRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/terraform/v1/state/org/:org/tfId/:tfId/lock",
		},
		Body:         "body",
		ResponseBody: "data",
	},
}

var _UnLockStateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.terraform.backend.UnLockState",
		Version: "1.0",
	},
	ServiceName:  "backend.rpc",
	MethodName:   "UnLockState",
	RequestType:  (*UnLockStateRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/terraform/v1/state/org/:org/tfId/:tfId/unlock",
		},
		Body:         "body",
		ResponseBody: "data",
	},
}

var _UpdateStateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.terraform.backend.UpdateState",
		Version: "1.0",
	},
	ServiceName:  "backend.rpc",
	MethodName:   "UpdateState",
	RequestType:  (*UpdateStateRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/terraform/v1/state/org/:org/tfId/:tfId",
		},
		Body:         "body",
		ResponseBody: "data",
	},
}
