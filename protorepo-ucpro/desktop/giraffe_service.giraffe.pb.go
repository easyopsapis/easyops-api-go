// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package desktop

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for desktop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest) (*GetTaskStatusResponse, error)
	InstallApp(ctx context.Context, in *InstallAppRequest) (*InstallAppResponse, error)
	UninstallApp(ctx context.Context, in *UninstallAppRequest) (*UninstallAppResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest) (*GetTaskStatusResponse, error) {
	out := new(GetTaskStatusResponse)
	err := c.c.Invoke(ctx, _GetTaskStatusContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InstallApp(ctx context.Context, in *InstallAppRequest) (*InstallAppResponse, error) {
	out := new(InstallAppResponse)
	err := c.c.Invoke(ctx, _InstallAppContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UninstallApp(ctx context.Context, in *UninstallAppRequest) (*UninstallAppResponse, error) {
	out := new(UninstallAppResponse)
	err := c.c.Invoke(ctx, _UninstallAppContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for desktop service.
type Service interface {
	GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error)
	InstallApp(context.Context, *InstallAppRequest) (*InstallAppResponse, error)
	UninstallApp(context.Context, *UninstallAppRequest) (*UninstallAppResponse, error)
}

func _GetTaskStatusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTaskStatus(ctx, req.(*GetTaskStatusRequest))
	}
}

func _InstallAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstallApp(ctx, req.(*InstallAppRequest))
	}
}

func _UninstallAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UninstallApp(ctx, req.(*UninstallAppRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_GetTaskStatusContract, _GetTaskStatusEndpoint(srv))
	s.RegisterUnaryEndpoint(_InstallAppContract, _InstallAppEndpoint(srv))
	s.RegisterUnaryEndpoint(_UninstallAppContract, _UninstallAppEndpoint(srv))
}

// API Contract
var _GetTaskStatusContract = &getTaskStatusContract{}

type getTaskStatusContract struct{}

func (*getTaskStatusContract) ServiceName() string          { return "desktop.rpc" }
func (*getTaskStatusContract) MethodName() string           { return "GetTaskStatus" }
func (*getTaskStatusContract) RequestMessage() interface{}  { return new(GetTaskStatusRequest) }
func (*getTaskStatusContract) ResponseMessage() interface{} { return new(GetTaskStatusRequest) }
func (*getTaskStatusContract) ContractName() string         { return "easyops.api.ucpro.desktop.GetTaskStatus" }
func (*getTaskStatusContract) ContractVersion() string      { return "1.0" }
func (*getTaskStatusContract) Pattern() (string, string)    { return "GET", "/api/v1/desktop/task/:taskId" }
func (*getTaskStatusContract) Body() string                 { return "" }

var _InstallAppContract = &installAppContract{}

type installAppContract struct{}

func (*installAppContract) ServiceName() string          { return "desktop.rpc" }
func (*installAppContract) MethodName() string           { return "InstallApp" }
func (*installAppContract) RequestMessage() interface{}  { return new(InstallAppRequest) }
func (*installAppContract) ResponseMessage() interface{} { return new(InstallAppRequest) }
func (*installAppContract) ContractName() string         { return "easyops.api.ucpro.desktop.InstallApp" }
func (*installAppContract) ContractVersion() string      { return "1.0" }
func (*installAppContract) Pattern() (string, string)    { return "POST", "/api/v1/desktop/install-app" }
func (*installAppContract) Body() string                 { return "" }

var _UninstallAppContract = &uninstallAppContract{}

type uninstallAppContract struct{}

func (*uninstallAppContract) ServiceName() string          { return "desktop.rpc" }
func (*uninstallAppContract) MethodName() string           { return "UninstallApp" }
func (*uninstallAppContract) RequestMessage() interface{}  { return new(UninstallAppRequest) }
func (*uninstallAppContract) ResponseMessage() interface{} { return new(UninstallAppRequest) }
func (*uninstallAppContract) ContractName() string         { return "easyops.api.ucpro.desktop.UninstallApp" }
func (*uninstallAppContract) ContractVersion() string      { return "1.0" }
func (*uninstallAppContract) Pattern() (string, string) {
	return "POST", "/api/v1/desktop/uninstall-app"
}
func (*uninstallAppContract) Body() string { return "" }
