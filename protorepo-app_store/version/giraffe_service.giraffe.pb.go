// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package version

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	app_store "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/app_store"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for version service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Create(ctx context.Context, in *app_store.AppVersion) (*app_store.AppVersion, error)
	DeleteAppVersion(ctx context.Context, in *DeleteAppVersionRequest) (*types.Empty, error)
	ListAppVersion(ctx context.Context, in *ListAppVersionRequest) (*ListAppVersionResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Create(ctx context.Context, in *app_store.AppVersion) (*app_store.AppVersion, error) {
	out := new(app_store.AppVersion)
	err := c.c.Invoke(ctx, _CreateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAppVersion(ctx context.Context, in *DeleteAppVersionRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteAppVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAppVersion(ctx context.Context, in *ListAppVersionRequest) (*ListAppVersionResponse, error) {
	out := new(ListAppVersionResponse)
	err := c.c.Invoke(ctx, _ListAppVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for version service.
type Service interface {
	Create(context.Context, *app_store.AppVersion) (*app_store.AppVersion, error)
	DeleteAppVersion(context.Context, *DeleteAppVersionRequest) (*types.Empty, error)
	ListAppVersion(context.Context, *ListAppVersionRequest) (*ListAppVersionResponse, error)
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*app_store.AppVersion))
	}
}

func _DeleteAppVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteAppVersion(ctx, req.(*DeleteAppVersionRequest))
	}
}

func _ListAppVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListAppVersion(ctx, req.(*ListAppVersionRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateMethodDesc, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteAppVersionMethodDesc, _DeleteAppVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListAppVersionMethodDesc, _ListAppVersionEndpoint(srv))
}

// Method Description
var _CreateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.app_store.version.Create",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "Create",
	RequestType:  (*app_store.AppVersion)(nil),
	ResponseType: (*app_store.AppVersion)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/app_store/v1/app_version",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteAppVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.app_store.version.DeleteAppVersion",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "DeleteAppVersion",
	RequestType:  (*DeleteAppVersionRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/app_store/v1/app_version/:versionId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListAppVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.app_store.version.ListAppVersion",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "ListAppVersion",
	RequestType:  (*ListAppVersionRequest)(nil),
	ResponseType: (*ListAppVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/app_store/v1/app_version/search",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
