// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package micro_app

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	app_store "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/app_store"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for micro_app service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Create(ctx context.Context, in *app_store.AppStoreMicroApp) (*app_store.AppStoreMicroApp, error)
	DeleteAppStoreMicroApp(ctx context.Context, in *DeleteAppStoreMicroAppRequest) (*types.Empty, error)
	GetAppStoreMicroApp(ctx context.Context, in *GetAppStoreMicroAppRequest) (*GetAppStoreMicroAppResponse, error)
	GetRelatedPackages(ctx context.Context, in *GetRelatedPackagesRequest) (*GetRelatedPackagesResponse, error)
	ListAppStoreMicroApp(ctx context.Context, in *ListAppStoreMicroAppRequest) (*ListAppStoreMicroAppResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Create(ctx context.Context, in *app_store.AppStoreMicroApp) (*app_store.AppStoreMicroApp, error) {
	out := new(app_store.AppStoreMicroApp)
	err := c.c.Invoke(ctx, _CreateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAppStoreMicroApp(ctx context.Context, in *DeleteAppStoreMicroAppRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteAppStoreMicroAppContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetAppStoreMicroApp(ctx context.Context, in *GetAppStoreMicroAppRequest) (*GetAppStoreMicroAppResponse, error) {
	out := new(GetAppStoreMicroAppResponse)
	err := c.c.Invoke(ctx, _GetAppStoreMicroAppContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetRelatedPackages(ctx context.Context, in *GetRelatedPackagesRequest) (*GetRelatedPackagesResponse, error) {
	out := new(GetRelatedPackagesResponse)
	err := c.c.Invoke(ctx, _GetRelatedPackagesContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAppStoreMicroApp(ctx context.Context, in *ListAppStoreMicroAppRequest) (*ListAppStoreMicroAppResponse, error) {
	out := new(ListAppStoreMicroAppResponse)
	err := c.c.Invoke(ctx, _ListAppStoreMicroAppContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for micro_app service.
type Service interface {
	Create(context.Context, *app_store.AppStoreMicroApp) (*app_store.AppStoreMicroApp, error)
	DeleteAppStoreMicroApp(context.Context, *DeleteAppStoreMicroAppRequest) (*types.Empty, error)
	GetAppStoreMicroApp(context.Context, *GetAppStoreMicroAppRequest) (*GetAppStoreMicroAppResponse, error)
	GetRelatedPackages(context.Context, *GetRelatedPackagesRequest) (*GetRelatedPackagesResponse, error)
	ListAppStoreMicroApp(context.Context, *ListAppStoreMicroAppRequest) (*ListAppStoreMicroAppResponse, error)
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*app_store.AppStoreMicroApp))
	}
}

func _DeleteAppStoreMicroAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteAppStoreMicroApp(ctx, req.(*DeleteAppStoreMicroAppRequest))
	}
}

func _GetAppStoreMicroAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetAppStoreMicroApp(ctx, req.(*GetAppStoreMicroAppRequest))
	}
}

func _GetRelatedPackagesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetRelatedPackages(ctx, req.(*GetRelatedPackagesRequest))
	}
}

func _ListAppStoreMicroAppEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListAppStoreMicroApp(ctx, req.(*ListAppStoreMicroAppRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateContract, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteAppStoreMicroAppContract, _DeleteAppStoreMicroAppEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetAppStoreMicroAppContract, _GetAppStoreMicroAppEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetRelatedPackagesContract, _GetRelatedPackagesEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListAppStoreMicroAppContract, _ListAppStoreMicroAppEndpoint(srv))
}

// API Contract
var _CreateContract = &createContract{}

type createContract struct{}

func (*createContract) ServiceName() string          { return "micro_app.rpc" }
func (*createContract) MethodName() string           { return "Create" }
func (*createContract) RequestMessage() interface{}  { return new(app_store.AppStoreMicroApp) }
func (*createContract) ResponseMessage() interface{} { return new(app_store.AppStoreMicroApp) }
func (*createContract) ContractName() string         { return "easyops.api.app_store.micro_app.Create" }
func (*createContract) ContractVersion() string      { return "1.0" }
func (*createContract) Pattern() (string, string)    { return "POST", "/api/app_store/v1/micro_app" }
func (*createContract) Body() string                 { return "" }

var _DeleteAppStoreMicroAppContract = &deleteAppStoreMicroAppContract{}

type deleteAppStoreMicroAppContract struct{}

func (*deleteAppStoreMicroAppContract) ServiceName() string { return "micro_app.rpc" }
func (*deleteAppStoreMicroAppContract) MethodName() string  { return "DeleteAppStoreMicroApp" }
func (*deleteAppStoreMicroAppContract) RequestMessage() interface{} {
	return new(DeleteAppStoreMicroAppRequest)
}
func (*deleteAppStoreMicroAppContract) ResponseMessage() interface{} {
	return new(DeleteAppStoreMicroAppRequest)
}
func (*deleteAppStoreMicroAppContract) ContractName() string {
	return "easyops.api.app_store.micro_app.DeleteAppStoreMicroApp"
}
func (*deleteAppStoreMicroAppContract) ContractVersion() string { return "1.0" }
func (*deleteAppStoreMicroAppContract) Pattern() (string, string) {
	return "DELETE", "/api/app_store/v1/micro_app/app_id/:app_id"
}
func (*deleteAppStoreMicroAppContract) Body() string { return "" }

var _GetAppStoreMicroAppContract = &getAppStoreMicroAppContract{}

type getAppStoreMicroAppContract struct{}

func (*getAppStoreMicroAppContract) ServiceName() string { return "micro_app.rpc" }
func (*getAppStoreMicroAppContract) MethodName() string  { return "GetAppStoreMicroApp" }
func (*getAppStoreMicroAppContract) RequestMessage() interface{} {
	return new(GetAppStoreMicroAppRequest)
}
func (*getAppStoreMicroAppContract) ResponseMessage() interface{} {
	return new(GetAppStoreMicroAppRequest)
}
func (*getAppStoreMicroAppContract) ContractName() string {
	return "easyops.api.app_store.micro_app.GetAppStoreMicroApp"
}
func (*getAppStoreMicroAppContract) ContractVersion() string { return "1.0" }
func (*getAppStoreMicroAppContract) Pattern() (string, string) {
	return "GET", "/api/app_store/v1/micro_app/app_id/:app_id"
}
func (*getAppStoreMicroAppContract) Body() string { return "" }

var _GetRelatedPackagesContract = &getRelatedPackagesContract{}

type getRelatedPackagesContract struct{}

func (*getRelatedPackagesContract) ServiceName() string         { return "micro_app.rpc" }
func (*getRelatedPackagesContract) MethodName() string          { return "GetRelatedPackages" }
func (*getRelatedPackagesContract) RequestMessage() interface{} { return new(GetRelatedPackagesRequest) }
func (*getRelatedPackagesContract) ResponseMessage() interface{} {
	return new(GetRelatedPackagesRequest)
}
func (*getRelatedPackagesContract) ContractName() string {
	return "easyops.api.app_store.micro_app.GetRelatedPackages"
}
func (*getRelatedPackagesContract) ContractVersion() string { return "1.0" }
func (*getRelatedPackagesContract) Pattern() (string, string) {
	return "GET", "/api/app_store/v1/related_packages/app_id/:app_id"
}
func (*getRelatedPackagesContract) Body() string { return "" }

var _ListAppStoreMicroAppContract = &listAppStoreMicroAppContract{}

type listAppStoreMicroAppContract struct{}

func (*listAppStoreMicroAppContract) ServiceName() string { return "micro_app.rpc" }
func (*listAppStoreMicroAppContract) MethodName() string  { return "ListAppStoreMicroApp" }
func (*listAppStoreMicroAppContract) RequestMessage() interface{} {
	return new(ListAppStoreMicroAppRequest)
}
func (*listAppStoreMicroAppContract) ResponseMessage() interface{} {
	return new(ListAppStoreMicroAppRequest)
}
func (*listAppStoreMicroAppContract) ContractName() string {
	return "easyops.api.app_store.micro_app.ListAppStoreMicroApp"
}
func (*listAppStoreMicroAppContract) ContractVersion() string { return "1.0" }
func (*listAppStoreMicroAppContract) Pattern() (string, string) {
	return "POST", "/api/app_store/v1/micro_app/search"
}
func (*listAppStoreMicroAppContract) Body() string { return "" }
