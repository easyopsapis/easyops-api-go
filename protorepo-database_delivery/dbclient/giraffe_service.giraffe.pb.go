// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package dbclient

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	database_delivery "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/database_delivery"
	easy_command "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/easy_command"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for dbclient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateClient(ctx context.Context, in *CreateClientRequest) (*database_delivery.DBClient, error)
	CreateClientCallback(ctx context.Context, in *easy_command.TaskDetail) (*CreateClientCallbackResponse, error)
	DeleteClient(ctx context.Context, in *DeleteClientRequest) (*types.Empty, error)
	ListClient(ctx context.Context, in *ListClientRequest) (*ListClientResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateClient(ctx context.Context, in *CreateClientRequest) (*database_delivery.DBClient, error) {
	out := new(database_delivery.DBClient)
	err := c.c.Invoke(ctx, _CreateClientMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateClientCallback(ctx context.Context, in *easy_command.TaskDetail) (*CreateClientCallbackResponse, error) {
	out := new(CreateClientCallbackResponse)
	err := c.c.Invoke(ctx, _CreateClientCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteClient(ctx context.Context, in *DeleteClientRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteClientMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListClient(ctx context.Context, in *ListClientRequest) (*ListClientResponse, error) {
	out := new(ListClientResponse)
	err := c.c.Invoke(ctx, _ListClientMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for dbclient service.
type Service interface {
	CreateClient(context.Context, *CreateClientRequest) (*database_delivery.DBClient, error)
	CreateClientCallback(context.Context, *easy_command.TaskDetail) (*CreateClientCallbackResponse, error)
	DeleteClient(context.Context, *DeleteClientRequest) (*types.Empty, error)
	ListClient(context.Context, *ListClientRequest) (*ListClientResponse, error)
}

func _CreateClientEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateClient(ctx, req.(*CreateClientRequest))
	}
}

func _CreateClientCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateClientCallback(ctx, req.(*easy_command.TaskDetail))
	}
}

func _DeleteClientEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteClient(ctx, req.(*DeleteClientRequest))
	}
}

func _ListClientEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListClient(ctx, req.(*ListClientRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateClientMethodDesc, _CreateClientEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateClientCallbackMethodDesc, _CreateClientCallbackEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteClientMethodDesc, _DeleteClientEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListClientMethodDesc, _ListClientEndpoint(srv))
}

// Method Description
var _CreateClientMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbclient.CreateClient",
		Version: "1.0",
	},
	ServiceName:  "dbclient.rpc",
	MethodName:   "CreateClient",
	RequestType:  (*CreateClientRequest)(nil),
	ResponseType: (*database_delivery.DBClient)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/client",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateClientCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbclient.CreateClientCallback",
		Version: "1.0",
	},
	ServiceName:  "dbclient.rpc",
	MethodName:   "CreateClientCallback",
	RequestType:  (*easy_command.TaskDetail)(nil),
	ResponseType: (*CreateClientCallbackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/client/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteClientMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbclient.DeleteClient",
		Version: "1.0",
	},
	ServiceName:  "dbclient.rpc",
	MethodName:   "DeleteClient",
	RequestType:  (*DeleteClientRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/client/:clientIp",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListClientMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbclient.ListClient",
		Version: "1.0",
	},
	ServiceName:  "dbclient.rpc",
	MethodName:   "ListClient",
	RequestType:  (*ListClientRequest)(nil),
	ResponseType: (*ListClientResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/client",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
