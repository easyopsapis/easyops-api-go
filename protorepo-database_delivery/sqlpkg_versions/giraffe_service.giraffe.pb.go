// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package sqlpkg_versions

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for sqlpkg_versions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateSQLPackageVersion(ctx context.Context, in *CreateSQLPackageVersionRequest) (*CreateSQLPackageVersionResponse, error)
	DeleteSQLPackageVersion(ctx context.Context, in *DeleteSQLPackageVersionRequest) (*types.Empty, error)
	GetSQLPackageVersion(ctx context.Context, in *GetSQLPackageVersionRequest) (*GetSQLPackageVersionResponse, error)
	ListSQLPackageVersion(ctx context.Context, in *ListSQLPackageVersionRequest) (*ListSQLPackageVersionResponse, error)
	UpdateSQLPackageVersion(ctx context.Context, in *UpdateSQLPackageVersionRequest) (*UpdateSQLPackageVersionResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateSQLPackageVersion(ctx context.Context, in *CreateSQLPackageVersionRequest) (*CreateSQLPackageVersionResponse, error) {
	out := new(CreateSQLPackageVersionResponse)
	err := c.c.Invoke(ctx, _CreateSQLPackageVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteSQLPackageVersion(ctx context.Context, in *DeleteSQLPackageVersionRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteSQLPackageVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetSQLPackageVersion(ctx context.Context, in *GetSQLPackageVersionRequest) (*GetSQLPackageVersionResponse, error) {
	out := new(GetSQLPackageVersionResponse)
	err := c.c.Invoke(ctx, _GetSQLPackageVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSQLPackageVersion(ctx context.Context, in *ListSQLPackageVersionRequest) (*ListSQLPackageVersionResponse, error) {
	out := new(ListSQLPackageVersionResponse)
	err := c.c.Invoke(ctx, _ListSQLPackageVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateSQLPackageVersion(ctx context.Context, in *UpdateSQLPackageVersionRequest) (*UpdateSQLPackageVersionResponse, error) {
	out := new(UpdateSQLPackageVersionResponse)
	err := c.c.Invoke(ctx, _UpdateSQLPackageVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for sqlpkg_versions service.
type Service interface {
	CreateSQLPackageVersion(context.Context, *CreateSQLPackageVersionRequest) (*CreateSQLPackageVersionResponse, error)
	DeleteSQLPackageVersion(context.Context, *DeleteSQLPackageVersionRequest) (*types.Empty, error)
	GetSQLPackageVersion(context.Context, *GetSQLPackageVersionRequest) (*GetSQLPackageVersionResponse, error)
	ListSQLPackageVersion(context.Context, *ListSQLPackageVersionRequest) (*ListSQLPackageVersionResponse, error)
	UpdateSQLPackageVersion(context.Context, *UpdateSQLPackageVersionRequest) (*UpdateSQLPackageVersionResponse, error)
}

func _CreateSQLPackageVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateSQLPackageVersion(ctx, req.(*CreateSQLPackageVersionRequest))
	}
}

func _DeleteSQLPackageVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteSQLPackageVersion(ctx, req.(*DeleteSQLPackageVersionRequest))
	}
}

func _GetSQLPackageVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSQLPackageVersion(ctx, req.(*GetSQLPackageVersionRequest))
	}
}

func _ListSQLPackageVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListSQLPackageVersion(ctx, req.(*ListSQLPackageVersionRequest))
	}
}

func _UpdateSQLPackageVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateSQLPackageVersion(ctx, req.(*UpdateSQLPackageVersionRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateSQLPackageVersionMethodDesc, _CreateSQLPackageVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteSQLPackageVersionMethodDesc, _DeleteSQLPackageVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetSQLPackageVersionMethodDesc, _GetSQLPackageVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListSQLPackageVersionMethodDesc, _ListSQLPackageVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateSQLPackageVersionMethodDesc, _UpdateSQLPackageVersionEndpoint(srv))
}

// Method Description
var _CreateSQLPackageVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkg_versions.CreateSQLPackageVersion",
		Version: "1.0",
	},
	ServiceName:  "sqlpkg_versions.rpc",
	MethodName:   "CreateSQLPackageVersion",
	RequestType:  (*CreateSQLPackageVersionRequest)(nil),
	ResponseType: (*CreateSQLPackageVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/sqlpkgs/:pkgId/versions",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteSQLPackageVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkg_versions.DeleteSQLPackageVersion",
		Version: "1.0",
	},
	ServiceName:  "sqlpkg_versions.rpc",
	MethodName:   "DeleteSQLPackageVersion",
	RequestType:  (*DeleteSQLPackageVersionRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/sqlpkgs/:pkgId/versions/:versionId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetSQLPackageVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkg_versions.GetSQLPackageVersion",
		Version: "1.0",
	},
	ServiceName:  "sqlpkg_versions.rpc",
	MethodName:   "GetSQLPackageVersion",
	RequestType:  (*GetSQLPackageVersionRequest)(nil),
	ResponseType: (*GetSQLPackageVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/sqlpkgs/:pkgId/versions/:versionId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListSQLPackageVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkg_versions.ListSQLPackageVersion",
		Version: "1.0",
	},
	ServiceName:  "sqlpkg_versions.rpc",
	MethodName:   "ListSQLPackageVersion",
	RequestType:  (*ListSQLPackageVersionRequest)(nil),
	ResponseType: (*ListSQLPackageVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/sqlpkgs/:pkgId/versions",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateSQLPackageVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkg_versions.UpdateSQLPackageVersion",
		Version: "1.0",
	},
	ServiceName:  "sqlpkg_versions.rpc",
	MethodName:   "UpdateSQLPackageVersion",
	RequestType:  (*UpdateSQLPackageVersionRequest)(nil),
	ResponseType: (*UpdateSQLPackageVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/sqlpkgs/:pkgId/versions/:versionId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
