// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package sqlpkgs

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for sqlpkgs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateSQLPackage(ctx context.Context, in *CreateSQLPackageRequest) (*CreateSQLPackageResponse, error)
	DeleteSQLPackage(ctx context.Context, in *DeleteSQLPackageRequest) (*types.Empty, error)
	GetSQLPackage(ctx context.Context, in *GetSQLPackageRequest) (*GetSQLPackageResponse, error)
	GetFolderName(ctx context.Context, in *types.Empty) (*GetFolderNameResponse, error)
	ListSQLPackage(ctx context.Context, in *ListSQLPackageRequest) (*ListSQLPackageResponse, error)
	UpdateSQLPackage(ctx context.Context, in *UpdateSQLPackageRequest) (*UpdateSQLPackageResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateSQLPackage(ctx context.Context, in *CreateSQLPackageRequest) (*CreateSQLPackageResponse, error) {
	out := new(CreateSQLPackageResponse)
	err := c.c.Invoke(ctx, _CreateSQLPackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteSQLPackage(ctx context.Context, in *DeleteSQLPackageRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteSQLPackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetSQLPackage(ctx context.Context, in *GetSQLPackageRequest) (*GetSQLPackageResponse, error) {
	out := new(GetSQLPackageResponse)
	err := c.c.Invoke(ctx, _GetSQLPackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetFolderName(ctx context.Context, in *types.Empty) (*GetFolderNameResponse, error) {
	out := new(GetFolderNameResponse)
	err := c.c.Invoke(ctx, _GetFolderNameMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSQLPackage(ctx context.Context, in *ListSQLPackageRequest) (*ListSQLPackageResponse, error) {
	out := new(ListSQLPackageResponse)
	err := c.c.Invoke(ctx, _ListSQLPackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateSQLPackage(ctx context.Context, in *UpdateSQLPackageRequest) (*UpdateSQLPackageResponse, error) {
	out := new(UpdateSQLPackageResponse)
	err := c.c.Invoke(ctx, _UpdateSQLPackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for sqlpkgs service.
type Service interface {
	CreateSQLPackage(context.Context, *CreateSQLPackageRequest) (*CreateSQLPackageResponse, error)
	DeleteSQLPackage(context.Context, *DeleteSQLPackageRequest) (*types.Empty, error)
	GetSQLPackage(context.Context, *GetSQLPackageRequest) (*GetSQLPackageResponse, error)
	GetFolderName(context.Context, *types.Empty) (*GetFolderNameResponse, error)
	ListSQLPackage(context.Context, *ListSQLPackageRequest) (*ListSQLPackageResponse, error)
	UpdateSQLPackage(context.Context, *UpdateSQLPackageRequest) (*UpdateSQLPackageResponse, error)
}

func _CreateSQLPackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateSQLPackage(ctx, req.(*CreateSQLPackageRequest))
	}
}

func _DeleteSQLPackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteSQLPackage(ctx, req.(*DeleteSQLPackageRequest))
	}
}

func _GetSQLPackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSQLPackage(ctx, req.(*GetSQLPackageRequest))
	}
}

func _GetFolderNameEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetFolderName(ctx, req.(*types.Empty))
	}
}

func _ListSQLPackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListSQLPackage(ctx, req.(*ListSQLPackageRequest))
	}
}

func _UpdateSQLPackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateSQLPackage(ctx, req.(*UpdateSQLPackageRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateSQLPackageMethodDesc, _CreateSQLPackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteSQLPackageMethodDesc, _DeleteSQLPackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetSQLPackageMethodDesc, _GetSQLPackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetFolderNameMethodDesc, _GetFolderNameEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListSQLPackageMethodDesc, _ListSQLPackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateSQLPackageMethodDesc, _UpdateSQLPackageEndpoint(srv))
}

// Method Description
var _CreateSQLPackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkgs.CreateSQLPackage",
		Version: "1.0",
	},
	ServiceName:  "sqlpkgs.rpc",
	MethodName:   "CreateSQLPackage",
	RequestType:  (*CreateSQLPackageRequest)(nil),
	ResponseType: (*CreateSQLPackageResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/sqlpkgs",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteSQLPackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkgs.DeleteSQLPackage",
		Version: "1.0",
	},
	ServiceName:  "sqlpkgs.rpc",
	MethodName:   "DeleteSQLPackage",
	RequestType:  (*DeleteSQLPackageRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/sqlpkgs/:pkgId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetSQLPackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkgs.GetSQLPackage",
		Version: "1.0",
	},
	ServiceName:  "sqlpkgs.rpc",
	MethodName:   "GetSQLPackage",
	RequestType:  (*GetSQLPackageRequest)(nil),
	ResponseType: (*GetSQLPackageResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/sqlpkgs/:pkgId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetFolderNameMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkgs.GetFolderName",
		Version: "1.0",
	},
	ServiceName:  "sqlpkgs.rpc",
	MethodName:   "GetFolderName",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*GetFolderNameResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/sql/foldername",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListSQLPackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkgs.ListSQLPackage",
		Version: "1.0",
	},
	ServiceName:  "sqlpkgs.rpc",
	MethodName:   "ListSQLPackage",
	RequestType:  (*ListSQLPackageRequest)(nil),
	ResponseType: (*ListSQLPackageResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/sqlpkgs",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateSQLPackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.sqlpkgs.UpdateSQLPackage",
		Version: "1.0",
	},
	ServiceName:  "sqlpkgs.rpc",
	MethodName:   "UpdateSQLPackage",
	RequestType:  (*UpdateSQLPackageRequest)(nil),
	ResponseType: (*UpdateSQLPackageResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/sqlpkgs/:pkgId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
