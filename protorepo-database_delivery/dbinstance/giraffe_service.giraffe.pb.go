// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package dbinstance

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for dbinstance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateDBInstance(ctx context.Context, in *CreateDBInstanceRequest) (*CreateDBInstanceResponse, error)
	DeleteDBInstance(ctx context.Context, in *DeleteDBInstanceRequest) (*types.Empty, error)
	GetDBInstance(ctx context.Context, in *GetDBInstanceRequest) (*GetDBInstanceResponse, error)
	ListDBInstance(ctx context.Context, in *ListDBInstanceRequest) (*ListDBInstanceResponse, error)
	UpdateDBInstance(ctx context.Context, in *UpdateDBInstanceRequest) (*UpdateDBInstanceResponse, error)
	ValidateDBInstanceConenction(ctx context.Context, in *ValidateDBInstanceConenctionRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateDBInstance(ctx context.Context, in *CreateDBInstanceRequest) (*CreateDBInstanceResponse, error) {
	out := new(CreateDBInstanceResponse)
	err := c.c.Invoke(ctx, _CreateDBInstanceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteDBInstance(ctx context.Context, in *DeleteDBInstanceRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteDBInstanceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetDBInstance(ctx context.Context, in *GetDBInstanceRequest) (*GetDBInstanceResponse, error) {
	out := new(GetDBInstanceResponse)
	err := c.c.Invoke(ctx, _GetDBInstanceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDBInstance(ctx context.Context, in *ListDBInstanceRequest) (*ListDBInstanceResponse, error) {
	out := new(ListDBInstanceResponse)
	err := c.c.Invoke(ctx, _ListDBInstanceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateDBInstance(ctx context.Context, in *UpdateDBInstanceRequest) (*UpdateDBInstanceResponse, error) {
	out := new(UpdateDBInstanceResponse)
	err := c.c.Invoke(ctx, _UpdateDBInstanceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ValidateDBInstanceConenction(ctx context.Context, in *ValidateDBInstanceConenctionRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ValidateDBInstanceConenctionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for dbinstance service.
type Service interface {
	CreateDBInstance(context.Context, *CreateDBInstanceRequest) (*CreateDBInstanceResponse, error)
	DeleteDBInstance(context.Context, *DeleteDBInstanceRequest) (*types.Empty, error)
	GetDBInstance(context.Context, *GetDBInstanceRequest) (*GetDBInstanceResponse, error)
	ListDBInstance(context.Context, *ListDBInstanceRequest) (*ListDBInstanceResponse, error)
	UpdateDBInstance(context.Context, *UpdateDBInstanceRequest) (*UpdateDBInstanceResponse, error)
	ValidateDBInstanceConenction(context.Context, *ValidateDBInstanceConenctionRequest) (*types.Empty, error)
}

func _CreateDBInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateDBInstance(ctx, req.(*CreateDBInstanceRequest))
	}
}

func _DeleteDBInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteDBInstance(ctx, req.(*DeleteDBInstanceRequest))
	}
}

func _GetDBInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetDBInstance(ctx, req.(*GetDBInstanceRequest))
	}
}

func _ListDBInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListDBInstance(ctx, req.(*ListDBInstanceRequest))
	}
}

func _UpdateDBInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateDBInstance(ctx, req.(*UpdateDBInstanceRequest))
	}
}

func _ValidateDBInstanceConenctionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ValidateDBInstanceConenction(ctx, req.(*ValidateDBInstanceConenctionRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateDBInstanceMethodDesc, _CreateDBInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteDBInstanceMethodDesc, _DeleteDBInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetDBInstanceMethodDesc, _GetDBInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListDBInstanceMethodDesc, _ListDBInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateDBInstanceMethodDesc, _UpdateDBInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_ValidateDBInstanceConenctionMethodDesc, _ValidateDBInstanceConenctionEndpoint(srv))
}

// Method Description
var _CreateDBInstanceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbinstance.CreateDBInstance",
		Version: "1.0",
	},
	ServiceName:  "dbinstance.rpc",
	MethodName:   "CreateDBInstance",
	RequestType:  (*CreateDBInstanceRequest)(nil),
	ResponseType: (*CreateDBInstanceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/dbservices/:dbServiceId/dbinstances",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteDBInstanceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbinstance.DeleteDBInstance",
		Version: "1.0",
	},
	ServiceName:  "dbinstance.rpc",
	MethodName:   "DeleteDBInstance",
	RequestType:  (*DeleteDBInstanceRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/dbservices/:dbServiceId/dbinstances/:dbInstanceId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetDBInstanceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbinstance.GetDBInstance",
		Version: "1.0",
	},
	ServiceName:  "dbinstance.rpc",
	MethodName:   "GetDBInstance",
	RequestType:  (*GetDBInstanceRequest)(nil),
	ResponseType: (*GetDBInstanceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/dbservices/:dbServiceId/dbinstances/:dbInstanceId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListDBInstanceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbinstance.ListDBInstance",
		Version: "1.0",
	},
	ServiceName:  "dbinstance.rpc",
	MethodName:   "ListDBInstance",
	RequestType:  (*ListDBInstanceRequest)(nil),
	ResponseType: (*ListDBInstanceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/dbservices/:dbServiceId/dbinstances",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateDBInstanceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbinstance.UpdateDBInstance",
		Version: "1.0",
	},
	ServiceName:  "dbinstance.rpc",
	MethodName:   "UpdateDBInstance",
	RequestType:  (*UpdateDBInstanceRequest)(nil),
	ResponseType: (*UpdateDBInstanceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/dbservices/:dbServiceId/dbinstances/:dbInstanceId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ValidateDBInstanceConenctionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbinstance.ValidateDBInstanceConenction",
		Version: "1.0",
	},
	ServiceName:  "dbinstance.rpc",
	MethodName:   "ValidateDBInstanceConenction",
	RequestType:  (*ValidateDBInstanceConenctionRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/dbservices/:dbServiceId/dbinstances/validate",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
