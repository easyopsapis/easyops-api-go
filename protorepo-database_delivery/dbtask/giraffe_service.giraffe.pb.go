// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package dbtask

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for dbtask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	BackupTaskCallback(ctx context.Context, in *BackupTaskCallbackRequest) (*BackupTaskCallbackResponse, error)
	CheckTaskCallback(ctx context.Context, in *CheckTaskCallbackRequest) (*CheckTaskCallbackResponse, error)
	ConvertChangesetToSQL(ctx context.Context, in *ConvertChangesetToSQLRequest) (*ConvertChangesetToSQLResponse, error)
	CreateCustomDBTask(ctx context.Context, in *CreateCustomDBTaskRequest) (*CreateCustomDBTaskResponse, error)
	CreateSQLPackageDBTask(ctx context.Context, in *CreateSQLPackageDBTaskRequest) (*CreateSQLPackageDBTaskResponse, error)
	EditCustomDBTaskRollbackSQL(ctx context.Context, in *EditCustomDBTaskRollbackSQLRequest) (*types.Empty, error)
	GetCustomDBTaskDetail(ctx context.Context, in *GetCustomDBTaskDetailRequest) (*GetCustomDBTaskDetailResponse, error)
	GetCustomDBTaskRollbackInfo(ctx context.Context, in *GetCustomDBTaskRollbackInfoRequest) (*GetCustomDBTaskRollbackInfoResponse, error)
	GetSQLPackageDBTaskDetail(ctx context.Context, in *GetSQLPackageDBTaskDetailRequest) (*GetSQLPackageDBTaskDetailResponse, error)
	GetSQLPackageDBTaskRollbackInfo(ctx context.Context, in *GetSQLPackageDBTaskRollbackInfoRequest) (*GetSQLPackageDBTaskRollbackInfoResponse, error)
	LiquibaseTaskCallback(ctx context.Context, in *LiquibaseTaskCallbackRequest) (*LiquibaseTaskCallbackResponse, error)
	ListCustomDBTaskChangeHistory(ctx context.Context, in *ListCustomDBTaskChangeHistoryRequest) (*ListCustomDBTaskChangeHistoryResponse, error)
	ListDBVersion(ctx context.Context, in *ListDBVersionRequest) (*ListDBVersionResponse, error)
	ListSQLPackageChangeHistory(ctx context.Context, in *ListSQLPackageChangeHistoryRequest) (*ListSQLPackageChangeHistoryResponse, error)
	ListSQLPackageDBTaskChangeHistory(ctx context.Context, in *ListSQLPackageDBTaskChangeHistoryRequest) (*ListSQLPackageDBTaskChangeHistoryResponse, error)
	RetryCustomDBTask(ctx context.Context, in *RetryCustomDBTaskRequest) (*RetryCustomDBTaskResponse, error)
	RetrySQLPackageDBTask(ctx context.Context, in *RetrySQLPackageDBTaskRequest) (*RetrySQLPackageDBTaskResponse, error)
	RollbackCustomDBTask(ctx context.Context, in *RollbackCustomDBTaskRequest) (*RollbackCustomDBTaskResponse, error)
	RollbackSQLPackageDBTask(ctx context.Context, in *RollbackSQLPackageDBTaskRequest) (*RollbackSQLPackageDBTaskResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) BackupTaskCallback(ctx context.Context, in *BackupTaskCallbackRequest) (*BackupTaskCallbackResponse, error) {
	out := new(BackupTaskCallbackResponse)
	err := c.c.Invoke(ctx, _BackupTaskCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CheckTaskCallback(ctx context.Context, in *CheckTaskCallbackRequest) (*CheckTaskCallbackResponse, error) {
	out := new(CheckTaskCallbackResponse)
	err := c.c.Invoke(ctx, _CheckTaskCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ConvertChangesetToSQL(ctx context.Context, in *ConvertChangesetToSQLRequest) (*ConvertChangesetToSQLResponse, error) {
	out := new(ConvertChangesetToSQLResponse)
	err := c.c.Invoke(ctx, _ConvertChangesetToSQLMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateCustomDBTask(ctx context.Context, in *CreateCustomDBTaskRequest) (*CreateCustomDBTaskResponse, error) {
	out := new(CreateCustomDBTaskResponse)
	err := c.c.Invoke(ctx, _CreateCustomDBTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateSQLPackageDBTask(ctx context.Context, in *CreateSQLPackageDBTaskRequest) (*CreateSQLPackageDBTaskResponse, error) {
	out := new(CreateSQLPackageDBTaskResponse)
	err := c.c.Invoke(ctx, _CreateSQLPackageDBTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) EditCustomDBTaskRollbackSQL(ctx context.Context, in *EditCustomDBTaskRollbackSQLRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _EditCustomDBTaskRollbackSQLMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetCustomDBTaskDetail(ctx context.Context, in *GetCustomDBTaskDetailRequest) (*GetCustomDBTaskDetailResponse, error) {
	out := new(GetCustomDBTaskDetailResponse)
	err := c.c.Invoke(ctx, _GetCustomDBTaskDetailMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetCustomDBTaskRollbackInfo(ctx context.Context, in *GetCustomDBTaskRollbackInfoRequest) (*GetCustomDBTaskRollbackInfoResponse, error) {
	out := new(GetCustomDBTaskRollbackInfoResponse)
	err := c.c.Invoke(ctx, _GetCustomDBTaskRollbackInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetSQLPackageDBTaskDetail(ctx context.Context, in *GetSQLPackageDBTaskDetailRequest) (*GetSQLPackageDBTaskDetailResponse, error) {
	out := new(GetSQLPackageDBTaskDetailResponse)
	err := c.c.Invoke(ctx, _GetSQLPackageDBTaskDetailMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetSQLPackageDBTaskRollbackInfo(ctx context.Context, in *GetSQLPackageDBTaskRollbackInfoRequest) (*GetSQLPackageDBTaskRollbackInfoResponse, error) {
	out := new(GetSQLPackageDBTaskRollbackInfoResponse)
	err := c.c.Invoke(ctx, _GetSQLPackageDBTaskRollbackInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) LiquibaseTaskCallback(ctx context.Context, in *LiquibaseTaskCallbackRequest) (*LiquibaseTaskCallbackResponse, error) {
	out := new(LiquibaseTaskCallbackResponse)
	err := c.c.Invoke(ctx, _LiquibaseTaskCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListCustomDBTaskChangeHistory(ctx context.Context, in *ListCustomDBTaskChangeHistoryRequest) (*ListCustomDBTaskChangeHistoryResponse, error) {
	out := new(ListCustomDBTaskChangeHistoryResponse)
	err := c.c.Invoke(ctx, _ListCustomDBTaskChangeHistoryMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDBVersion(ctx context.Context, in *ListDBVersionRequest) (*ListDBVersionResponse, error) {
	out := new(ListDBVersionResponse)
	err := c.c.Invoke(ctx, _ListDBVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSQLPackageChangeHistory(ctx context.Context, in *ListSQLPackageChangeHistoryRequest) (*ListSQLPackageChangeHistoryResponse, error) {
	out := new(ListSQLPackageChangeHistoryResponse)
	err := c.c.Invoke(ctx, _ListSQLPackageChangeHistoryMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSQLPackageDBTaskChangeHistory(ctx context.Context, in *ListSQLPackageDBTaskChangeHistoryRequest) (*ListSQLPackageDBTaskChangeHistoryResponse, error) {
	out := new(ListSQLPackageDBTaskChangeHistoryResponse)
	err := c.c.Invoke(ctx, _ListSQLPackageDBTaskChangeHistoryMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RetryCustomDBTask(ctx context.Context, in *RetryCustomDBTaskRequest) (*RetryCustomDBTaskResponse, error) {
	out := new(RetryCustomDBTaskResponse)
	err := c.c.Invoke(ctx, _RetryCustomDBTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RetrySQLPackageDBTask(ctx context.Context, in *RetrySQLPackageDBTaskRequest) (*RetrySQLPackageDBTaskResponse, error) {
	out := new(RetrySQLPackageDBTaskResponse)
	err := c.c.Invoke(ctx, _RetrySQLPackageDBTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RollbackCustomDBTask(ctx context.Context, in *RollbackCustomDBTaskRequest) (*RollbackCustomDBTaskResponse, error) {
	out := new(RollbackCustomDBTaskResponse)
	err := c.c.Invoke(ctx, _RollbackCustomDBTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RollbackSQLPackageDBTask(ctx context.Context, in *RollbackSQLPackageDBTaskRequest) (*RollbackSQLPackageDBTaskResponse, error) {
	out := new(RollbackSQLPackageDBTaskResponse)
	err := c.c.Invoke(ctx, _RollbackSQLPackageDBTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for dbtask service.
type Service interface {
	BackupTaskCallback(context.Context, *BackupTaskCallbackRequest) (*BackupTaskCallbackResponse, error)
	CheckTaskCallback(context.Context, *CheckTaskCallbackRequest) (*CheckTaskCallbackResponse, error)
	ConvertChangesetToSQL(context.Context, *ConvertChangesetToSQLRequest) (*ConvertChangesetToSQLResponse, error)
	CreateCustomDBTask(context.Context, *CreateCustomDBTaskRequest) (*CreateCustomDBTaskResponse, error)
	CreateSQLPackageDBTask(context.Context, *CreateSQLPackageDBTaskRequest) (*CreateSQLPackageDBTaskResponse, error)
	EditCustomDBTaskRollbackSQL(context.Context, *EditCustomDBTaskRollbackSQLRequest) (*types.Empty, error)
	GetCustomDBTaskDetail(context.Context, *GetCustomDBTaskDetailRequest) (*GetCustomDBTaskDetailResponse, error)
	GetCustomDBTaskRollbackInfo(context.Context, *GetCustomDBTaskRollbackInfoRequest) (*GetCustomDBTaskRollbackInfoResponse, error)
	GetSQLPackageDBTaskDetail(context.Context, *GetSQLPackageDBTaskDetailRequest) (*GetSQLPackageDBTaskDetailResponse, error)
	GetSQLPackageDBTaskRollbackInfo(context.Context, *GetSQLPackageDBTaskRollbackInfoRequest) (*GetSQLPackageDBTaskRollbackInfoResponse, error)
	LiquibaseTaskCallback(context.Context, *LiquibaseTaskCallbackRequest) (*LiquibaseTaskCallbackResponse, error)
	ListCustomDBTaskChangeHistory(context.Context, *ListCustomDBTaskChangeHistoryRequest) (*ListCustomDBTaskChangeHistoryResponse, error)
	ListDBVersion(context.Context, *ListDBVersionRequest) (*ListDBVersionResponse, error)
	ListSQLPackageChangeHistory(context.Context, *ListSQLPackageChangeHistoryRequest) (*ListSQLPackageChangeHistoryResponse, error)
	ListSQLPackageDBTaskChangeHistory(context.Context, *ListSQLPackageDBTaskChangeHistoryRequest) (*ListSQLPackageDBTaskChangeHistoryResponse, error)
	RetryCustomDBTask(context.Context, *RetryCustomDBTaskRequest) (*RetryCustomDBTaskResponse, error)
	RetrySQLPackageDBTask(context.Context, *RetrySQLPackageDBTaskRequest) (*RetrySQLPackageDBTaskResponse, error)
	RollbackCustomDBTask(context.Context, *RollbackCustomDBTaskRequest) (*RollbackCustomDBTaskResponse, error)
	RollbackSQLPackageDBTask(context.Context, *RollbackSQLPackageDBTaskRequest) (*RollbackSQLPackageDBTaskResponse, error)
}

func _BackupTaskCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.BackupTaskCallback(ctx, req.(*BackupTaskCallbackRequest))
	}
}

func _CheckTaskCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CheckTaskCallback(ctx, req.(*CheckTaskCallbackRequest))
	}
}

func _ConvertChangesetToSQLEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ConvertChangesetToSQL(ctx, req.(*ConvertChangesetToSQLRequest))
	}
}

func _CreateCustomDBTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateCustomDBTask(ctx, req.(*CreateCustomDBTaskRequest))
	}
}

func _CreateSQLPackageDBTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateSQLPackageDBTask(ctx, req.(*CreateSQLPackageDBTaskRequest))
	}
}

func _EditCustomDBTaskRollbackSQLEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.EditCustomDBTaskRollbackSQL(ctx, req.(*EditCustomDBTaskRollbackSQLRequest))
	}
}

func _GetCustomDBTaskDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetCustomDBTaskDetail(ctx, req.(*GetCustomDBTaskDetailRequest))
	}
}

func _GetCustomDBTaskRollbackInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetCustomDBTaskRollbackInfo(ctx, req.(*GetCustomDBTaskRollbackInfoRequest))
	}
}

func _GetSQLPackageDBTaskDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSQLPackageDBTaskDetail(ctx, req.(*GetSQLPackageDBTaskDetailRequest))
	}
}

func _GetSQLPackageDBTaskRollbackInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSQLPackageDBTaskRollbackInfo(ctx, req.(*GetSQLPackageDBTaskRollbackInfoRequest))
	}
}

func _LiquibaseTaskCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.LiquibaseTaskCallback(ctx, req.(*LiquibaseTaskCallbackRequest))
	}
}

func _ListCustomDBTaskChangeHistoryEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListCustomDBTaskChangeHistory(ctx, req.(*ListCustomDBTaskChangeHistoryRequest))
	}
}

func _ListDBVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListDBVersion(ctx, req.(*ListDBVersionRequest))
	}
}

func _ListSQLPackageChangeHistoryEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListSQLPackageChangeHistory(ctx, req.(*ListSQLPackageChangeHistoryRequest))
	}
}

func _ListSQLPackageDBTaskChangeHistoryEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListSQLPackageDBTaskChangeHistory(ctx, req.(*ListSQLPackageDBTaskChangeHistoryRequest))
	}
}

func _RetryCustomDBTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RetryCustomDBTask(ctx, req.(*RetryCustomDBTaskRequest))
	}
}

func _RetrySQLPackageDBTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RetrySQLPackageDBTask(ctx, req.(*RetrySQLPackageDBTaskRequest))
	}
}

func _RollbackCustomDBTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RollbackCustomDBTask(ctx, req.(*RollbackCustomDBTaskRequest))
	}
}

func _RollbackSQLPackageDBTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RollbackSQLPackageDBTask(ctx, req.(*RollbackSQLPackageDBTaskRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_BackupTaskCallbackMethodDesc, _BackupTaskCallbackEndpoint(srv))
	s.RegisterUnaryEndpoint(_CheckTaskCallbackMethodDesc, _CheckTaskCallbackEndpoint(srv))
	s.RegisterUnaryEndpoint(_ConvertChangesetToSQLMethodDesc, _ConvertChangesetToSQLEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateCustomDBTaskMethodDesc, _CreateCustomDBTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateSQLPackageDBTaskMethodDesc, _CreateSQLPackageDBTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_EditCustomDBTaskRollbackSQLMethodDesc, _EditCustomDBTaskRollbackSQLEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetCustomDBTaskDetailMethodDesc, _GetCustomDBTaskDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetCustomDBTaskRollbackInfoMethodDesc, _GetCustomDBTaskRollbackInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetSQLPackageDBTaskDetailMethodDesc, _GetSQLPackageDBTaskDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetSQLPackageDBTaskRollbackInfoMethodDesc, _GetSQLPackageDBTaskRollbackInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_LiquibaseTaskCallbackMethodDesc, _LiquibaseTaskCallbackEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListCustomDBTaskChangeHistoryMethodDesc, _ListCustomDBTaskChangeHistoryEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListDBVersionMethodDesc, _ListDBVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListSQLPackageChangeHistoryMethodDesc, _ListSQLPackageChangeHistoryEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListSQLPackageDBTaskChangeHistoryMethodDesc, _ListSQLPackageDBTaskChangeHistoryEndpoint(srv))
	s.RegisterUnaryEndpoint(_RetryCustomDBTaskMethodDesc, _RetryCustomDBTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_RetrySQLPackageDBTaskMethodDesc, _RetrySQLPackageDBTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_RollbackCustomDBTaskMethodDesc, _RollbackCustomDBTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_RollbackSQLPackageDBTaskMethodDesc, _RollbackSQLPackageDBTaskEndpoint(srv))
}

// Method Description
var _BackupTaskCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.BackupTaskCallback",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "BackupTaskCallback",
	RequestType:  (*BackupTaskCallbackRequest)(nil),
	ResponseType: (*BackupTaskCallbackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/backup-tasks/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CheckTaskCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.CheckTaskCallback",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "CheckTaskCallback",
	RequestType:  (*CheckTaskCallbackRequest)(nil),
	ResponseType: (*CheckTaskCallbackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/check-tasks/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ConvertChangesetToSQLMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.ConvertChangesetToSQL",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "ConvertChangesetToSQL",
	RequestType:  (*ConvertChangesetToSQLRequest)(nil),
	ResponseType: (*ConvertChangesetToSQLResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/changeset/convert",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateCustomDBTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.CreateCustomDBTask",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "CreateCustomDBTask",
	RequestType:  (*CreateCustomDBTaskRequest)(nil),
	ResponseType: (*CreateCustomDBTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/dbtasks",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateSQLPackageDBTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.CreateSQLPackageDBTask",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "CreateSQLPackageDBTask",
	RequestType:  (*CreateSQLPackageDBTaskRequest)(nil),
	ResponseType: (*CreateSQLPackageDBTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/sqlpkgs/:pkgId/versions/:versionId/dbtasks",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _EditCustomDBTaskRollbackSQLMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.EditCustomDBTaskRollbackSQL",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "EditCustomDBTaskRollbackSQL",
	RequestType:  (*EditCustomDBTaskRollbackSQLRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/dbtasks/:dbTaskId/rollbaskSql",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetCustomDBTaskDetailMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.GetCustomDBTaskDetail",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "GetCustomDBTaskDetail",
	RequestType:  (*GetCustomDBTaskDetailRequest)(nil),
	ResponseType: (*GetCustomDBTaskDetailResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/dbtasks/:dbTaskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetCustomDBTaskRollbackInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.GetCustomDBTaskRollbackInfo",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "GetCustomDBTaskRollbackInfo",
	RequestType:  (*GetCustomDBTaskRollbackInfoRequest)(nil),
	ResponseType: (*GetCustomDBTaskRollbackInfoResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/dbtasks/:dbTaskId/rollbackInfo",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetSQLPackageDBTaskDetailMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.GetSQLPackageDBTaskDetail",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "GetSQLPackageDBTaskDetail",
	RequestType:  (*GetSQLPackageDBTaskDetailRequest)(nil),
	ResponseType: (*GetSQLPackageDBTaskDetailResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/sqlpkg-dbtasks/:dbTaskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetSQLPackageDBTaskRollbackInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.GetSQLPackageDBTaskRollbackInfo",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "GetSQLPackageDBTaskRollbackInfo",
	RequestType:  (*GetSQLPackageDBTaskRollbackInfoRequest)(nil),
	ResponseType: (*GetSQLPackageDBTaskRollbackInfoResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/sqlpkg-dbtasks/:dbTaskId/rollbackInfo",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _LiquibaseTaskCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.LiquibaseTaskCallback",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "LiquibaseTaskCallback",
	RequestType:  (*LiquibaseTaskCallbackRequest)(nil),
	ResponseType: (*LiquibaseTaskCallbackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/liquibase-tasks/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListCustomDBTaskChangeHistoryMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.ListCustomDBTaskChangeHistory",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "ListCustomDBTaskChangeHistory",
	RequestType:  (*ListCustomDBTaskChangeHistoryRequest)(nil),
	ResponseType: (*ListCustomDBTaskChangeHistoryResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/dbservices/:dbServiceId/custom/history",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListDBVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.ListDBVersion",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "ListDBVersion",
	RequestType:  (*ListDBVersionRequest)(nil),
	ResponseType: (*ListDBVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/dbservices/:dbServiceId/versions",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListSQLPackageChangeHistoryMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.ListSQLPackageChangeHistory",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "ListSQLPackageChangeHistory",
	RequestType:  (*ListSQLPackageChangeHistoryRequest)(nil),
	ResponseType: (*ListSQLPackageChangeHistoryResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/sqlpkgs/:pkgId/history",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListSQLPackageDBTaskChangeHistoryMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.ListSQLPackageDBTaskChangeHistory",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "ListSQLPackageDBTaskChangeHistory",
	RequestType:  (*ListSQLPackageDBTaskChangeHistoryRequest)(nil),
	ResponseType: (*ListSQLPackageDBTaskChangeHistoryResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/dbservices/:dbServiceId/sqlpkg/history",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _RetryCustomDBTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.RetryCustomDBTask",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "RetryCustomDBTask",
	RequestType:  (*RetryCustomDBTaskRequest)(nil),
	ResponseType: (*RetryCustomDBTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/dbtasks/:dbTaskId/retry",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _RetrySQLPackageDBTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.RetrySQLPackageDBTask",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "RetrySQLPackageDBTask",
	RequestType:  (*RetrySQLPackageDBTaskRequest)(nil),
	ResponseType: (*RetrySQLPackageDBTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/sqlpkg-dbtasks/:dbTaskId/retry",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _RollbackCustomDBTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.RollbackCustomDBTask",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "RollbackCustomDBTask",
	RequestType:  (*RollbackCustomDBTaskRequest)(nil),
	ResponseType: (*RollbackCustomDBTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/dbtasks/:dbTaskId/rollback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _RollbackSQLPackageDBTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.database_delivery.dbtask.RollbackSQLPackageDBTask",
		Version: "1.0",
	},
	ServiceName:  "dbtask.rpc",
	MethodName:   "RollbackSQLPackageDBTask",
	RequestType:  (*RollbackSQLPackageDBTaskRequest)(nil),
	ResponseType: (*RollbackSQLPackageDBTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/sqlpkg-dbtasks/:dbTaskId/rollback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
