// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: create.proto

package subscriber_manager

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	notify "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/notify"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//PubSubscriberCreate请求
type PubSubscriberCreateRequest struct {
	//
	//订阅的事件id列表
	Topics []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics" form:"topics"`
	//
	//订阅名称，可以为中文
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//回调url. 处理成功时需要返回 status 2xx
	Callback string `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback" form:"callback"`
	//
	//回调名字服务名。非空时，callback url的域名解析会先经ens
	EnsName string `protobuf:"bytes,4,opt,name=ensName,proto3" json:"ensName" form:"ensName"`
	//
	//retry 为 0 时调用 callback 出错不会重试，否则会无限重试。
	Retry int32 `protobuf:"varint,5,opt,name=retry,proto3" json:"retry" form:"retry"`
	//
	//订阅的事件的版本，隐藏字段，因为_version不会反应关系的修改
	TopicVersion         int32    `protobuf:"varint,6,opt,name=topicVersion,proto3" json:"topicVersion" form:"topicVersion"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubSubscriberCreateRequest) Reset()         { *m = PubSubscriberCreateRequest{} }
func (m *PubSubscriberCreateRequest) String() string { return proto.CompactTextString(m) }
func (*PubSubscriberCreateRequest) ProtoMessage()    {}
func (*PubSubscriberCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d26d5dcda09a78, []int{0}
}
func (m *PubSubscriberCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubSubscriberCreateRequest.Unmarshal(m, b)
}
func (m *PubSubscriberCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubSubscriberCreateRequest.Marshal(b, m, deterministic)
}
func (m *PubSubscriberCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubscriberCreateRequest.Merge(m, src)
}
func (m *PubSubscriberCreateRequest) XXX_Size() int {
	return xxx_messageInfo_PubSubscriberCreateRequest.Size(m)
}
func (m *PubSubscriberCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubscriberCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubscriberCreateRequest proto.InternalMessageInfo

func (m *PubSubscriberCreateRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *PubSubscriberCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PubSubscriberCreateRequest) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *PubSubscriberCreateRequest) GetEnsName() string {
	if m != nil {
		return m.EnsName
	}
	return ""
}

func (m *PubSubscriberCreateRequest) GetRetry() int32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *PubSubscriberCreateRequest) GetTopicVersion() int32 {
	if m != nil {
		return m.TopicVersion
	}
	return 0
}

//
//PubSubscriberCreate返回
type PubSubscriberCreateResponse struct {
	//
	//订阅的事件列表
	Topics []*notify.Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics" form:"topics"`
	//
	//订阅ID
	InstanceId string `protobuf:"bytes,2,opt,name=instanceId,proto3" json:"instanceId" form:"instanceId"`
	//
	//订阅名称，可以为中文
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name"`
	//
	//订阅负责人。如 linus
	Admin string `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin" form:"admin"`
	//
	//回调url. 处理成功时需要返回 status 2xx
	Callback string `protobuf:"bytes,5,opt,name=callback,proto3" json:"callback" form:"callback"`
	//
	//回调名字服务名。非空时，callback url的域名解析会先经ens
	EnsName string `protobuf:"bytes,6,opt,name=ensName,proto3" json:"ensName" form:"ensName"`
	//
	//retry 为 0 时调用 callback 出错不会重试，否则会无限重试。
	Retry int32 `protobuf:"varint,7,opt,name=retry,proto3" json:"retry" form:"retry"`
	//
	//模型修改时间
	Mtime string `protobuf:"bytes,8,opt,name=mtime,proto3" json:"mtime" form:"mtime"`
	//
	//模型版本
	XVersion int32 `protobuf:"varint,9,opt,name=_version,json=Version,proto3" json:"_version" form:"_version"`
	//
	//订阅的事件的版本，隐藏字段，因为_version不会反应关系的修改
	TopicVersion         int32    `protobuf:"varint,10,opt,name=topicVersion,proto3" json:"topicVersion" form:"topicVersion"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubSubscriberCreateResponse) Reset()         { *m = PubSubscriberCreateResponse{} }
func (m *PubSubscriberCreateResponse) String() string { return proto.CompactTextString(m) }
func (*PubSubscriberCreateResponse) ProtoMessage()    {}
func (*PubSubscriberCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d26d5dcda09a78, []int{1}
}
func (m *PubSubscriberCreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubSubscriberCreateResponse.Unmarshal(m, b)
}
func (m *PubSubscriberCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubSubscriberCreateResponse.Marshal(b, m, deterministic)
}
func (m *PubSubscriberCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubscriberCreateResponse.Merge(m, src)
}
func (m *PubSubscriberCreateResponse) XXX_Size() int {
	return xxx_messageInfo_PubSubscriberCreateResponse.Size(m)
}
func (m *PubSubscriberCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubscriberCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubscriberCreateResponse proto.InternalMessageInfo

func (m *PubSubscriberCreateResponse) GetTopics() []*notify.Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *PubSubscriberCreateResponse) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *PubSubscriberCreateResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PubSubscriberCreateResponse) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *PubSubscriberCreateResponse) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *PubSubscriberCreateResponse) GetEnsName() string {
	if m != nil {
		return m.EnsName
	}
	return ""
}

func (m *PubSubscriberCreateResponse) GetRetry() int32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *PubSubscriberCreateResponse) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

func (m *PubSubscriberCreateResponse) GetXVersion() int32 {
	if m != nil {
		return m.XVersion
	}
	return 0
}

func (m *PubSubscriberCreateResponse) GetTopicVersion() int32 {
	if m != nil {
		return m.TopicVersion
	}
	return 0
}

//
//PubSubscriberCreateApi返回
type PubSubscriberCreateResponseWrapper struct {
	//
	//返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code" form:"code"`
	//
	//返回码解释
	CodeExplain string `protobuf:"bytes,2,opt,name=codeExplain,proto3" json:"codeExplain" form:"codeExplain"`
	//
	//错误详情
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error" form:"error"`
	//
	//返回数据
	Data                 *PubSubscriberCreateResponse `protobuf:"bytes,4,opt,name=data,proto3" json:"data" form:"data"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PubSubscriberCreateResponseWrapper) Reset()         { *m = PubSubscriberCreateResponseWrapper{} }
func (m *PubSubscriberCreateResponseWrapper) String() string { return proto.CompactTextString(m) }
func (*PubSubscriberCreateResponseWrapper) ProtoMessage()    {}
func (*PubSubscriberCreateResponseWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d26d5dcda09a78, []int{2}
}
func (m *PubSubscriberCreateResponseWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubSubscriberCreateResponseWrapper.Unmarshal(m, b)
}
func (m *PubSubscriberCreateResponseWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubSubscriberCreateResponseWrapper.Marshal(b, m, deterministic)
}
func (m *PubSubscriberCreateResponseWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubscriberCreateResponseWrapper.Merge(m, src)
}
func (m *PubSubscriberCreateResponseWrapper) XXX_Size() int {
	return xxx_messageInfo_PubSubscriberCreateResponseWrapper.Size(m)
}
func (m *PubSubscriberCreateResponseWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubscriberCreateResponseWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubscriberCreateResponseWrapper proto.InternalMessageInfo

func (m *PubSubscriberCreateResponseWrapper) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PubSubscriberCreateResponseWrapper) GetCodeExplain() string {
	if m != nil {
		return m.CodeExplain
	}
	return ""
}

func (m *PubSubscriberCreateResponseWrapper) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PubSubscriberCreateResponseWrapper) GetData() *PubSubscriberCreateResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PubSubscriberCreateRequest)(nil), "subscriber_manager.PubSubscriberCreateRequest")
	proto.RegisterType((*PubSubscriberCreateResponse)(nil), "subscriber_manager.PubSubscriberCreateResponse")
	proto.RegisterType((*PubSubscriberCreateResponseWrapper)(nil), "subscriber_manager.PubSubscriberCreateResponseWrapper")
}

func init() { proto.RegisterFile("create.proto", fileDescriptor_a4d26d5dcda09a78) }

var fileDescriptor_a4d26d5dcda09a78 = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x86, 0xea, 0xd8, 0x49, 0xe8, 0xf4, 0x4f, 0x05, 0x36, 0x23, 0xbb, 0x90, 0xc7, 0x76, 0x81,
	0x34, 0x97, 0x92, 0x7f, 0xb6, 0xa1, 0x71, 0x31, 0x68, 0xcb, 0xb0, 0x8b, 0x02, 0x45, 0x31, 0x68,
	0xc1, 0x06, 0x54, 0x55, 0x03, 0x4a, 0xa6, 0x5d, 0xa1, 0x92, 0xa8, 0x51, 0x74, 0xbb, 0xb4, 0xce,
	0x80, 0x60, 0x6f, 0xb0, 0xc7, 0x18, 0xb0, 0x97, 0xd8, 0x5b, 0xec, 0x46, 0x03, 0xf6, 0x08, 0x7a,
	0x82, 0x41, 0xa4, 0x6c, 0x2b, 0x48, 0x60, 0x20, 0x57, 0xbd, 0x22, 0xcf, 0xf9, 0xbe, 0x73, 0xc8,
	0x73, 0xce, 0x47, 0x09, 0xec, 0x05, 0x8c, 0x60, 0x4e, 0xcc, 0x94, 0x51, 0x4e, 0x55, 0x35, 0x9b,
	0xfb, 0x59, 0xc0, 0x42, 0x9f, 0xb0, 0x93, 0x18, 0x27, 0x78, 0x46, 0xd8, 0x3e, 0x9a, 0x85, 0xfc,
	0xd5, 0xdc, 0x37, 0x03, 0x1a, 0x5b, 0x33, 0x3a, 0xa3, 0x96, 0xa0, 0xfa, 0xf3, 0xa9, 0xb0, 0x84,
	0x21, 0x76, 0x32, 0xc5, 0xfe, 0xd3, 0x19, 0x35, 0x09, 0xce, 0x4e, 0x69, 0x9a, 0x99, 0x11, 0x0d,
	0x70, 0x64, 0x05, 0x34, 0xe1, 0x0c, 0x07, 0x3c, 0x93, 0x91, 0x8c, 0xa4, 0x14, 0xc5, 0x74, 0x42,
	0xa2, 0xcc, 0xaa, 0x88, 0x96, 0x30, 0xad, 0x84, 0xf2, 0x70, 0x7a, 0x6a, 0x71, 0x9a, 0x86, 0x41,
	0x95, 0xed, 0xab, 0xda, 0xe1, 0xf1, 0xdb, 0x90, 0xbf, 0xa6, 0x6f, 0xad, 0x19, 0x45, 0x02, 0x44,
	0x6f, 0x70, 0x14, 0x4e, 0x30, 0xa7, 0x2c, 0xb3, 0x56, 0x5b, 0x19, 0x07, 0x7f, 0x6f, 0x80, 0xfd,
	0x1f, 0xe6, 0xfe, 0x8f, 0xab, 0x72, 0xbe, 0x13, 0x65, 0x3a, 0xe4, 0x97, 0x39, 0xc9, 0xb8, 0x6a,
	0x80, 0x96, 0x38, 0x25, 0xeb, 0x28, 0xdd, 0x86, 0xbe, 0x7b, 0x74, 0xb7, 0xc8, 0xb5, 0x9b, 0x53,
	0xca, 0xe2, 0x31, 0x94, 0x7e, 0xe8, 0x54, 0x04, 0xf5, 0x3e, 0xd8, 0x4a, 0x70, 0x4c, 0x3a, 0x37,
	0xba, 0x8a, 0xbe, 0x7b, 0x74, 0xbb, 0xc8, 0xb5, 0xb6, 0x24, 0x96, 0x5e, 0xe8, 0x08, 0x50, 0x3d,
	0x57, 0xc0, 0x4e, 0x80, 0xa3, 0xc8, 0xc7, 0xc1, 0xeb, 0x4e, 0x43, 0x30, 0x49, 0x91, 0x6b, 0xb7,
	0x25, 0x73, 0x89, 0xc0, 0xff, 0xfe, 0xd5, 0x9e, 0x81, 0xa7, 0xfa, 0x0b, 0x5f, 0x7f, 0xc5, 0x79,
	0x9a, 0xd9, 0x8b, 0x29, 0x4f, 0x17, 0xd3, 0x30, 0x22, 0xc6, 0xd8, 0xb2, 0x0c, 0xdb, 0x45, 0xdf,
	0xa2, 0xe7, 0x18, 0xbd, 0xeb, 0xa3, 0xc3, 0xde, 0xc1, 0x37, 0xf7, 0xad, 0xcf, 0xec, 0xaf, 0x7f,
	0x3b, 0x59, 0x7c, 0x3a, 0x7e, 0x68, 0x3e, 0xf6, 0x7a, 0x97, 0xc0, 0x12, 0xf3, 0x9c, 0xd5, 0xb1,
	0xea, 0x43, 0xb0, 0x4d, 0x92, 0xec, 0x59, 0x79, 0xd7, 0x2d, 0x71, 0x03, 0xb5, 0xc8, 0xb5, 0x5b,
	0xf2, 0x06, 0x15, 0x00, 0x9d, 0x25, 0x45, 0x3d, 0x00, 0x4d, 0x46, 0x38, 0x3b, 0xed, 0x34, 0xbb,
	0x8a, 0xde, 0x3c, 0xba, 0x53, 0xe4, 0xda, 0x9e, 0xe4, 0x0a, 0x37, 0x74, 0x24, 0xac, 0x3e, 0x06,
	0x7b, 0xa2, 0x11, 0x3f, 0x11, 0x96, 0x85, 0x34, 0xe9, 0xb4, 0x04, 0xfd, 0xe3, 0x22, 0xd7, 0xee,
	0xd5, 0xfa, 0x55, 0xa1, 0xd0, 0xb9, 0x40, 0x86, 0x7f, 0xb4, 0xc0, 0x27, 0x57, 0x4e, 0x21, 0x4b,
	0x69, 0x92, 0x11, 0xf5, 0xd1, 0x85, 0x31, 0xb4, 0x87, 0x37, 0x4d, 0x29, 0x01, 0xf3, 0xb8, 0xf4,
	0x6e, 0x9a, 0xca, 0x13, 0x00, 0xc2, 0x24, 0xe3, 0x38, 0x09, 0xc8, 0x93, 0x49, 0x35, 0x1b, 0xa3,
	0xc8, 0xb5, 0xbb, 0x92, 0xbe, 0xc6, 0xca, 0x9e, 0xdf, 0x01, 0xb7, 0x5e, 0xba, 0x7d, 0x74, 0x88,
	0xd1, 0x3b, 0xef, 0xfd, 0x60, 0x74, 0xf6, 0xc0, 0xa9, 0x05, 0xaf, 0x06, 0xdc, 0xd8, 0x34, 0xe0,
	0x03, 0xd0, 0xc4, 0x93, 0x38, 0x4c, 0xaa, 0xd6, 0xd6, 0xda, 0x25, 0xdc, 0xd0, 0x91, 0xf0, 0x45,
	0x21, 0x34, 0x3f, 0xb8, 0x10, 0x5a, 0xd7, 0x10, 0xc2, 0xf6, 0x66, 0x21, 0xfc, 0xa3, 0x80, 0x66,
	0xcc, 0xc3, 0x98, 0x74, 0x76, 0x44, 0xd2, 0xbf, 0x95, 0x35, 0x53, 0xf8, 0xcb, 0xa2, 0xfe, 0x52,
	0xc0, 0x9f, 0xca, 0x4b, 0x5d, 0xb7, 0xc7, 0xee, 0x00, 0x1d, 0x7a, 0x65, 0xd3, 0xbd, 0xcf, 0x0d,
	0x5b, 0xac, 0xef, 0xbf, 0x38, 0x33, 0x90, 0x3e, 0x70, 0xfb, 0x68, 0xe8, 0x2d, 0xfa, 0x02, 0x37,
	0x90, 0x3e, 0x72, 0xfb, 0x68, 0xb0, 0xb4, 0x17, 0xee, 0x00, 0x0d, 0x65, 0x94, 0xe1, 0x1e, 0x77,
	0x3d, 0x7d, 0xe8, 0xf6, 0xd1, 0xc8, 0x5b, 0x08, 0x8e, 0x74, 0x8f, 0x75, 0xb7, 0x8f, 0xbe, 0x5c,
	0x1a, 0xeb, 0xbd, 0xfe, 0xc2, 0x14, 0x6b, 0xcf, 0xb0, 0xf5, 0xe7, 0x0b, 0xb7, 0x87, 0x3c, 0xdd,
	0x1e, 0x5f, 0x11, 0x5e, 0x8b, 0xb6, 0x1f, 0x38, 0xb2, 0x22, 0xd5, 0x04, 0x3b, 0x27, 0x6f, 0x2a,
	0x81, 0xef, 0x8a, 0x36, 0xdc, 0x5b, 0x0f, 0x6d, 0x89, 0x40, 0x67, 0xbb, 0xd2, 0xf5, 0xa5, 0x47,
	0x01, 0xae, 0xf3, 0x28, 0xce, 0x6f, 0x00, 0xb8, 0xe1, 0x51, 0xfc, 0xcc, 0x70, 0x9a, 0x12, 0x56,
	0xca, 0x32, 0xa0, 0x13, 0xd2, 0x51, 0x44, 0xee, 0x9a, 0x2c, 0x4b, 0x2f, 0x74, 0x04, 0xa8, 0x3e,
	0x02, 0xed, 0x72, 0xfd, 0xfe, 0xd7, 0x34, 0xc2, 0x61, 0x52, 0xbd, 0x83, 0x8f, 0x8a, 0x5c, 0x53,
	0xd7, 0xdc, 0x0a, 0x84, 0x4e, 0x9d, 0x5a, 0x8e, 0x9d, 0x30, 0x46, 0x59, 0x25, 0xfb, 0xda, 0xd8,
	0x85, 0x1b, 0x3a, 0x12, 0x56, 0x8f, 0xc1, 0xd6, 0x04, 0x73, 0x2c, 0x74, 0xdf, 0x1e, 0x5a, 0xe6,
	0xe5, 0x1f, 0x84, 0xb9, 0xa1, 0x98, 0xfa, 0xbd, 0xcb, 0x34, 0xd0, 0x11, 0xd9, 0xfc, 0x96, 0xf8,
	0x4a, 0x8f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xd4, 0x74, 0xff, 0x7e, 0x06, 0x00, 0x00,
}
