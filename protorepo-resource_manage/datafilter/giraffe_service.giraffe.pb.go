// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package datafilter

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	resource_manage "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/resource_manage"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for datafilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateStrategy(ctx context.Context, in *resource_manage.FilterStrategy) (*CreateStrategyResponse, error)
	DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest) (*types.Empty, error)
	ExecuteStrategy(ctx context.Context, in *ExecuteStrategyRequest) (*ExecuteStrategyResponse, error)
	GetStrategy(ctx context.Context, in *GetStrategyRequest) (*resource_manage.FilterStrategy, error)
	ListStrategy(ctx context.Context, in *ListStrategyRequest) (*ListStrategyResponse, error)
	PushMessage(ctx context.Context, in *types.Empty) (*types.Empty, error)
	ToggleStrategy(ctx context.Context, in *ToggleStrategyRequest) (*types.Empty, error)
	UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateStrategy(ctx context.Context, in *resource_manage.FilterStrategy) (*CreateStrategyResponse, error) {
	out := new(CreateStrategyResponse)
	err := c.c.Invoke(ctx, _CreateStrategyMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteStrategyMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ExecuteStrategy(ctx context.Context, in *ExecuteStrategyRequest) (*ExecuteStrategyResponse, error) {
	out := new(ExecuteStrategyResponse)
	err := c.c.Invoke(ctx, _ExecuteStrategyMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetStrategy(ctx context.Context, in *GetStrategyRequest) (*resource_manage.FilterStrategy, error) {
	out := new(resource_manage.FilterStrategy)
	err := c.c.Invoke(ctx, _GetStrategyMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListStrategy(ctx context.Context, in *ListStrategyRequest) (*ListStrategyResponse, error) {
	out := new(ListStrategyResponse)
	err := c.c.Invoke(ctx, _ListStrategyMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) PushMessage(ctx context.Context, in *types.Empty) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _PushMessageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ToggleStrategy(ctx context.Context, in *ToggleStrategyRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ToggleStrategyMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateStrategyMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for datafilter service.
type Service interface {
	CreateStrategy(context.Context, *resource_manage.FilterStrategy) (*CreateStrategyResponse, error)
	DeleteStrategy(context.Context, *DeleteStrategyRequest) (*types.Empty, error)
	ExecuteStrategy(context.Context, *ExecuteStrategyRequest) (*ExecuteStrategyResponse, error)
	GetStrategy(context.Context, *GetStrategyRequest) (*resource_manage.FilterStrategy, error)
	ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyResponse, error)
	PushMessage(context.Context, *types.Empty) (*types.Empty, error)
	ToggleStrategy(context.Context, *ToggleStrategyRequest) (*types.Empty, error)
	UpdateStrategy(context.Context, *UpdateStrategyRequest) (*types.Empty, error)
}

func _CreateStrategyEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateStrategy(ctx, req.(*resource_manage.FilterStrategy))
	}
}

func _DeleteStrategyEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteStrategy(ctx, req.(*DeleteStrategyRequest))
	}
}

func _ExecuteStrategyEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ExecuteStrategy(ctx, req.(*ExecuteStrategyRequest))
	}
}

func _GetStrategyEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetStrategy(ctx, req.(*GetStrategyRequest))
	}
}

func _ListStrategyEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListStrategy(ctx, req.(*ListStrategyRequest))
	}
}

func _PushMessageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.PushMessage(ctx, req.(*types.Empty))
	}
}

func _ToggleStrategyEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ToggleStrategy(ctx, req.(*ToggleStrategyRequest))
	}
}

func _UpdateStrategyEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateStrategy(ctx, req.(*UpdateStrategyRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateStrategyMethodDesc, _CreateStrategyEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteStrategyMethodDesc, _DeleteStrategyEndpoint(srv))
	s.RegisterUnaryEndpoint(_ExecuteStrategyMethodDesc, _ExecuteStrategyEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetStrategyMethodDesc, _GetStrategyEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListStrategyMethodDesc, _ListStrategyEndpoint(srv))
	s.RegisterUnaryEndpoint(_PushMessageMethodDesc, _PushMessageEndpoint(srv))
	s.RegisterUnaryEndpoint(_ToggleStrategyMethodDesc, _ToggleStrategyEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateStrategyMethodDesc, _UpdateStrategyEndpoint(srv))
}

// Method Description
var _CreateStrategyMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.resource_manage.datafilter.CreateStrategy",
		Version: "1.0",
	},
	ServiceName:  "datafilter.rpc",
	MethodName:   "CreateStrategy",
	RequestType:  (*resource_manage.FilterStrategy)(nil),
	ResponseType: (*CreateStrategyResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/filter/strategy",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteStrategyMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.resource_manage.datafilter.DeleteStrategy",
		Version: "1.0",
	},
	ServiceName:  "datafilter.rpc",
	MethodName:   "DeleteStrategy",
	RequestType:  (*DeleteStrategyRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/filter/strategy/:instanceId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ExecuteStrategyMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.resource_manage.datafilter.ExecuteStrategy",
		Version: "1.0",
	},
	ServiceName:  "datafilter.rpc",
	MethodName:   "ExecuteStrategy",
	RequestType:  (*ExecuteStrategyRequest)(nil),
	ResponseType: (*ExecuteStrategyResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/execute/strategy",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetStrategyMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.resource_manage.datafilter.GetStrategy",
		Version: "1.0",
	},
	ServiceName:  "datafilter.rpc",
	MethodName:   "GetStrategy",
	RequestType:  (*GetStrategyRequest)(nil),
	ResponseType: (*resource_manage.FilterStrategy)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/filter/strategy/:instanceId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListStrategyMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.resource_manage.datafilter.ListStrategy",
		Version: "1.0",
	},
	ServiceName:  "datafilter.rpc",
	MethodName:   "ListStrategy",
	RequestType:  (*ListStrategyRequest)(nil),
	ResponseType: (*ListStrategyResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/filter/strategy/search",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _PushMessageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.resource_manage.datafilter.PushMessage",
		Version: "1.0",
	},
	ServiceName:  "datafilter.rpc",
	MethodName:   "PushMessage",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/filter/message",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ToggleStrategyMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.resource_manage.datafilter.ToggleStrategy",
		Version: "1.0",
	},
	ServiceName:  "datafilter.rpc",
	MethodName:   "ToggleStrategy",
	RequestType:  (*ToggleStrategyRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/filter/strategy-enable/:instanceId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateStrategyMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.resource_manage.datafilter.UpdateStrategy",
		Version: "1.0",
	},
	ServiceName:  "datafilter.rpc",
	MethodName:   "UpdateStrategy",
	RequestType:  (*UpdateStrategyRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/filter/strategy/:instanceId",
		},
		Body:         "strategy",
		ResponseBody: "data",
	},
}
