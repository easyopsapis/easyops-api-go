// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package cmdb_approve

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for cmdb_approve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	GetApproveCount(ctx context.Context, in *GetApproveCountRequest) (*GetApproveCountResponse, error)
	GetApproveObjectList(ctx context.Context, in *GetApproveObjectListRequest) (*GetApproveObjectListResponse, error)
	GetHistoryApproverList(ctx context.Context, in *GetHistoryApproverListRequest) (*GetHistoryApproverListResponse, error)
	GetHistoryObjectList(ctx context.Context, in *GetHistoryObjectListRequest) (*GetHistoryObjectListResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) GetApproveCount(ctx context.Context, in *GetApproveCountRequest) (*GetApproveCountResponse, error) {
	out := new(GetApproveCountResponse)
	err := c.c.Invoke(ctx, _GetApproveCountContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetApproveObjectList(ctx context.Context, in *GetApproveObjectListRequest) (*GetApproveObjectListResponse, error) {
	out := new(GetApproveObjectListResponse)
	err := c.c.Invoke(ctx, _GetApproveObjectListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetHistoryApproverList(ctx context.Context, in *GetHistoryApproverListRequest) (*GetHistoryApproverListResponse, error) {
	out := new(GetHistoryApproverListResponse)
	err := c.c.Invoke(ctx, _GetHistoryApproverListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetHistoryObjectList(ctx context.Context, in *GetHistoryObjectListRequest) (*GetHistoryObjectListResponse, error) {
	out := new(GetHistoryObjectListResponse)
	err := c.c.Invoke(ctx, _GetHistoryObjectListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for cmdb_approve service.
type Service interface {
	GetApproveCount(context.Context, *GetApproveCountRequest) (*GetApproveCountResponse, error)
	GetApproveObjectList(context.Context, *GetApproveObjectListRequest) (*GetApproveObjectListResponse, error)
	GetHistoryApproverList(context.Context, *GetHistoryApproverListRequest) (*GetHistoryApproverListResponse, error)
	GetHistoryObjectList(context.Context, *GetHistoryObjectListRequest) (*GetHistoryObjectListResponse, error)
}

func _GetApproveCountEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetApproveCount(ctx, req.(*GetApproveCountRequest))
	}
}

func _GetApproveObjectListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetApproveObjectList(ctx, req.(*GetApproveObjectListRequest))
	}
}

func _GetHistoryApproverListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetHistoryApproverList(ctx, req.(*GetHistoryApproverListRequest))
	}
}

func _GetHistoryObjectListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetHistoryObjectList(ctx, req.(*GetHistoryObjectListRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_GetApproveCountContract, _GetApproveCountEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetApproveObjectListContract, _GetApproveObjectListEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetHistoryApproverListContract, _GetHistoryApproverListEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetHistoryObjectListContract, _GetHistoryObjectListEndpoint(srv))
}

// API Contract
var _GetApproveCountContract = &getApproveCountContract{}

type getApproveCountContract struct{}

func (*getApproveCountContract) ServiceName() string          { return "cmdb_approve.rpc" }
func (*getApproveCountContract) MethodName() string           { return "GetApproveCount" }
func (*getApproveCountContract) RequestMessage() interface{}  { return new(GetApproveCountRequest) }
func (*getApproveCountContract) ResponseMessage() interface{} { return new(GetApproveCountRequest) }
func (*getApproveCountContract) ContractName() string {
	return "easyops.api.resource_manage.cmdb_approve.GetApproveCount"
}
func (*getApproveCountContract) ContractVersion() string   { return "1.0" }
func (*getApproveCountContract) Pattern() (string, string) { return "GET", "/api/v1/approve/count" }
func (*getApproveCountContract) Body() string              { return "" }

var _GetApproveObjectListContract = &getApproveObjectListContract{}

type getApproveObjectListContract struct{}

func (*getApproveObjectListContract) ServiceName() string { return "cmdb_approve.rpc" }
func (*getApproveObjectListContract) MethodName() string  { return "GetApproveObjectList" }
func (*getApproveObjectListContract) RequestMessage() interface{} {
	return new(GetApproveObjectListRequest)
}
func (*getApproveObjectListContract) ResponseMessage() interface{} {
	return new(GetApproveObjectListRequest)
}
func (*getApproveObjectListContract) ContractName() string {
	return "easyops.api.resource_manage.cmdb_approve.GetApproveObjectList"
}
func (*getApproveObjectListContract) ContractVersion() string { return "1.0" }
func (*getApproveObjectListContract) Pattern() (string, string) {
	return "POST", "/api/v1/approve/object/list"
}
func (*getApproveObjectListContract) Body() string { return "" }

var _GetHistoryApproverListContract = &getHistoryApproverListContract{}

type getHistoryApproverListContract struct{}

func (*getHistoryApproverListContract) ServiceName() string { return "cmdb_approve.rpc" }
func (*getHistoryApproverListContract) MethodName() string  { return "GetHistoryApproverList" }
func (*getHistoryApproverListContract) RequestMessage() interface{} {
	return new(GetHistoryApproverListRequest)
}
func (*getHistoryApproverListContract) ResponseMessage() interface{} {
	return new(GetHistoryApproverListRequest)
}
func (*getHistoryApproverListContract) ContractName() string {
	return "easyops.api.resource_manage.cmdb_approve.GetHistoryApproverList"
}
func (*getHistoryApproverListContract) ContractVersion() string { return "1.0" }
func (*getHistoryApproverListContract) Pattern() (string, string) {
	return "POST", "/api/v1/history/approver/list"
}
func (*getHistoryApproverListContract) Body() string { return "" }

var _GetHistoryObjectListContract = &getHistoryObjectListContract{}

type getHistoryObjectListContract struct{}

func (*getHistoryObjectListContract) ServiceName() string { return "cmdb_approve.rpc" }
func (*getHistoryObjectListContract) MethodName() string  { return "GetHistoryObjectList" }
func (*getHistoryObjectListContract) RequestMessage() interface{} {
	return new(GetHistoryObjectListRequest)
}
func (*getHistoryObjectListContract) ResponseMessage() interface{} {
	return new(GetHistoryObjectListRequest)
}
func (*getHistoryObjectListContract) ContractName() string {
	return "easyops.api.resource_manage.cmdb_approve.GetHistoryObjectList"
}
func (*getHistoryObjectListContract) ContractVersion() string { return "1.0" }
func (*getHistoryObjectListContract) Pattern() (string, string) {
	return "POST", "/api/v1/history/object/list"
}
func (*getHistoryObjectListContract) Body() string { return "" }
