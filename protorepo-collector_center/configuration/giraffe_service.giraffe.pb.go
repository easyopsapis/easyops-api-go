// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package configuration

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	collector_center "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/collector_center"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateConfiguration(ctx context.Context, in *CreateConfigurationRequest) (*CreateConfigurationResponse, error)
	DeleteConfiguration(ctx context.Context, in *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error)
	DetailConfiguration(ctx context.Context, in *DetailConfigurationRequest) (*collector_center.Configuration, error)
	ListConfiguration(ctx context.Context, in *ListConfigurationRequest) (*ListConfigurationResponse, error)
	UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateConfiguration(ctx context.Context, in *CreateConfigurationRequest) (*CreateConfigurationResponse, error) {
	out := new(CreateConfigurationResponse)
	err := c.c.Invoke(ctx, _CreateConfigurationMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteConfiguration(ctx context.Context, in *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error) {
	out := new(DeleteConfigurationResponse)
	err := c.c.Invoke(ctx, _DeleteConfigurationMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DetailConfiguration(ctx context.Context, in *DetailConfigurationRequest) (*collector_center.Configuration, error) {
	out := new(collector_center.Configuration)
	err := c.c.Invoke(ctx, _DetailConfigurationMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListConfiguration(ctx context.Context, in *ListConfigurationRequest) (*ListConfigurationResponse, error) {
	out := new(ListConfigurationResponse)
	err := c.c.Invoke(ctx, _ListConfigurationMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error) {
	out := new(UpdateConfigurationResponse)
	err := c.c.Invoke(ctx, _UpdateConfigurationMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for configuration service.
type Service interface {
	CreateConfiguration(context.Context, *CreateConfigurationRequest) (*CreateConfigurationResponse, error)
	DeleteConfiguration(context.Context, *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error)
	DetailConfiguration(context.Context, *DetailConfigurationRequest) (*collector_center.Configuration, error)
	ListConfiguration(context.Context, *ListConfigurationRequest) (*ListConfigurationResponse, error)
	UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error)
}

func _CreateConfigurationEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateConfiguration(ctx, req.(*CreateConfigurationRequest))
	}
}

func _DeleteConfigurationEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteConfiguration(ctx, req.(*DeleteConfigurationRequest))
	}
}

func _DetailConfigurationEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DetailConfiguration(ctx, req.(*DetailConfigurationRequest))
	}
}

func _ListConfigurationEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListConfiguration(ctx, req.(*ListConfigurationRequest))
	}
}

func _UpdateConfigurationEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateConfiguration(ctx, req.(*UpdateConfigurationRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateConfigurationMethodDesc, _CreateConfigurationEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteConfigurationMethodDesc, _DeleteConfigurationEndpoint(srv))
	s.RegisterUnaryEndpoint(_DetailConfigurationMethodDesc, _DetailConfigurationEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListConfigurationMethodDesc, _ListConfigurationEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateConfigurationMethodDesc, _UpdateConfigurationEndpoint(srv))
}

// Method Description
var _CreateConfigurationMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.collector_center.configuration.CreateConfiguration",
		Version: "1.0",
	},
	ServiceName:  "configuration.rpc",
	MethodName:   "CreateConfiguration",
	RequestType:  (*CreateConfigurationRequest)(nil),
	ResponseType: (*CreateConfigurationResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/configuration",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteConfigurationMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.collector_center.configuration.DeleteConfiguration",
		Version: "1.0",
	},
	ServiceName:  "configuration.rpc",
	MethodName:   "DeleteConfiguration",
	RequestType:  (*DeleteConfigurationRequest)(nil),
	ResponseType: (*DeleteConfigurationResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/configuration/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DetailConfigurationMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.collector_center.configuration.DetailConfiguration",
		Version: "1.0",
	},
	ServiceName:  "configuration.rpc",
	MethodName:   "DetailConfiguration",
	RequestType:  (*DetailConfigurationRequest)(nil),
	ResponseType: (*collector_center.Configuration)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/configuration/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListConfigurationMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.collector_center.configuration.ListConfiguration",
		Version: "1.0",
	},
	ServiceName:  "configuration.rpc",
	MethodName:   "ListConfiguration",
	RequestType:  (*ListConfigurationRequest)(nil),
	ResponseType: (*ListConfigurationResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/configuration",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateConfigurationMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.collector_center.configuration.UpdateConfiguration",
		Version: "1.0",
	},
	ServiceName:  "configuration.rpc",
	MethodName:   "UpdateConfiguration",
	RequestType:  (*UpdateConfigurationRequest)(nil),
	ResponseType: (*UpdateConfigurationResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/configuration/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
