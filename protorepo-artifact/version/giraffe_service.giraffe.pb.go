// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package version

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	artifact "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/artifact"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for version service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	BatchDeleteVersions(ctx context.Context, in *BatchDeleteVersionsRequest) (*types.Empty, error)
	CreateVersionWithSign(ctx context.Context, in *CreateVersionWithSignRequest) (*artifact.Version, error)
	DeleteVersion(ctx context.Context, in *DeleteVersionRequest) (*DeleteVersionResponse, error)
	GetCleanVersionList(ctx context.Context, in *GetCleanVersionListRequest) (*GetCleanVersionListResponse, error)
	GetVersionDetail(ctx context.Context, in *GetVersionDetailRequest) (*GetVersionDetailResponse, error)
	GetVersionList(ctx context.Context, in *GetVersionListRequest) (*GetVersionListResponse, error)
	GetVersionPermissionByIds(ctx context.Context, in *GetVersionPermissionByIdsRequest) (*GetVersionPermissionByIdsResponse, error)
	GetVersionPermissionInfo(ctx context.Context, in *GetVersionPermissionInfoRequest) (*artifact.WhitePermissionUser, error)
	Update(ctx context.Context, in *UpdateRequest) (*artifact.Version, error)
	UpdateVersionEnvType(ctx context.Context, in *UpdateVersionEnvTypeRequest) (*artifact.Version, error)
	UpdateVersionPermissionUsers(ctx context.Context, in *UpdateVersionPermissionUsersRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) BatchDeleteVersions(ctx context.Context, in *BatchDeleteVersionsRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _BatchDeleteVersionsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateVersionWithSign(ctx context.Context, in *CreateVersionWithSignRequest) (*artifact.Version, error) {
	out := new(artifact.Version)
	err := c.c.Invoke(ctx, _CreateVersionWithSignMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteVersion(ctx context.Context, in *DeleteVersionRequest) (*DeleteVersionResponse, error) {
	out := new(DeleteVersionResponse)
	err := c.c.Invoke(ctx, _DeleteVersionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetCleanVersionList(ctx context.Context, in *GetCleanVersionListRequest) (*GetCleanVersionListResponse, error) {
	out := new(GetCleanVersionListResponse)
	err := c.c.Invoke(ctx, _GetCleanVersionListMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetVersionDetail(ctx context.Context, in *GetVersionDetailRequest) (*GetVersionDetailResponse, error) {
	out := new(GetVersionDetailResponse)
	err := c.c.Invoke(ctx, _GetVersionDetailMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetVersionList(ctx context.Context, in *GetVersionListRequest) (*GetVersionListResponse, error) {
	out := new(GetVersionListResponse)
	err := c.c.Invoke(ctx, _GetVersionListMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetVersionPermissionByIds(ctx context.Context, in *GetVersionPermissionByIdsRequest) (*GetVersionPermissionByIdsResponse, error) {
	out := new(GetVersionPermissionByIdsResponse)
	err := c.c.Invoke(ctx, _GetVersionPermissionByIdsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetVersionPermissionInfo(ctx context.Context, in *GetVersionPermissionInfoRequest) (*artifact.WhitePermissionUser, error) {
	out := new(artifact.WhitePermissionUser)
	err := c.c.Invoke(ctx, _GetVersionPermissionInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Update(ctx context.Context, in *UpdateRequest) (*artifact.Version, error) {
	out := new(artifact.Version)
	err := c.c.Invoke(ctx, _UpdateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateVersionEnvType(ctx context.Context, in *UpdateVersionEnvTypeRequest) (*artifact.Version, error) {
	out := new(artifact.Version)
	err := c.c.Invoke(ctx, _UpdateVersionEnvTypeMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateVersionPermissionUsers(ctx context.Context, in *UpdateVersionPermissionUsersRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateVersionPermissionUsersMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for version service.
type Service interface {
	BatchDeleteVersions(context.Context, *BatchDeleteVersionsRequest) (*types.Empty, error)
	CreateVersionWithSign(context.Context, *CreateVersionWithSignRequest) (*artifact.Version, error)
	DeleteVersion(context.Context, *DeleteVersionRequest) (*DeleteVersionResponse, error)
	GetCleanVersionList(context.Context, *GetCleanVersionListRequest) (*GetCleanVersionListResponse, error)
	GetVersionDetail(context.Context, *GetVersionDetailRequest) (*GetVersionDetailResponse, error)
	GetVersionList(context.Context, *GetVersionListRequest) (*GetVersionListResponse, error)
	GetVersionPermissionByIds(context.Context, *GetVersionPermissionByIdsRequest) (*GetVersionPermissionByIdsResponse, error)
	GetVersionPermissionInfo(context.Context, *GetVersionPermissionInfoRequest) (*artifact.WhitePermissionUser, error)
	Update(context.Context, *UpdateRequest) (*artifact.Version, error)
	UpdateVersionEnvType(context.Context, *UpdateVersionEnvTypeRequest) (*artifact.Version, error)
	UpdateVersionPermissionUsers(context.Context, *UpdateVersionPermissionUsersRequest) (*types.Empty, error)
}

func _BatchDeleteVersionsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.BatchDeleteVersions(ctx, req.(*BatchDeleteVersionsRequest))
	}
}

func _CreateVersionWithSignEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateVersionWithSign(ctx, req.(*CreateVersionWithSignRequest))
	}
}

func _DeleteVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteVersion(ctx, req.(*DeleteVersionRequest))
	}
}

func _GetCleanVersionListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetCleanVersionList(ctx, req.(*GetCleanVersionListRequest))
	}
}

func _GetVersionDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetVersionDetail(ctx, req.(*GetVersionDetailRequest))
	}
}

func _GetVersionListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetVersionList(ctx, req.(*GetVersionListRequest))
	}
}

func _GetVersionPermissionByIdsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetVersionPermissionByIds(ctx, req.(*GetVersionPermissionByIdsRequest))
	}
}

func _GetVersionPermissionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetVersionPermissionInfo(ctx, req.(*GetVersionPermissionInfoRequest))
	}
}

func _UpdateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*UpdateRequest))
	}
}

func _UpdateVersionEnvTypeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateVersionEnvType(ctx, req.(*UpdateVersionEnvTypeRequest))
	}
}

func _UpdateVersionPermissionUsersEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateVersionPermissionUsers(ctx, req.(*UpdateVersionPermissionUsersRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_BatchDeleteVersionsMethodDesc, _BatchDeleteVersionsEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateVersionWithSignMethodDesc, _CreateVersionWithSignEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteVersionMethodDesc, _DeleteVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetCleanVersionListMethodDesc, _GetCleanVersionListEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetVersionDetailMethodDesc, _GetVersionDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetVersionListMethodDesc, _GetVersionListEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetVersionPermissionByIdsMethodDesc, _GetVersionPermissionByIdsEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetVersionPermissionInfoMethodDesc, _GetVersionPermissionInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateMethodDesc, _UpdateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateVersionEnvTypeMethodDesc, _UpdateVersionEnvTypeEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateVersionPermissionUsersMethodDesc, _UpdateVersionPermissionUsersEndpoint(srv))
}

// Method Description
var _BatchDeleteVersionsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.BatchDeleteVersions",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "BatchDeleteVersions",
	RequestType:  (*BatchDeleteVersionsRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/versions/:packageId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateVersionWithSignMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.CreateVersionWithSign",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "CreateVersionWithSign",
	RequestType:  (*CreateVersionWithSignRequest)(nil),
	ResponseType: (*artifact.Version)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/version/sign",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteVersionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.DeleteVersion",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "DeleteVersion",
	RequestType:  (*DeleteVersionRequest)(nil),
	ResponseType: (*DeleteVersionResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/v2/version/:packageId/:versionId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetCleanVersionListMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.GetCleanVersionList",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "GetCleanVersionList",
	RequestType:  (*GetCleanVersionListRequest)(nil),
	ResponseType: (*GetCleanVersionListResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "version/clean/list",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetVersionDetailMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.GetVersionDetail",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "GetVersionDetail",
	RequestType:  (*GetVersionDetailRequest)(nil),
	ResponseType: (*GetVersionDetailResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/version/:versionId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetVersionListMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.GetVersionList",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "GetVersionList",
	RequestType:  (*GetVersionListRequest)(nil),
	ResponseType: (*GetVersionListResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/version/list",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetVersionPermissionByIdsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.GetVersionPermissionByIds",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "GetVersionPermissionByIds",
	RequestType:  (*GetVersionPermissionByIdsRequest)(nil),
	ResponseType: (*GetVersionPermissionByIdsResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/permission/versions/:packageId",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _GetVersionPermissionInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.GetVersionPermissionInfo",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "GetVersionPermissionInfo",
	RequestType:  (*GetVersionPermissionInfoRequest)(nil),
	ResponseType: (*artifact.WhitePermissionUser)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/permission/version/:packageId/:versionId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.Update",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "Update",
	RequestType:  (*UpdateRequest)(nil),
	ResponseType: (*artifact.Version)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/version/:versionId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateVersionEnvTypeMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.UpdateVersionEnvType",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "UpdateVersionEnvType",
	RequestType:  (*UpdateVersionEnvTypeRequest)(nil),
	ResponseType: (*artifact.Version)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/version_env_type",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateVersionPermissionUsersMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.version.UpdateVersionPermissionUsers",
		Version: "1.0",
	},
	ServiceName:  "version.rpc",
	MethodName:   "UpdateVersionPermissionUsers",
	RequestType:  (*UpdateVersionPermissionUsersRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/permission/version",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
