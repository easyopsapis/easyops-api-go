// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package version

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	artifact "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/artifact"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for version service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateVersionWithSign(ctx context.Context, in *CreateVersionWithSignRequest) (*artifact.Version, error)
	DeleteVersion(ctx context.Context, in *DeleteVersionRequest) (*DeleteVersionResponse, error)
	GetVersionDetail(ctx context.Context, in *GetVersionDetailRequest) (*artifact.Version, error)
	GetVersionList(ctx context.Context, in *GetVersionListRequest) (*GetVersionListResponse, error)
	GetVersionPermissionInfo(ctx context.Context, in *GetVersionPermissionInfoRequest) (*artifact.WhitePermissionUser, error)
	Update(ctx context.Context, in *UpdateRequest) (*artifact.Version, error)
	UpdateVersionEnvType(ctx context.Context, in *UpdateVersionEnvTypeRequest) (*artifact.Version, error)
	UpdateVersionPermissionUsers(ctx context.Context, in *UpdateVersionPermissionUsersRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateVersionWithSign(ctx context.Context, in *CreateVersionWithSignRequest) (*artifact.Version, error) {
	out := new(artifact.Version)
	err := c.c.Invoke(ctx, _CreateVersionWithSignContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteVersion(ctx context.Context, in *DeleteVersionRequest) (*DeleteVersionResponse, error) {
	out := new(DeleteVersionResponse)
	err := c.c.Invoke(ctx, _DeleteVersionContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetVersionDetail(ctx context.Context, in *GetVersionDetailRequest) (*artifact.Version, error) {
	out := new(artifact.Version)
	err := c.c.Invoke(ctx, _GetVersionDetailContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetVersionList(ctx context.Context, in *GetVersionListRequest) (*GetVersionListResponse, error) {
	out := new(GetVersionListResponse)
	err := c.c.Invoke(ctx, _GetVersionListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetVersionPermissionInfo(ctx context.Context, in *GetVersionPermissionInfoRequest) (*artifact.WhitePermissionUser, error) {
	out := new(artifact.WhitePermissionUser)
	err := c.c.Invoke(ctx, _GetVersionPermissionInfoContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Update(ctx context.Context, in *UpdateRequest) (*artifact.Version, error) {
	out := new(artifact.Version)
	err := c.c.Invoke(ctx, _UpdateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateVersionEnvType(ctx context.Context, in *UpdateVersionEnvTypeRequest) (*artifact.Version, error) {
	out := new(artifact.Version)
	err := c.c.Invoke(ctx, _UpdateVersionEnvTypeContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateVersionPermissionUsers(ctx context.Context, in *UpdateVersionPermissionUsersRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateVersionPermissionUsersContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for version service.
type Service interface {
	CreateVersionWithSign(context.Context, *CreateVersionWithSignRequest) (*artifact.Version, error)
	DeleteVersion(context.Context, *DeleteVersionRequest) (*DeleteVersionResponse, error)
	GetVersionDetail(context.Context, *GetVersionDetailRequest) (*artifact.Version, error)
	GetVersionList(context.Context, *GetVersionListRequest) (*GetVersionListResponse, error)
	GetVersionPermissionInfo(context.Context, *GetVersionPermissionInfoRequest) (*artifact.WhitePermissionUser, error)
	Update(context.Context, *UpdateRequest) (*artifact.Version, error)
	UpdateVersionEnvType(context.Context, *UpdateVersionEnvTypeRequest) (*artifact.Version, error)
	UpdateVersionPermissionUsers(context.Context, *UpdateVersionPermissionUsersRequest) (*types.Empty, error)
}

func _CreateVersionWithSignEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateVersionWithSign(ctx, req.(*CreateVersionWithSignRequest))
	}
}

func _DeleteVersionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteVersion(ctx, req.(*DeleteVersionRequest))
	}
}

func _GetVersionDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetVersionDetail(ctx, req.(*GetVersionDetailRequest))
	}
}

func _GetVersionListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetVersionList(ctx, req.(*GetVersionListRequest))
	}
}

func _GetVersionPermissionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetVersionPermissionInfo(ctx, req.(*GetVersionPermissionInfoRequest))
	}
}

func _UpdateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*UpdateRequest))
	}
}

func _UpdateVersionEnvTypeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateVersionEnvType(ctx, req.(*UpdateVersionEnvTypeRequest))
	}
}

func _UpdateVersionPermissionUsersEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateVersionPermissionUsers(ctx, req.(*UpdateVersionPermissionUsersRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateVersionWithSignContract, _CreateVersionWithSignEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteVersionContract, _DeleteVersionEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetVersionDetailContract, _GetVersionDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetVersionListContract, _GetVersionListEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetVersionPermissionInfoContract, _GetVersionPermissionInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateContract, _UpdateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateVersionEnvTypeContract, _UpdateVersionEnvTypeEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateVersionPermissionUsersContract, _UpdateVersionPermissionUsersEndpoint(srv))
}

// API Contract
var _CreateVersionWithSignContract = &createVersionWithSignContract{}

type createVersionWithSignContract struct{}

func (*createVersionWithSignContract) ServiceName() string { return "version.rpc" }
func (*createVersionWithSignContract) MethodName() string  { return "CreateVersionWithSign" }
func (*createVersionWithSignContract) RequestMessage() interface{} {
	return new(CreateVersionWithSignRequest)
}
func (*createVersionWithSignContract) ResponseMessage() interface{} {
	return new(CreateVersionWithSignRequest)
}
func (*createVersionWithSignContract) ContractName() string {
	return "easyops.api.artifact.version.CreateVersionWithSign"
}
func (*createVersionWithSignContract) ContractVersion() string   { return "1.0" }
func (*createVersionWithSignContract) Pattern() (string, string) { return "POST", "/version/sign" }
func (*createVersionWithSignContract) Body() string              { return "" }

var _DeleteVersionContract = &deleteVersionContract{}

type deleteVersionContract struct{}

func (*deleteVersionContract) ServiceName() string          { return "version.rpc" }
func (*deleteVersionContract) MethodName() string           { return "DeleteVersion" }
func (*deleteVersionContract) RequestMessage() interface{}  { return new(DeleteVersionRequest) }
func (*deleteVersionContract) ResponseMessage() interface{} { return new(DeleteVersionRequest) }
func (*deleteVersionContract) ContractName() string {
	return "easyops.api.artifact.version.DeleteVersion"
}
func (*deleteVersionContract) ContractVersion() string { return "1.0" }
func (*deleteVersionContract) Pattern() (string, string) {
	return "DELETE", "/v2/version/:packageId/:versionId"
}
func (*deleteVersionContract) Body() string { return "" }

var _GetVersionDetailContract = &getVersionDetailContract{}

type getVersionDetailContract struct{}

func (*getVersionDetailContract) ServiceName() string          { return "version.rpc" }
func (*getVersionDetailContract) MethodName() string           { return "GetVersionDetail" }
func (*getVersionDetailContract) RequestMessage() interface{}  { return new(GetVersionDetailRequest) }
func (*getVersionDetailContract) ResponseMessage() interface{} { return new(GetVersionDetailRequest) }
func (*getVersionDetailContract) ContractName() string {
	return "easyops.api.artifact.version.GetVersionDetail"
}
func (*getVersionDetailContract) ContractVersion() string   { return "1.0" }
func (*getVersionDetailContract) Pattern() (string, string) { return "GET", "/version/:versionId" }
func (*getVersionDetailContract) Body() string              { return "" }

var _GetVersionListContract = &getVersionListContract{}

type getVersionListContract struct{}

func (*getVersionListContract) ServiceName() string          { return "version.rpc" }
func (*getVersionListContract) MethodName() string           { return "GetVersionList" }
func (*getVersionListContract) RequestMessage() interface{}  { return new(GetVersionListRequest) }
func (*getVersionListContract) ResponseMessage() interface{} { return new(GetVersionListRequest) }
func (*getVersionListContract) ContractName() string {
	return "easyops.api.artifact.version.GetVersionList"
}
func (*getVersionListContract) ContractVersion() string   { return "1.0" }
func (*getVersionListContract) Pattern() (string, string) { return "GET", "/version/list" }
func (*getVersionListContract) Body() string              { return "" }

var _GetVersionPermissionInfoContract = &getVersionPermissionInfoContract{}

type getVersionPermissionInfoContract struct{}

func (*getVersionPermissionInfoContract) ServiceName() string { return "version.rpc" }
func (*getVersionPermissionInfoContract) MethodName() string  { return "GetVersionPermissionInfo" }
func (*getVersionPermissionInfoContract) RequestMessage() interface{} {
	return new(GetVersionPermissionInfoRequest)
}
func (*getVersionPermissionInfoContract) ResponseMessage() interface{} {
	return new(GetVersionPermissionInfoRequest)
}
func (*getVersionPermissionInfoContract) ContractName() string {
	return "easyops.api.artifact.version.GetVersionPermissionInfo"
}
func (*getVersionPermissionInfoContract) ContractVersion() string { return "1.0" }
func (*getVersionPermissionInfoContract) Pattern() (string, string) {
	return "GET", "/permission/version/:packageId/:versionId"
}
func (*getVersionPermissionInfoContract) Body() string { return "" }

var _UpdateContract = &updateContract{}

type updateContract struct{}

func (*updateContract) ServiceName() string          { return "version.rpc" }
func (*updateContract) MethodName() string           { return "Update" }
func (*updateContract) RequestMessage() interface{}  { return new(UpdateRequest) }
func (*updateContract) ResponseMessage() interface{} { return new(UpdateRequest) }
func (*updateContract) ContractName() string         { return "easyops.api.artifact.version.Update" }
func (*updateContract) ContractVersion() string      { return "1.0" }
func (*updateContract) Pattern() (string, string)    { return "PUT", "/version/:versionId" }
func (*updateContract) Body() string                 { return "" }

var _UpdateVersionEnvTypeContract = &updateVersionEnvTypeContract{}

type updateVersionEnvTypeContract struct{}

func (*updateVersionEnvTypeContract) ServiceName() string { return "version.rpc" }
func (*updateVersionEnvTypeContract) MethodName() string  { return "UpdateVersionEnvType" }
func (*updateVersionEnvTypeContract) RequestMessage() interface{} {
	return new(UpdateVersionEnvTypeRequest)
}
func (*updateVersionEnvTypeContract) ResponseMessage() interface{} {
	return new(UpdateVersionEnvTypeRequest)
}
func (*updateVersionEnvTypeContract) ContractName() string {
	return "easyops.api.artifact.version.UpdateVersionEnvType"
}
func (*updateVersionEnvTypeContract) ContractVersion() string   { return "1.0" }
func (*updateVersionEnvTypeContract) Pattern() (string, string) { return "PUT", "/version_env_type" }
func (*updateVersionEnvTypeContract) Body() string              { return "" }

var _UpdateVersionPermissionUsersContract = &updateVersionPermissionUsersContract{}

type updateVersionPermissionUsersContract struct{}

func (*updateVersionPermissionUsersContract) ServiceName() string { return "version.rpc" }
func (*updateVersionPermissionUsersContract) MethodName() string {
	return "UpdateVersionPermissionUsers"
}
func (*updateVersionPermissionUsersContract) RequestMessage() interface{} {
	return new(UpdateVersionPermissionUsersRequest)
}
func (*updateVersionPermissionUsersContract) ResponseMessage() interface{} {
	return new(UpdateVersionPermissionUsersRequest)
}
func (*updateVersionPermissionUsersContract) ContractName() string {
	return "easyops.api.artifact.version.UpdateVersionPermissionUsers"
}
func (*updateVersionPermissionUsersContract) ContractVersion() string { return "1.0" }
func (*updateVersionPermissionUsersContract) Pattern() (string, string) {
	return "POST", "/permission/version"
}
func (*updateVersionPermissionUsersContract) Body() string { return "" }
