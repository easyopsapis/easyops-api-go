// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package pkg

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	artifact "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/artifact"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for pkg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Create(ctx context.Context, in *CreateRequest) (*artifact.Package, error)
	DeletePackage(ctx context.Context, in *DeletePackageRequest) (*DeletePackageResponse, error)
	GetPackageDetail(ctx context.Context, in *GetPackageDetailRequest) (*GetPackageDetailResponse, error)
	GetPackagePermission(ctx context.Context, in *GetPackagePermissionRequest) (*artifact.Package, error)
	InitPackagePermission(ctx context.Context, in *types.Empty) (*types.Empty, error)
	Search(ctx context.Context, in *SearchRequest) (*SearchResponse, error)
	UpInsertGlobalVariables(ctx context.Context, in *UpInsertGlobalVariablesRequest) (*types.Empty, error)
	Update(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error)
	UpdatePackagePermission(ctx context.Context, in *UpdatePackagePermissionRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Create(ctx context.Context, in *CreateRequest) (*artifact.Package, error) {
	out := new(artifact.Package)
	err := c.c.Invoke(ctx, _CreateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePackage(ctx context.Context, in *DeletePackageRequest) (*DeletePackageResponse, error) {
	out := new(DeletePackageResponse)
	err := c.c.Invoke(ctx, _DeletePackageMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPackageDetail(ctx context.Context, in *GetPackageDetailRequest) (*GetPackageDetailResponse, error) {
	out := new(GetPackageDetailResponse)
	err := c.c.Invoke(ctx, _GetPackageDetailMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPackagePermission(ctx context.Context, in *GetPackagePermissionRequest) (*artifact.Package, error) {
	out := new(artifact.Package)
	err := c.c.Invoke(ctx, _GetPackagePermissionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InitPackagePermission(ctx context.Context, in *types.Empty) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _InitPackagePermissionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Search(ctx context.Context, in *SearchRequest) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.c.Invoke(ctx, _SearchMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpInsertGlobalVariables(ctx context.Context, in *UpInsertGlobalVariablesRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpInsertGlobalVariablesMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Update(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.c.Invoke(ctx, _UpdateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePackagePermission(ctx context.Context, in *UpdatePackagePermissionRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdatePackagePermissionMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for pkg service.
type Service interface {
	Create(context.Context, *CreateRequest) (*artifact.Package, error)
	DeletePackage(context.Context, *DeletePackageRequest) (*DeletePackageResponse, error)
	GetPackageDetail(context.Context, *GetPackageDetailRequest) (*GetPackageDetailResponse, error)
	GetPackagePermission(context.Context, *GetPackagePermissionRequest) (*artifact.Package, error)
	InitPackagePermission(context.Context, *types.Empty) (*types.Empty, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	UpInsertGlobalVariables(context.Context, *UpInsertGlobalVariablesRequest) (*types.Empty, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	UpdatePackagePermission(context.Context, *UpdatePackagePermissionRequest) (*types.Empty, error)
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*CreateRequest))
	}
}

func _DeletePackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeletePackage(ctx, req.(*DeletePackageRequest))
	}
}

func _GetPackageDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPackageDetail(ctx, req.(*GetPackageDetailRequest))
	}
}

func _GetPackagePermissionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPackagePermission(ctx, req.(*GetPackagePermissionRequest))
	}
}

func _InitPackagePermissionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InitPackagePermission(ctx, req.(*types.Empty))
	}
}

func _SearchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Search(ctx, req.(*SearchRequest))
	}
}

func _UpInsertGlobalVariablesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpInsertGlobalVariables(ctx, req.(*UpInsertGlobalVariablesRequest))
	}
}

func _UpdateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*UpdateRequest))
	}
}

func _UpdatePackagePermissionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePackagePermission(ctx, req.(*UpdatePackagePermissionRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateMethodDesc, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeletePackageMethodDesc, _DeletePackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPackageDetailMethodDesc, _GetPackageDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPackagePermissionMethodDesc, _GetPackagePermissionEndpoint(srv))
	s.RegisterUnaryEndpoint(_InitPackagePermissionMethodDesc, _InitPackagePermissionEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchMethodDesc, _SearchEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpInsertGlobalVariablesMethodDesc, _UpInsertGlobalVariablesEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateMethodDesc, _UpdateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdatePackagePermissionMethodDesc, _UpdatePackagePermissionEndpoint(srv))
}

// Method Description
var _CreateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.Create",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "Create",
	RequestType:  (*CreateRequest)(nil),
	ResponseType: (*artifact.Package)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/package",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeletePackageMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.DeletePackage",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "DeletePackage",
	RequestType:  (*DeletePackageRequest)(nil),
	ResponseType: (*DeletePackageResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/package/package/:packageId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetPackageDetailMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.GetPackageDetail",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "GetPackageDetail",
	RequestType:  (*GetPackageDetailRequest)(nil),
	ResponseType: (*GetPackageDetailResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/package/:packageId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetPackagePermissionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.GetPackagePermission",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "GetPackagePermission",
	RequestType:  (*GetPackagePermissionRequest)(nil),
	ResponseType: (*artifact.Package)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/permission/package/:packageId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _InitPackagePermissionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.InitPackagePermission",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "InitPackagePermission",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/operation/InitPermissionDb",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _SearchMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.Search",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "Search",
	RequestType:  (*SearchRequest)(nil),
	ResponseType: (*SearchResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/package/search",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpInsertGlobalVariablesMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.UpInsertGlobalVariables",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "UpInsertGlobalVariables",
	RequestType:  (*UpInsertGlobalVariablesRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/userGlobalVars",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.Update",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "Update",
	RequestType:  (*UpdateRequest)(nil),
	ResponseType: (*UpdateResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/package/:packageId",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _UpdatePackagePermissionMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.artifact.pkg.UpdatePackagePermission",
		Version: "1.0",
	},
	ServiceName:  "pkg.rpc",
	MethodName:   "UpdatePackagePermission",
	RequestType:  (*UpdatePackagePermissionRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/permission/package",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
