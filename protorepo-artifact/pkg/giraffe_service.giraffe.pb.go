// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package pkg

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	artifact "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/artifact"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for pkg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Create(ctx context.Context, in *CreateRequest) (*artifact.Package, error)
	DeletePackage(ctx context.Context, in *DeletePackageRequest) (*DeletePackageResponse, error)
	GetPackageDetail(ctx context.Context, in *GetPackageDetailRequest) (*GetPackageDetailResponse, error)
	GetPackagePermission(ctx context.Context, in *GetPackagePermissionRequest) (*artifact.Package, error)
	InitPackagePermission(ctx context.Context, in *types.Empty) (*types.Empty, error)
	Search(ctx context.Context, in *SearchRequest) (*SearchResponse, error)
	UpInsertGlobalVariables(ctx context.Context, in *UpInsertGlobalVariablesRequest) (*types.Empty, error)
	Update(ctx context.Context, in *UpdateRequest) (*artifact.Package, error)
	UpdatePackagePermission(ctx context.Context, in *UpdatePackagePermissionRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Create(ctx context.Context, in *CreateRequest) (*artifact.Package, error) {
	out := new(artifact.Package)
	err := c.c.Invoke(ctx, _CreateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePackage(ctx context.Context, in *DeletePackageRequest) (*DeletePackageResponse, error) {
	out := new(DeletePackageResponse)
	err := c.c.Invoke(ctx, _DeletePackageContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPackageDetail(ctx context.Context, in *GetPackageDetailRequest) (*GetPackageDetailResponse, error) {
	out := new(GetPackageDetailResponse)
	err := c.c.Invoke(ctx, _GetPackageDetailContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetPackagePermission(ctx context.Context, in *GetPackagePermissionRequest) (*artifact.Package, error) {
	out := new(artifact.Package)
	err := c.c.Invoke(ctx, _GetPackagePermissionContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InitPackagePermission(ctx context.Context, in *types.Empty) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _InitPackagePermissionContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Search(ctx context.Context, in *SearchRequest) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.c.Invoke(ctx, _SearchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpInsertGlobalVariables(ctx context.Context, in *UpInsertGlobalVariablesRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpInsertGlobalVariablesContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Update(ctx context.Context, in *UpdateRequest) (*artifact.Package, error) {
	out := new(artifact.Package)
	err := c.c.Invoke(ctx, _UpdateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePackagePermission(ctx context.Context, in *UpdatePackagePermissionRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdatePackagePermissionContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for pkg service.
type Service interface {
	Create(context.Context, *CreateRequest) (*artifact.Package, error)
	DeletePackage(context.Context, *DeletePackageRequest) (*DeletePackageResponse, error)
	GetPackageDetail(context.Context, *GetPackageDetailRequest) (*GetPackageDetailResponse, error)
	GetPackagePermission(context.Context, *GetPackagePermissionRequest) (*artifact.Package, error)
	InitPackagePermission(context.Context, *types.Empty) (*types.Empty, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	UpInsertGlobalVariables(context.Context, *UpInsertGlobalVariablesRequest) (*types.Empty, error)
	Update(context.Context, *UpdateRequest) (*artifact.Package, error)
	UpdatePackagePermission(context.Context, *UpdatePackagePermissionRequest) (*types.Empty, error)
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*CreateRequest))
	}
}

func _DeletePackageEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeletePackage(ctx, req.(*DeletePackageRequest))
	}
}

func _GetPackageDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPackageDetail(ctx, req.(*GetPackageDetailRequest))
	}
}

func _GetPackagePermissionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPackagePermission(ctx, req.(*GetPackagePermissionRequest))
	}
}

func _InitPackagePermissionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InitPackagePermission(ctx, req.(*types.Empty))
	}
}

func _SearchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Search(ctx, req.(*SearchRequest))
	}
}

func _UpInsertGlobalVariablesEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpInsertGlobalVariables(ctx, req.(*UpInsertGlobalVariablesRequest))
	}
}

func _UpdateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*UpdateRequest))
	}
}

func _UpdatePackagePermissionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePackagePermission(ctx, req.(*UpdatePackagePermissionRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateContract, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeletePackageContract, _DeletePackageEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPackageDetailContract, _GetPackageDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetPackagePermissionContract, _GetPackagePermissionEndpoint(srv))
	s.RegisterUnaryEndpoint(_InitPackagePermissionContract, _InitPackagePermissionEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchContract, _SearchEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpInsertGlobalVariablesContract, _UpInsertGlobalVariablesEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateContract, _UpdateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdatePackagePermissionContract, _UpdatePackagePermissionEndpoint(srv))
}

// API Contract
var _CreateContract = &createContract{}

type createContract struct{}

func (*createContract) ServiceName() string          { return "pkg.rpc" }
func (*createContract) MethodName() string           { return "Create" }
func (*createContract) RequestMessage() interface{}  { return new(CreateRequest) }
func (*createContract) ResponseMessage() interface{} { return new(CreateRequest) }
func (*createContract) ContractName() string         { return "easyops.api.artifact.pkg.Create" }
func (*createContract) ContractVersion() string      { return "1.0" }
func (*createContract) Pattern() (string, string)    { return "POST", "/package" }
func (*createContract) Body() string                 { return "" }

var _DeletePackageContract = &deletePackageContract{}

type deletePackageContract struct{}

func (*deletePackageContract) ServiceName() string          { return "pkg.rpc" }
func (*deletePackageContract) MethodName() string           { return "DeletePackage" }
func (*deletePackageContract) RequestMessage() interface{}  { return new(DeletePackageRequest) }
func (*deletePackageContract) ResponseMessage() interface{} { return new(DeletePackageRequest) }
func (*deletePackageContract) ContractName() string         { return "easyops.api.artifact.pkg.DeletePackage" }
func (*deletePackageContract) ContractVersion() string      { return "1.0" }
func (*deletePackageContract) Pattern() (string, string) {
	return "DELETE", "/package/package/:packageId"
}
func (*deletePackageContract) Body() string { return "" }

var _GetPackageDetailContract = &getPackageDetailContract{}

type getPackageDetailContract struct{}

func (*getPackageDetailContract) ServiceName() string          { return "pkg.rpc" }
func (*getPackageDetailContract) MethodName() string           { return "GetPackageDetail" }
func (*getPackageDetailContract) RequestMessage() interface{}  { return new(GetPackageDetailRequest) }
func (*getPackageDetailContract) ResponseMessage() interface{} { return new(GetPackageDetailRequest) }
func (*getPackageDetailContract) ContractName() string {
	return "easyops.api.artifact.pkg.GetPackageDetail"
}
func (*getPackageDetailContract) ContractVersion() string   { return "1.0" }
func (*getPackageDetailContract) Pattern() (string, string) { return "GET", "/package/:packageId" }
func (*getPackageDetailContract) Body() string              { return "" }

var _GetPackagePermissionContract = &getPackagePermissionContract{}

type getPackagePermissionContract struct{}

func (*getPackagePermissionContract) ServiceName() string { return "pkg.rpc" }
func (*getPackagePermissionContract) MethodName() string  { return "GetPackagePermission" }
func (*getPackagePermissionContract) RequestMessage() interface{} {
	return new(GetPackagePermissionRequest)
}
func (*getPackagePermissionContract) ResponseMessage() interface{} {
	return new(GetPackagePermissionRequest)
}
func (*getPackagePermissionContract) ContractName() string {
	return "easyops.api.artifact.pkg.GetPackagePermission"
}
func (*getPackagePermissionContract) ContractVersion() string { return "1.0" }
func (*getPackagePermissionContract) Pattern() (string, string) {
	return "GET", "/permission/package/:packageId"
}
func (*getPackagePermissionContract) Body() string { return "" }

var _InitPackagePermissionContract = &initPackagePermissionContract{}

type initPackagePermissionContract struct{}

func (*initPackagePermissionContract) ServiceName() string          { return "pkg.rpc" }
func (*initPackagePermissionContract) MethodName() string           { return "InitPackagePermission" }
func (*initPackagePermissionContract) RequestMessage() interface{}  { return new(types.Empty) }
func (*initPackagePermissionContract) ResponseMessage() interface{} { return new(types.Empty) }
func (*initPackagePermissionContract) ContractName() string {
	return "easyops.api.artifact.pkg.InitPackagePermission"
}
func (*initPackagePermissionContract) ContractVersion() string { return "1.0" }
func (*initPackagePermissionContract) Pattern() (string, string) {
	return "POST", "/operation/InitPermissionDb"
}
func (*initPackagePermissionContract) Body() string { return "" }

var _SearchContract = &searchContract{}

type searchContract struct{}

func (*searchContract) ServiceName() string          { return "pkg.rpc" }
func (*searchContract) MethodName() string           { return "Search" }
func (*searchContract) RequestMessage() interface{}  { return new(SearchRequest) }
func (*searchContract) ResponseMessage() interface{} { return new(SearchRequest) }
func (*searchContract) ContractName() string         { return "easyops.api.artifact.pkg.Search" }
func (*searchContract) ContractVersion() string      { return "1.0" }
func (*searchContract) Pattern() (string, string)    { return "GET", "/package/search" }
func (*searchContract) Body() string                 { return "" }

var _UpInsertGlobalVariablesContract = &upInsertGlobalVariablesContract{}

type upInsertGlobalVariablesContract struct{}

func (*upInsertGlobalVariablesContract) ServiceName() string { return "pkg.rpc" }
func (*upInsertGlobalVariablesContract) MethodName() string  { return "UpInsertGlobalVariables" }
func (*upInsertGlobalVariablesContract) RequestMessage() interface{} {
	return new(UpInsertGlobalVariablesRequest)
}
func (*upInsertGlobalVariablesContract) ResponseMessage() interface{} {
	return new(UpInsertGlobalVariablesRequest)
}
func (*upInsertGlobalVariablesContract) ContractName() string {
	return "easyops.api.artifact.pkg.UpInsertGlobalVariables"
}
func (*upInsertGlobalVariablesContract) ContractVersion() string   { return "1.0" }
func (*upInsertGlobalVariablesContract) Pattern() (string, string) { return "POST", "/userGlobalVars" }
func (*upInsertGlobalVariablesContract) Body() string              { return "" }

var _UpdateContract = &updateContract{}

type updateContract struct{}

func (*updateContract) ServiceName() string          { return "pkg.rpc" }
func (*updateContract) MethodName() string           { return "Update" }
func (*updateContract) RequestMessage() interface{}  { return new(UpdateRequest) }
func (*updateContract) ResponseMessage() interface{} { return new(UpdateRequest) }
func (*updateContract) ContractName() string         { return "easyops.api.artifact.pkg.Update" }
func (*updateContract) ContractVersion() string      { return "1.0" }
func (*updateContract) Pattern() (string, string)    { return "PUT", "/package/:packageId" }
func (*updateContract) Body() string                 { return "" }

var _UpdatePackagePermissionContract = &updatePackagePermissionContract{}

type updatePackagePermissionContract struct{}

func (*updatePackagePermissionContract) ServiceName() string { return "pkg.rpc" }
func (*updatePackagePermissionContract) MethodName() string  { return "UpdatePackagePermission" }
func (*updatePackagePermissionContract) RequestMessage() interface{} {
	return new(UpdatePackagePermissionRequest)
}
func (*updatePackagePermissionContract) ResponseMessage() interface{} {
	return new(UpdatePackagePermissionRequest)
}
func (*updatePackagePermissionContract) ContractName() string {
	return "easyops.api.artifact.pkg.UpdatePackagePermission"
}
func (*updatePackagePermissionContract) ContractVersion() string { return "1.0" }
func (*updatePackagePermissionContract) Pattern() (string, string) {
	return "POST", "/permission/package"
}
func (*updatePackagePermissionContract) Body() string { return "" }
