// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package history

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	inspection "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/inspection"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for history service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	EasyCommandCallback(ctx context.Context, in *EasyCommandCallbackRequest) (*types.Empty, error)
	GetHistory(ctx context.Context, in *GetHistoryRequest) (*inspection.InspectionHistory, error)
	GetSourceData(ctx context.Context, in *GetSourceDataRequest) (*inspection.InspectionHistory, error)
	GetStatistics(ctx context.Context, in *GetStatisticsRequest) (*GetStatisticsResponse, error)
	ListHistory(ctx context.Context, in *ListHistoryRequest) (*ListHistoryResponse, error)
	ListAbnormalMetrics(ctx context.Context, in *ListAbnormalMetricsRequest) (*ListAbnormalMetricsResponse, error)
	SchedulerCallback(ctx context.Context, in *SchedulerCallbackRequest) (*SchedulerCallbackResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) EasyCommandCallback(ctx context.Context, in *EasyCommandCallbackRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _EasyCommandCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetHistory(ctx context.Context, in *GetHistoryRequest) (*inspection.InspectionHistory, error) {
	out := new(inspection.InspectionHistory)
	err := c.c.Invoke(ctx, _GetHistoryMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetSourceData(ctx context.Context, in *GetSourceDataRequest) (*inspection.InspectionHistory, error) {
	out := new(inspection.InspectionHistory)
	err := c.c.Invoke(ctx, _GetSourceDataMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetStatistics(ctx context.Context, in *GetStatisticsRequest) (*GetStatisticsResponse, error) {
	out := new(GetStatisticsResponse)
	err := c.c.Invoke(ctx, _GetStatisticsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListHistory(ctx context.Context, in *ListHistoryRequest) (*ListHistoryResponse, error) {
	out := new(ListHistoryResponse)
	err := c.c.Invoke(ctx, _ListHistoryMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAbnormalMetrics(ctx context.Context, in *ListAbnormalMetricsRequest) (*ListAbnormalMetricsResponse, error) {
	out := new(ListAbnormalMetricsResponse)
	err := c.c.Invoke(ctx, _ListAbnormalMetricsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SchedulerCallback(ctx context.Context, in *SchedulerCallbackRequest) (*SchedulerCallbackResponse, error) {
	out := new(SchedulerCallbackResponse)
	err := c.c.Invoke(ctx, _SchedulerCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for history service.
type Service interface {
	EasyCommandCallback(context.Context, *EasyCommandCallbackRequest) (*types.Empty, error)
	GetHistory(context.Context, *GetHistoryRequest) (*inspection.InspectionHistory, error)
	GetSourceData(context.Context, *GetSourceDataRequest) (*inspection.InspectionHistory, error)
	GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error)
	ListHistory(context.Context, *ListHistoryRequest) (*ListHistoryResponse, error)
	ListAbnormalMetrics(context.Context, *ListAbnormalMetricsRequest) (*ListAbnormalMetricsResponse, error)
	SchedulerCallback(context.Context, *SchedulerCallbackRequest) (*SchedulerCallbackResponse, error)
}

func _EasyCommandCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.EasyCommandCallback(ctx, req.(*EasyCommandCallbackRequest))
	}
}

func _GetHistoryEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetHistory(ctx, req.(*GetHistoryRequest))
	}
}

func _GetSourceDataEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSourceData(ctx, req.(*GetSourceDataRequest))
	}
}

func _GetStatisticsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
}

func _ListHistoryEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListHistory(ctx, req.(*ListHistoryRequest))
	}
}

func _ListAbnormalMetricsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListAbnormalMetrics(ctx, req.(*ListAbnormalMetricsRequest))
	}
}

func _SchedulerCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SchedulerCallback(ctx, req.(*SchedulerCallbackRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_EasyCommandCallbackMethodDesc, _EasyCommandCallbackEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetHistoryMethodDesc, _GetHistoryEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetSourceDataMethodDesc, _GetSourceDataEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetStatisticsMethodDesc, _GetStatisticsEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListHistoryMethodDesc, _ListHistoryEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListAbnormalMetricsMethodDesc, _ListAbnormalMetricsEndpoint(srv))
	s.RegisterUnaryEndpoint(_SchedulerCallbackMethodDesc, _SchedulerCallbackEndpoint(srv))
}

// Method Description
var _EasyCommandCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.history.EasyCommandCallback",
		Version: "1.0",
	},
	ServiceName:  "history.rpc",
	MethodName:   "EasyCommandCallback",
	RequestType:  (*EasyCommandCallbackRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/inspection/:pluginId/inspectionId/:inspectionTaskId/jobId/:jobId/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetHistoryMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.history.GetHistory",
		Version: "1.0",
	},
	ServiceName:  "history.rpc",
	MethodName:   "GetHistory",
	RequestType:  (*GetHistoryRequest)(nil),
	ResponseType: (*inspection.InspectionHistory)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/history/:jobId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetSourceDataMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.history.GetSourceData",
		Version: "1.0",
	},
	ServiceName:  "history.rpc",
	MethodName:   "GetSourceData",
	RequestType:  (*GetSourceDataRequest)(nil),
	ResponseType: (*inspection.InspectionHistory)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/history/:jobId/source-data",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetStatisticsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.history.GetStatistics",
		Version: "1.0",
	},
	ServiceName:  "history.rpc",
	MethodName:   "GetStatistics",
	RequestType:  (*GetStatisticsRequest)(nil),
	ResponseType: (*GetStatisticsResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/history/:jobId/statistics",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListHistoryMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.history.ListHistory",
		Version: "1.0",
	},
	ServiceName:  "history.rpc",
	MethodName:   "ListHistory",
	RequestType:  (*ListHistoryRequest)(nil),
	ResponseType: (*ListHistoryResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/history",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListAbnormalMetricsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.history.ListAbnormalMetrics",
		Version: "1.0",
	},
	ServiceName:  "history.rpc",
	MethodName:   "ListAbnormalMetrics",
	RequestType:  (*ListAbnormalMetricsRequest)(nil),
	ResponseType: (*ListAbnormalMetricsResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/history/:jobId/abnormal-metrics",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _SchedulerCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.history.SchedulerCallback",
		Version: "1.0",
	},
	ServiceName:  "history.rpc",
	MethodName:   "SchedulerCallback",
	RequestType:  (*SchedulerCallbackRequest)(nil),
	ResponseType: (*SchedulerCallbackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/inspection/:pluginId/task/:inspectionTaskId/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
