// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package collector

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	inspection "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/inspection"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateCollector(ctx context.Context, in *CreateCollectorRequest) (*CreateCollectorResponse, error)
	DebugCollector(ctx context.Context, in *DebugCollectorRequest) (*DebugCollectorResponse, error)
	DeleteCollector(ctx context.Context, in *DeleteCollectorRequest) (*types.Empty, error)
	GetCollector(ctx context.Context, in *GetCollectorRequest) (*inspection.InspectionCollector, error)
	ListCollector(ctx context.Context, in *ListCollectorRequest) (*ListCollectorResponse, error)
	UpdateCollector(ctx context.Context, in *UpdateCollectorRequest) (*inspection.InspectionCollector, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateCollector(ctx context.Context, in *CreateCollectorRequest) (*CreateCollectorResponse, error) {
	out := new(CreateCollectorResponse)
	err := c.c.Invoke(ctx, _CreateCollectorMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DebugCollector(ctx context.Context, in *DebugCollectorRequest) (*DebugCollectorResponse, error) {
	out := new(DebugCollectorResponse)
	err := c.c.Invoke(ctx, _DebugCollectorMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteCollector(ctx context.Context, in *DeleteCollectorRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteCollectorMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetCollector(ctx context.Context, in *GetCollectorRequest) (*inspection.InspectionCollector, error) {
	out := new(inspection.InspectionCollector)
	err := c.c.Invoke(ctx, _GetCollectorMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListCollector(ctx context.Context, in *ListCollectorRequest) (*ListCollectorResponse, error) {
	out := new(ListCollectorResponse)
	err := c.c.Invoke(ctx, _ListCollectorMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateCollector(ctx context.Context, in *UpdateCollectorRequest) (*inspection.InspectionCollector, error) {
	out := new(inspection.InspectionCollector)
	err := c.c.Invoke(ctx, _UpdateCollectorMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for collector service.
type Service interface {
	CreateCollector(context.Context, *CreateCollectorRequest) (*CreateCollectorResponse, error)
	DebugCollector(context.Context, *DebugCollectorRequest) (*DebugCollectorResponse, error)
	DeleteCollector(context.Context, *DeleteCollectorRequest) (*types.Empty, error)
	GetCollector(context.Context, *GetCollectorRequest) (*inspection.InspectionCollector, error)
	ListCollector(context.Context, *ListCollectorRequest) (*ListCollectorResponse, error)
	UpdateCollector(context.Context, *UpdateCollectorRequest) (*inspection.InspectionCollector, error)
}

func _CreateCollectorEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateCollector(ctx, req.(*CreateCollectorRequest))
	}
}

func _DebugCollectorEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DebugCollector(ctx, req.(*DebugCollectorRequest))
	}
}

func _DeleteCollectorEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteCollector(ctx, req.(*DeleteCollectorRequest))
	}
}

func _GetCollectorEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetCollector(ctx, req.(*GetCollectorRequest))
	}
}

func _ListCollectorEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListCollector(ctx, req.(*ListCollectorRequest))
	}
}

func _UpdateCollectorEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateCollector(ctx, req.(*UpdateCollectorRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateCollectorMethodDesc, _CreateCollectorEndpoint(srv))
	s.RegisterUnaryEndpoint(_DebugCollectorMethodDesc, _DebugCollectorEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteCollectorMethodDesc, _DeleteCollectorEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetCollectorMethodDesc, _GetCollectorEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListCollectorMethodDesc, _ListCollectorEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateCollectorMethodDesc, _UpdateCollectorEndpoint(srv))
}

// Method Description
var _CreateCollectorMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.collector.CreateCollector",
		Version: "1.0",
	},
	ServiceName:  "collector.rpc",
	MethodName:   "CreateCollector",
	RequestType:  (*CreateCollectorRequest)(nil),
	ResponseType: (*CreateCollectorResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/inspection/:pluginId/collector",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DebugCollectorMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.collector.DebugCollector",
		Version: "1.0",
	},
	ServiceName:  "collector.rpc",
	MethodName:   "DebugCollector",
	RequestType:  (*DebugCollectorRequest)(nil),
	ResponseType: (*DebugCollectorResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/inspection/:pluginId/collector-debug",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteCollectorMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.collector.DeleteCollector",
		Version: "1.0",
	},
	ServiceName:  "collector.rpc",
	MethodName:   "DeleteCollector",
	RequestType:  (*DeleteCollectorRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/inspection/:pluginId/collector/:collectorId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetCollectorMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.collector.GetCollector",
		Version: "1.0",
	},
	ServiceName:  "collector.rpc",
	MethodName:   "GetCollector",
	RequestType:  (*GetCollectorRequest)(nil),
	ResponseType: (*inspection.InspectionCollector)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/collector/:collectorId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListCollectorMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.collector.ListCollector",
		Version: "1.0",
	},
	ServiceName:  "collector.rpc",
	MethodName:   "ListCollector",
	RequestType:  (*ListCollectorRequest)(nil),
	ResponseType: (*ListCollectorResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/collector",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateCollectorMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.collector.UpdateCollector",
		Version: "1.0",
	},
	ServiceName:  "collector.rpc",
	MethodName:   "UpdateCollector",
	RequestType:  (*UpdateCollectorRequest)(nil),
	ResponseType: (*inspection.InspectionCollector)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/inspection/:pluginId/collector/:collectorId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
