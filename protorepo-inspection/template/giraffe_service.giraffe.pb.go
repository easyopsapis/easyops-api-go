// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package template

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	inspection "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/inspection"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for template service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateTemplate(ctx context.Context, in *CreateTemplateRequest) (*inspection.InspectionTemplate, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest) (*types.Empty, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest) (*inspection.InspectionTemplate, error)
	ListTemplate(ctx context.Context, in *ListTemplateRequest) (*ListTemplateResponse, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest) (*inspection.InspectionTemplate, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateTemplate(ctx context.Context, in *CreateTemplateRequest) (*inspection.InspectionTemplate, error) {
	out := new(inspection.InspectionTemplate)
	err := c.c.Invoke(ctx, _CreateTemplateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteTemplateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetTemplate(ctx context.Context, in *GetTemplateRequest) (*inspection.InspectionTemplate, error) {
	out := new(inspection.InspectionTemplate)
	err := c.c.Invoke(ctx, _GetTemplateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTemplate(ctx context.Context, in *ListTemplateRequest) (*ListTemplateResponse, error) {
	out := new(ListTemplateResponse)
	err := c.c.Invoke(ctx, _ListTemplateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest) (*inspection.InspectionTemplate, error) {
	out := new(inspection.InspectionTemplate)
	err := c.c.Invoke(ctx, _UpdateTemplateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for template service.
type Service interface {
	CreateTemplate(context.Context, *CreateTemplateRequest) (*inspection.InspectionTemplate, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*types.Empty, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*inspection.InspectionTemplate, error)
	ListTemplate(context.Context, *ListTemplateRequest) (*ListTemplateResponse, error)
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*inspection.InspectionTemplate, error)
}

func _CreateTemplateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTemplate(ctx, req.(*CreateTemplateRequest))
	}
}

func _DeleteTemplateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
}

func _GetTemplateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTemplate(ctx, req.(*GetTemplateRequest))
	}
}

func _ListTemplateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListTemplate(ctx, req.(*ListTemplateRequest))
	}
}

func _UpdateTemplateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateTemplateMethodDesc, _CreateTemplateEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteTemplateMethodDesc, _DeleteTemplateEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetTemplateMethodDesc, _GetTemplateEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListTemplateMethodDesc, _ListTemplateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateTemplateMethodDesc, _UpdateTemplateEndpoint(srv))
}

// Method Description
var _CreateTemplateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.template.CreateTemplate",
		Version: "1.0",
	},
	ServiceName:  "template.rpc",
	MethodName:   "CreateTemplate",
	RequestType:  (*CreateTemplateRequest)(nil),
	ResponseType: (*inspection.InspectionTemplate)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/inspection/:pluginId/report-templates",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteTemplateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.template.DeleteTemplate",
		Version: "1.0",
	},
	ServiceName:  "template.rpc",
	MethodName:   "DeleteTemplate",
	RequestType:  (*DeleteTemplateRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/inspection/:pluginId/report-templates/:templateId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetTemplateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.template.GetTemplate",
		Version: "1.0",
	},
	ServiceName:  "template.rpc",
	MethodName:   "GetTemplate",
	RequestType:  (*GetTemplateRequest)(nil),
	ResponseType: (*inspection.InspectionTemplate)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/report-templates/:templateId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListTemplateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.template.ListTemplate",
		Version: "1.0",
	},
	ServiceName:  "template.rpc",
	MethodName:   "ListTemplate",
	RequestType:  (*ListTemplateRequest)(nil),
	ResponseType: (*ListTemplateResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/report-templates",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateTemplateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.template.UpdateTemplate",
		Version: "1.0",
	},
	ServiceName:  "template.rpc",
	MethodName:   "UpdateTemplate",
	RequestType:  (*UpdateTemplateRequest)(nil),
	ResponseType: (*inspection.InspectionTemplate)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/inspection/:pluginId/report-templates/:templateId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
