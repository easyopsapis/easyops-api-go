// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package info

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	inspection "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/inspection"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateInspectionInfo(ctx context.Context, in *CreateInspectionInfoRequest) (*inspection.InspectionInfo, error)
	DeleteInspectionInfo(ctx context.Context, in *DeleteInspectionInfoRequest) (*types.Empty, error)
	GetInspectionInfo(ctx context.Context, in *GetInspectionInfoRequest) (*inspection.InspectionInfo, error)
	ListInspectionInfo(ctx context.Context, in *ListInspectionInfoRequest) (*ListInspectionInfoResponse, error)
	ListenOrgRegister(ctx context.Context, in *types.Empty) (*types.Empty, error)
	UpdateInspectionInfo(ctx context.Context, in *UpdateInspectionInfoRequest) (*inspection.InspectionInfo, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateInspectionInfo(ctx context.Context, in *CreateInspectionInfoRequest) (*inspection.InspectionInfo, error) {
	out := new(inspection.InspectionInfo)
	err := c.c.Invoke(ctx, _CreateInspectionInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteInspectionInfo(ctx context.Context, in *DeleteInspectionInfoRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteInspectionInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetInspectionInfo(ctx context.Context, in *GetInspectionInfoRequest) (*inspection.InspectionInfo, error) {
	out := new(inspection.InspectionInfo)
	err := c.c.Invoke(ctx, _GetInspectionInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListInspectionInfo(ctx context.Context, in *ListInspectionInfoRequest) (*ListInspectionInfoResponse, error) {
	out := new(ListInspectionInfoResponse)
	err := c.c.Invoke(ctx, _ListInspectionInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListenOrgRegister(ctx context.Context, in *types.Empty) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ListenOrgRegisterMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateInspectionInfo(ctx context.Context, in *UpdateInspectionInfoRequest) (*inspection.InspectionInfo, error) {
	out := new(inspection.InspectionInfo)
	err := c.c.Invoke(ctx, _UpdateInspectionInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for info service.
type Service interface {
	CreateInspectionInfo(context.Context, *CreateInspectionInfoRequest) (*inspection.InspectionInfo, error)
	DeleteInspectionInfo(context.Context, *DeleteInspectionInfoRequest) (*types.Empty, error)
	GetInspectionInfo(context.Context, *GetInspectionInfoRequest) (*inspection.InspectionInfo, error)
	ListInspectionInfo(context.Context, *ListInspectionInfoRequest) (*ListInspectionInfoResponse, error)
	ListenOrgRegister(context.Context, *types.Empty) (*types.Empty, error)
	UpdateInspectionInfo(context.Context, *UpdateInspectionInfoRequest) (*inspection.InspectionInfo, error)
}

func _CreateInspectionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateInspectionInfo(ctx, req.(*CreateInspectionInfoRequest))
	}
}

func _DeleteInspectionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteInspectionInfo(ctx, req.(*DeleteInspectionInfoRequest))
	}
}

func _GetInspectionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetInspectionInfo(ctx, req.(*GetInspectionInfoRequest))
	}
}

func _ListInspectionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListInspectionInfo(ctx, req.(*ListInspectionInfoRequest))
	}
}

func _ListenOrgRegisterEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListenOrgRegister(ctx, req.(*types.Empty))
	}
}

func _UpdateInspectionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateInspectionInfo(ctx, req.(*UpdateInspectionInfoRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateInspectionInfoMethodDesc, _CreateInspectionInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteInspectionInfoMethodDesc, _DeleteInspectionInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetInspectionInfoMethodDesc, _GetInspectionInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListInspectionInfoMethodDesc, _ListInspectionInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListenOrgRegisterMethodDesc, _ListenOrgRegisterEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateInspectionInfoMethodDesc, _UpdateInspectionInfoEndpoint(srv))
}

// Method Description
var _CreateInspectionInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.info.CreateInspectionInfo",
		Version: "1.0",
	},
	ServiceName:  "info.rpc",
	MethodName:   "CreateInspectionInfo",
	RequestType:  (*CreateInspectionInfoRequest)(nil),
	ResponseType: (*inspection.InspectionInfo)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/inspection",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteInspectionInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.info.DeleteInspectionInfo",
		Version: "1.0",
	},
	ServiceName:  "info.rpc",
	MethodName:   "DeleteInspectionInfo",
	RequestType:  (*DeleteInspectionInfoRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/inspection/:pluginId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetInspectionInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.info.GetInspectionInfo",
		Version: "1.0",
	},
	ServiceName:  "info.rpc",
	MethodName:   "GetInspectionInfo",
	RequestType:  (*GetInspectionInfoRequest)(nil),
	ResponseType: (*inspection.InspectionInfo)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListInspectionInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.info.ListInspectionInfo",
		Version: "1.0",
	},
	ServiceName:  "info.rpc",
	MethodName:   "ListInspectionInfo",
	RequestType:  (*ListInspectionInfoRequest)(nil),
	ResponseType: (*ListInspectionInfoResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListenOrgRegisterMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.info.ListenOrgRegister",
		Version: "1.0",
	},
	ServiceName:  "info.rpc",
	MethodName:   "ListenOrgRegister",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/org/register",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateInspectionInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.info.UpdateInspectionInfo",
		Version: "1.0",
	},
	ServiceName:  "info.rpc",
	MethodName:   "UpdateInspectionInfo",
	RequestType:  (*UpdateInspectionInfoRequest)(nil),
	ResponseType: (*inspection.InspectionInfo)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/inspection/:pluginId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
