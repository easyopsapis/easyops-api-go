// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: create.proto

package metric_group

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/inspection"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_CreateMetricGroupRequest_PluginId = regexp.MustCompile(`^[a-zA-Z_][0-9a-zA-Z_]{0,31}$`)
var _regex_CreateMetricGroupRequest_Category = regexp.MustCompile(`^([^.]*\.)*[^.]*$`)

func (this *CreateMetricGroupRequest) Validate() error {
	if !_regex_CreateMetricGroupRequest_PluginId.MatchString(this.PluginId) {
		return github_com_mwitkow_go_proto_validators.FieldError("PluginId", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z_][0-9a-zA-Z_]{0,31}$"`, this.PluginId))
	}
	for _, item := range this.Dims {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Dims", err)
			}
		}
	}
	if !_regex_CreateMetricGroupRequest_Category.MatchString(this.Category) {
		return github_com_mwitkow_go_proto_validators.FieldError("Category", fmt.Errorf(`value '%v' must be a string conforming to regex "^([^.]*\\.)*[^.]*$"`, this.Category))
	}
	for _, item := range this.Vals {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Vals", err)
			}
		}
	}
	return nil
}
func (this *CreateMetricGroupResponseWrapper) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
