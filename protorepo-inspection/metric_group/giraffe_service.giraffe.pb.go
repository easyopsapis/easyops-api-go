// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package metric_group

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	inspection "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/inspection"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for metric_group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateMetricGroup(ctx context.Context, in *CreateMetricGroupRequest) (*inspection.InspectionMetricGroup, error)
	DeleteMetricGroup(ctx context.Context, in *DeleteMetricGroupRequest) (*types.Empty, error)
	GetMetricGroup(ctx context.Context, in *GetMetricGroupRequest) (*inspection.InspectionMetricGroup, error)
	ListMetricGroup(ctx context.Context, in *ListMetricGroupRequest) (*ListMetricGroupResponse, error)
	UpdateMetricGroup(ctx context.Context, in *UpdateMetricGroupRequest) (*inspection.InspectionMetricGroup, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateMetricGroup(ctx context.Context, in *CreateMetricGroupRequest) (*inspection.InspectionMetricGroup, error) {
	out := new(inspection.InspectionMetricGroup)
	err := c.c.Invoke(ctx, _CreateMetricGroupMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteMetricGroup(ctx context.Context, in *DeleteMetricGroupRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteMetricGroupMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetMetricGroup(ctx context.Context, in *GetMetricGroupRequest) (*inspection.InspectionMetricGroup, error) {
	out := new(inspection.InspectionMetricGroup)
	err := c.c.Invoke(ctx, _GetMetricGroupMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMetricGroup(ctx context.Context, in *ListMetricGroupRequest) (*ListMetricGroupResponse, error) {
	out := new(ListMetricGroupResponse)
	err := c.c.Invoke(ctx, _ListMetricGroupMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateMetricGroup(ctx context.Context, in *UpdateMetricGroupRequest) (*inspection.InspectionMetricGroup, error) {
	out := new(inspection.InspectionMetricGroup)
	err := c.c.Invoke(ctx, _UpdateMetricGroupMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for metric_group service.
type Service interface {
	CreateMetricGroup(context.Context, *CreateMetricGroupRequest) (*inspection.InspectionMetricGroup, error)
	DeleteMetricGroup(context.Context, *DeleteMetricGroupRequest) (*types.Empty, error)
	GetMetricGroup(context.Context, *GetMetricGroupRequest) (*inspection.InspectionMetricGroup, error)
	ListMetricGroup(context.Context, *ListMetricGroupRequest) (*ListMetricGroupResponse, error)
	UpdateMetricGroup(context.Context, *UpdateMetricGroupRequest) (*inspection.InspectionMetricGroup, error)
}

func _CreateMetricGroupEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateMetricGroup(ctx, req.(*CreateMetricGroupRequest))
	}
}

func _DeleteMetricGroupEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteMetricGroup(ctx, req.(*DeleteMetricGroupRequest))
	}
}

func _GetMetricGroupEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetMetricGroup(ctx, req.(*GetMetricGroupRequest))
	}
}

func _ListMetricGroupEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListMetricGroup(ctx, req.(*ListMetricGroupRequest))
	}
}

func _UpdateMetricGroupEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateMetricGroup(ctx, req.(*UpdateMetricGroupRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateMetricGroupMethodDesc, _CreateMetricGroupEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteMetricGroupMethodDesc, _DeleteMetricGroupEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetMetricGroupMethodDesc, _GetMetricGroupEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListMetricGroupMethodDesc, _ListMetricGroupEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateMetricGroupMethodDesc, _UpdateMetricGroupEndpoint(srv))
}

// Method Description
var _CreateMetricGroupMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.metric_group.CreateMetricGroup",
		Version: "1.0",
	},
	ServiceName:  "metric_group.rpc",
	MethodName:   "CreateMetricGroup",
	RequestType:  (*CreateMetricGroupRequest)(nil),
	ResponseType: (*inspection.InspectionMetricGroup)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/inspection/:pluginId/metric-groups",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteMetricGroupMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.metric_group.DeleteMetricGroup",
		Version: "1.0",
	},
	ServiceName:  "metric_group.rpc",
	MethodName:   "DeleteMetricGroup",
	RequestType:  (*DeleteMetricGroupRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/inspection/:pluginId/metric-groups/:metricGroupId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetMetricGroupMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.metric_group.GetMetricGroup",
		Version: "1.0",
	},
	ServiceName:  "metric_group.rpc",
	MethodName:   "GetMetricGroup",
	RequestType:  (*GetMetricGroupRequest)(nil),
	ResponseType: (*inspection.InspectionMetricGroup)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/metric-groups/:metricGroupId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListMetricGroupMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.metric_group.ListMetricGroup",
		Version: "1.0",
	},
	ServiceName:  "metric_group.rpc",
	MethodName:   "ListMetricGroup",
	RequestType:  (*ListMetricGroupRequest)(nil),
	ResponseType: (*ListMetricGroupResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/metric-groups",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateMetricGroupMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.metric_group.UpdateMetricGroup",
		Version: "1.0",
	},
	ServiceName:  "metric_group.rpc",
	MethodName:   "UpdateMetricGroup",
	RequestType:  (*UpdateMetricGroupRequest)(nil),
	ResponseType: (*inspection.InspectionMetricGroup)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/inspection/:pluginId/metric-groups/:metricGroupId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
