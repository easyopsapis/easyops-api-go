// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package task

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	inspection "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/inspection"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest) (*CreateTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest) (*types.Empty, error)
	GetTask(ctx context.Context, in *GetTaskRequest) (*inspection.InspectionTask, error)
	ListInspectionInfo(ctx context.Context, in *ListInspectionInfoRequest) (*ListInspectionInfoResponse, error)
	UpdateInspectionInfo(ctx context.Context, in *UpdateInspectionInfoRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateTask(ctx context.Context, in *CreateTaskRequest) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.c.Invoke(ctx, _CreateTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTask(ctx context.Context, in *DeleteTaskRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetTask(ctx context.Context, in *GetTaskRequest) (*inspection.InspectionTask, error) {
	out := new(inspection.InspectionTask)
	err := c.c.Invoke(ctx, _GetTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListInspectionInfo(ctx context.Context, in *ListInspectionInfoRequest) (*ListInspectionInfoResponse, error) {
	out := new(ListInspectionInfoResponse)
	err := c.c.Invoke(ctx, _ListInspectionInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateInspectionInfo(ctx context.Context, in *UpdateInspectionInfoRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _UpdateInspectionInfoMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for task service.
type Service interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*types.Empty, error)
	GetTask(context.Context, *GetTaskRequest) (*inspection.InspectionTask, error)
	ListInspectionInfo(context.Context, *ListInspectionInfoRequest) (*ListInspectionInfoResponse, error)
	UpdateInspectionInfo(context.Context, *UpdateInspectionInfoRequest) (*types.Empty, error)
}

func _CreateTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTask(ctx, req.(*CreateTaskRequest))
	}
}

func _DeleteTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
}

func _GetTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTask(ctx, req.(*GetTaskRequest))
	}
}

func _ListInspectionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListInspectionInfo(ctx, req.(*ListInspectionInfoRequest))
	}
}

func _UpdateInspectionInfoEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateInspectionInfo(ctx, req.(*UpdateInspectionInfoRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateTaskMethodDesc, _CreateTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteTaskMethodDesc, _DeleteTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetTaskMethodDesc, _GetTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListInspectionInfoMethodDesc, _ListInspectionInfoEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateInspectionInfoMethodDesc, _UpdateInspectionInfoEndpoint(srv))
}

// Method Description
var _CreateTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.task.CreateTask",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "CreateTask",
	RequestType:  (*CreateTaskRequest)(nil),
	ResponseType: (*CreateTaskResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/inspection/:pluginId/task",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.task.DeleteTask",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "DeleteTask",
	RequestType:  (*DeleteTaskRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/inspection/:pluginId/task/:inspectionTaskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.task.GetTask",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "GetTask",
	RequestType:  (*GetTaskRequest)(nil),
	ResponseType: (*inspection.InspectionTask)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/task/:inspectionTaskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListInspectionInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.task.ListInspectionInfo",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "ListInspectionInfo",
	RequestType:  (*ListInspectionInfoRequest)(nil),
	ResponseType: (*ListInspectionInfoResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/inspection/:pluginId/task",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateInspectionInfoMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.inspection.task.UpdateInspectionInfo",
		Version: "1.0",
	},
	ServiceName:  "task.rpc",
	MethodName:   "UpdateInspectionInfo",
	RequestType:  (*UpdateInspectionInfoRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/inspection/:pluginId/task/:inspectionTaskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
