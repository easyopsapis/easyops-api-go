// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package role

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	GetPermissionRoleList(ctx context.Context, in *GetPermissionRoleListRequest) (*GetPermissionRoleListResponse, error)
	GetUserRole(ctx context.Context, in *GetUserRoleRequest) (*GetUserRoleResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) GetPermissionRoleList(ctx context.Context, in *GetPermissionRoleListRequest) (*GetPermissionRoleListResponse, error) {
	out := new(GetPermissionRoleListResponse)
	err := c.c.Invoke(ctx, _GetPermissionRoleListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetUserRole(ctx context.Context, in *GetUserRoleRequest) (*GetUserRoleResponse, error) {
	out := new(GetUserRoleResponse)
	err := c.c.Invoke(ctx, _GetUserRoleContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for role service.
type Service interface {
	GetPermissionRoleList(context.Context, *GetPermissionRoleListRequest) (*GetPermissionRoleListResponse, error)
	GetUserRole(context.Context, *GetUserRoleRequest) (*GetUserRoleResponse, error)
}

func _GetPermissionRoleListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPermissionRoleList(ctx, req.(*GetPermissionRoleListRequest))
	}
}

func _GetUserRoleEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetUserRole(ctx, req.(*GetUserRoleRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_GetPermissionRoleListContract, _GetPermissionRoleListEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetUserRoleContract, _GetUserRoleEndpoint(srv))
}

// API Contract
var _GetPermissionRoleListContract = &getPermissionRoleListContract{}

type getPermissionRoleListContract struct{}

func (*getPermissionRoleListContract) ServiceName() string { return "role.rpc" }
func (*getPermissionRoleListContract) MethodName() string  { return "GetPermissionRoleList" }
func (*getPermissionRoleListContract) RequestMessage() interface{} {
	return new(GetPermissionRoleListRequest)
}
func (*getPermissionRoleListContract) ResponseMessage() interface{} {
	return new(GetPermissionRoleListRequest)
}
func (*getPermissionRoleListContract) ContractName() string {
	return "easyops.api.permission.role.GetPermissionRoleList"
}
func (*getPermissionRoleListContract) ContractVersion() string { return "1.0" }
func (*getPermissionRoleListContract) Pattern() (string, string) {
	return "GET", "/api/v1/permission_role/config"
}
func (*getPermissionRoleListContract) Body() string { return "" }

var _GetUserRoleContract = &getUserRoleContract{}

type getUserRoleContract struct{}

func (*getUserRoleContract) ServiceName() string          { return "role.rpc" }
func (*getUserRoleContract) MethodName() string           { return "GetUserRole" }
func (*getUserRoleContract) RequestMessage() interface{}  { return new(GetUserRoleRequest) }
func (*getUserRoleContract) ResponseMessage() interface{} { return new(GetUserRoleRequest) }
func (*getUserRoleContract) ContractName() string         { return "easyops.api.permission.role.GetUserRole" }
func (*getUserRoleContract) ContractVersion() string      { return "1.0" }
func (*getUserRoleContract) Pattern() (string, string) {
	return "GET", "/api/v1/permission_role/user_role/:user"
}
func (*getUserRoleContract) Body() string { return "" }
