// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provider.proto

package pipeline

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Git Provider
type Provider struct {
	//
	//实例id，服务端自动生成
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id"`
	//
	//名称， 不能修改
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//Provider类型, 目前只支持gitlab, 不能修改
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type" form:"type"`
	//
	//gitlab v4 api url.
	ApiUrl string `protobuf:"bytes,4,opt,name=api_url,json=apiUrl,proto3" json:"api_url" form:"api_url"`
	//
	//鉴权方式
	Auth *Provider_Auth `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth" form:"auth"`
	//
	//是否为默认provider
	Default bool `protobuf:"varint,6,opt,name=default,proto3" json:"default" form:"default"`
	//
	//创建者, 服务端自动生成
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator" form:"creator"`
	//
	//创建时间, 服务端自动生成
	Ctime string `protobuf:"bytes,8,opt,name=ctime,proto3" json:"ctime" form:"ctime"`
	//
	//修改时间, 服务端自动生成
	Mtime                string   `protobuf:"bytes,9,opt,name=mtime,proto3" json:"mtime" form:"mtime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a9f3c02af3d1c8, []int{0}
}
func (m *Provider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Provider.Unmarshal(m, b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return xxx_messageInfo_Provider.Size(m)
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

func (m *Provider) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Provider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Provider) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Provider) GetApiUrl() string {
	if m != nil {
		return m.ApiUrl
	}
	return ""
}

func (m *Provider) GetAuth() *Provider_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Provider) GetDefault() bool {
	if m != nil {
		return m.Default
	}
	return false
}

func (m *Provider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Provider) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *Provider) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

type Provider_Auth struct {
	//
	//鉴权方式, 目前只支持 basic
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type" form:"type"`
	//
	//gitlab personal access token. https://docs.gitlab.com/ee/api/README.html#personal-access-tokens
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token" form:"token"`
	//
	//auth2类型的app_id
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id" form:"app_id"`
	//
	//auth2类型的secret
	AppSecret string `protobuf:"bytes,4,opt,name=app_secret,json=appSecret,proto3" json:"app_secret" form:"app_secret"`
	//
	//auth2是否可以访问私有仓库
	AccessPrivateRepos   bool     `protobuf:"varint,5,opt,name=access_private_repos,json=accessPrivateRepos,proto3" json:"access_private_repos" form:"access_private_repos"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Provider_Auth) Reset()         { *m = Provider_Auth{} }
func (m *Provider_Auth) String() string { return proto.CompactTextString(m) }
func (*Provider_Auth) ProtoMessage()    {}
func (*Provider_Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a9f3c02af3d1c8, []int{0, 0}
}
func (m *Provider_Auth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Provider_Auth.Unmarshal(m, b)
}
func (m *Provider_Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Provider_Auth.Marshal(b, m, deterministic)
}
func (m *Provider_Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider_Auth.Merge(m, src)
}
func (m *Provider_Auth) XXX_Size() int {
	return xxx_messageInfo_Provider_Auth.Size(m)
}
func (m *Provider_Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider_Auth.DiscardUnknown(m)
}

var xxx_messageInfo_Provider_Auth proto.InternalMessageInfo

func (m *Provider_Auth) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Provider_Auth) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Provider_Auth) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Provider_Auth) GetAppSecret() string {
	if m != nil {
		return m.AppSecret
	}
	return ""
}

func (m *Provider_Auth) GetAccessPrivateRepos() bool {
	if m != nil {
		return m.AccessPrivateRepos
	}
	return false
}

func init() {
	proto.RegisterType((*Provider)(nil), "pipeline.Provider")
	proto.RegisterType((*Provider_Auth)(nil), "pipeline.Provider.Auth")
}

func init() { proto.RegisterFile("provider.proto", fileDescriptor_c6a9f3c02af3d1c8) }

var fileDescriptor_c6a9f3c02af3d1c8 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x96, 0x73, 0xf3, 0x3b, 0xdc, 0xcb, 0x05, 0xab, 0x55, 0x2d, 0xba, 0x70, 0x30, 0xa8, 0x72,
	0x0a, 0x63, 0xe7, 0x87, 0x56, 0x22, 0xaa, 0x14, 0x11, 0x75, 0xd3, 0x1d, 0x35, 0xed, 0x06, 0x37,
	0x44, 0x83, 0x3d, 0x84, 0x11, 0x76, 0x66, 0x64, 0x4f, 0x40, 0x40, 0xd8, 0xf6, 0x61, 0x2a, 0x75,
	0xdb, 0x07, 0xe8, 0x5b, 0x74, 0xe3, 0x4a, 0x7d, 0x04, 0x3f, 0x41, 0x35, 0x63, 0x9b, 0x44, 0x2d,
	0xea, 0xbe, 0x2b, 0x9f, 0xf3, 0xfd, 0x9c, 0x99, 0x33, 0x3a, 0xc7, 0x60, 0x95, 0x45, 0xf4, 0x92,
	0xf8, 0x38, 0xb2, 0x58, 0x44, 0x39, 0x55, 0xeb, 0x8c, 0x30, 0x1c, 0x90, 0x29, 0xde, 0x80, 0x13,
	0xc2, 0xcf, 0x67, 0xa7, 0x96, 0x47, 0x43, 0x7b, 0x42, 0x27, 0xd4, 0x96, 0x82, 0xd3, 0xd9, 0x99,
	0xcc, 0x64, 0x22, 0xa3, 0xcc, 0xb8, 0xf1, 0x72, 0x49, 0x1e, 0x5e, 0x11, 0x7e, 0x41, 0xaf, 0xec,
	0x09, 0x85, 0x92, 0x84, 0x97, 0x28, 0x20, 0x3e, 0xe2, 0x34, 0x8a, 0xed, 0xfb, 0x30, 0xf3, 0x19,
	0x5f, 0xea, 0xa0, 0x7e, 0x98, 0xdf, 0x41, 0xed, 0x80, 0x12, 0xf1, 0x35, 0xa5, 0xa9, 0x98, 0x8d,
	0xe1, 0x66, 0x9a, 0xe8, 0x8d, 0x33, 0x1a, 0x85, 0x7d, 0x83, 0xf8, 0xc6, 0x8f, 0xef, 0xfa, 0x1a,
	0x58, 0x3d, 0x71, 0xdb, 0x70, 0x1f, 0xc1, 0x9b, 0xd1, 0x6d, 0xa7, 0x77, 0xb7, 0xed, 0x94, 0x88,
	0xaf, 0x6e, 0x81, 0xf2, 0x14, 0x85, 0x58, 0x2b, 0x49, 0xd3, 0xff, 0x69, 0xa2, 0xaf, 0x64, 0x26,
	0x81, 0x1a, 0x8e, 0x24, 0x85, 0x88, 0x5f, 0x33, 0xac, 0xfd, 0xf3, 0xab, 0x48, 0xa0, 0x86, 0x23,
	0x49, 0x75, 0x07, 0xd4, 0x10, 0x23, 0xe3, 0x59, 0x14, 0x68, 0x65, 0xa9, 0x53, 0xd3, 0x44, 0x5f,
	0xcd, 0x74, 0x39, 0x61, 0x38, 0x55, 0xc4, 0xc8, 0xfb, 0x28, 0x50, 0x5f, 0x81, 0x32, 0x9a, 0xf1,
	0x73, 0xad, 0xd2, 0x54, 0xcc, 0x95, 0xee, 0x13, 0xab, 0x78, 0x36, 0xab, 0xe8, 0xc5, 0x3a, 0x98,
	0xf1, 0xf3, 0xe5, 0xa3, 0x84, 0xdc, 0x70, 0xa4, 0x4b, 0xdd, 0x05, 0x35, 0x1f, 0x9f, 0xa1, 0x59,
	0xc0, 0xb5, 0x6a, 0x53, 0x31, 0xeb, 0xcb, 0x47, 0xe5, 0x84, 0xe1, 0x14, 0x12, 0xf5, 0x08, 0xd4,
	0xbc, 0x08, 0x8b, 0x37, 0xd3, 0x6a, 0xf2, 0x62, 0xfb, 0x0b, 0x75, 0x4e, 0x88, 0xf7, 0xd9, 0x02,
	0x9b, 0x27, 0x2e, 0x82, 0x37, 0x07, 0xf0, 0xb8, 0x0d, 0xf7, 0x47, 0xae, 0x75, 0x1f, 0x8f, 0xe1,
	0xe8, 0xb6, 0xbb, 0xdb, 0xeb, 0xdc, 0x6d, 0x3b, 0x45, 0x25, 0xf5, 0x9b, 0x02, 0x2a, 0x1e, 0x27,
	0x21, 0xd6, 0xea, 0xb2, 0xe6, 0x57, 0x25, 0x4d, 0xf4, 0x7f, 0xf3, 0xa2, 0x02, 0x17, 0x25, 0x3f,
	0x2b, 0xe0, 0x93, 0x72, 0x62, 0x9a, 0x83, 0xbe, 0xdb, 0x11, 0x25, 0x45, 0xdd, 0xe7, 0xad, 0x81,
	0xfc, 0xde, 0xee, 0xdd, 0xb5, 0xa0, 0xd9, 0x71, 0xdb, 0xb0, 0x3b, 0x9a, 0xb7, 0x25, 0xdf, 0x82,
	0x66, 0xcf, 0x6d, 0xc3, 0x4e, 0x91, 0xcf, 0xdd, 0x0e, 0xec, 0x66, 0xae, 0x96, 0xfb, 0xae, 0x39,
	0x32, 0xbb, 0x6e, 0x1b, 0xf6, 0x46, 0x73, 0xa9, 0xc9, 0xe0, 0xbe, 0xe9, 0xb6, 0xe1, 0x8b, 0x22,
	0x59, 0xc4, 0xe6, 0x07, 0x4b, 0x7e, 0x77, 0x5a, 0x03, 0xf3, 0x78, 0xee, 0xee, 0xc0, 0x91, 0x39,
	0xe8, 0x3f, 0x60, 0x5f, 0x72, 0x0f, 0xb6, 0x9d, 0xac, 0x23, 0xd9, 0x5b, 0x28, 0x7b, 0x6b, 0xfc,
	0xd6, 0x5b, 0xf8, 0xd7, 0xf6, 0x26, 0x6f, 0xbe, 0xf1, 0xb1, 0x04, 0xca, 0x62, 0xb4, 0xee, 0x67,
	0x5a, 0xf9, 0xd3, 0x4c, 0x3f, 0x03, 0x15, 0x4e, 0x2f, 0xf0, 0x34, 0x5f, 0x8f, 0xb5, 0xc5, 0x3b,
	0x48, 0xd8, 0x70, 0x32, 0x5a, 0x35, 0x41, 0x15, 0x31, 0x36, 0x26, 0x7e, 0xbe, 0x22, 0xeb, 0x69,
	0xa2, 0xff, 0x57, 0x8c, 0xbe, 0xc0, 0x0d, 0xa7, 0x82, 0x18, 0x7b, 0xe3, 0xab, 0x7b, 0x00, 0x08,
	0x24, 0xc6, 0x5e, 0x84, 0x79, 0xbe, 0x28, 0x8f, 0xd3, 0x44, 0x5f, 0x5f, 0xa8, 0x33, 0xce, 0x70,
	0x1a, 0x88, 0xb1, 0x23, 0x19, 0xab, 0x6f, 0xc1, 0x23, 0xe4, 0x79, 0x38, 0x8e, 0xc7, 0x2c, 0x22,
	0x97, 0x88, 0xe3, 0x71, 0x84, 0x19, 0x8d, 0xe5, 0xfa, 0xd4, 0x87, 0x7a, 0x9a, 0xe8, 0x4f, 0x73,
	0xff, 0x03, 0x2a, 0xc3, 0x51, 0x33, 0xf8, 0x30, 0x43, 0x1d, 0x01, 0x0e, 0x5f, 0x1f, 0x0f, 0x27,
	0xd4, 0xc2, 0x28, 0xbe, 0xa6, 0x2c, 0xb6, 0x02, 0xea, 0xa1, 0xc0, 0xf6, 0xe8, 0x94, 0x47, 0xc8,
	0xe3, 0x71, 0xf6, 0xb3, 0x12, 0x6e, 0x18, 0x52, 0x1f, 0x07, 0xb1, 0x9d, 0x0b, 0x6d, 0x99, 0xda,
	0xc5, 0xba, 0x9e, 0x56, 0xa5, 0xb0, 0xf7, 0x33, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x9d, 0x99, 0x0a,
	0x08, 0x05, 0x00, 0x00,
}
