// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: task_spec.proto

package easy_command

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//任务规格
type TaskSpec struct {
	//
	//任务ID。如无特殊需求不用指定，让后台自动生成，生成的格式为 {当前年月}_task[0-9a-f]{16,20} ，见正则校验。如果调用方需要指定任务ID，传入的任务ID也必须是此种格式
	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId" form:"taskId"`
	//
	//任务名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//任务类型。例如 agent_admin cmd command database_deliver deploy test tool
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type" form:"type"`
	//
	//操作。例如 database.check deployPreCheck instance.checkPackage instance.deploy instance.deployStrategy instance.fileDelivery instance.fileUninstall instance.restart instance.start instance.stop instance.uninstall plugin.deploy plugin.report task.run test
	Operation string `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation" form:"operation"`
	//
	//任务分组id。作用不明
	GroupId string `protobuf:"bytes,5,opt,name=groupId,proto3" json:"groupId" form:"groupId"`
	//
	//任务的具体action
	Actions []*Action `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions" form:"actions"`
	//
	//任务的目标机器。
	Targets []*Target `protobuf:"bytes,7,rep,name=targets,proto3" json:"targets" form:"targets"`
	//
	//关联的appId
	AppId string `protobuf:"bytes,8,opt,name=appId,proto3" json:"appId" form:"appId"`
	//
	//关联的clusterId
	ClusterId string `protobuf:"bytes,9,opt,name=clusterId,proto3" json:"clusterId" form:"clusterId"`
	//
	//关联的packageId
	PackageId string `protobuf:"bytes,10,opt,name=packageId,proto3" json:"packageId" form:"packageId"`
	//
	//关联的versionId
	VersionId string `protobuf:"bytes,11,opt,name=versionId,proto3" json:"versionId" form:"versionId"`
	//
	//是否需要发送状态变更通知到 logic.notify
	NeedNotify bool `protobuf:"varint,12,opt,name=needNotify,proto3" json:"needNotify" form:"needNotify"`
	//
	//设置的任务回调接口
	Callback *TaskCallback `protobuf:"bytes,13,opt,name=callback,proto3" json:"callback" form:"callback"`
	//
	//设置的目标机器分批执行的每批数量
	BatchNum int32 `protobuf:"varint,14,opt,name=batchNum,proto3" json:"batchNum" form:"batchNum"`
	//
	//设置的目标机器分批执行的每批之间的间隔秒数
	BatchInterval int32 `protobuf:"varint,15,opt,name=batchInterval,proto3" json:"batchInterval" form:"batchInterval"`
	//
	//如果某个目标机器的action执行失败，是否停止整个task
	FailedStop           bool     `protobuf:"varint,16,opt,name=failedStop,proto3" json:"failedStop" form:"failedStop"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskSpec) Reset()         { *m = TaskSpec{} }
func (m *TaskSpec) String() string { return proto.CompactTextString(m) }
func (*TaskSpec) ProtoMessage()    {}
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_da5788e085e92221, []int{0}
}
func (m *TaskSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskSpec.Unmarshal(m, b)
}
func (m *TaskSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskSpec.Marshal(b, m, deterministic)
}
func (m *TaskSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSpec.Merge(m, src)
}
func (m *TaskSpec) XXX_Size() int {
	return xxx_messageInfo_TaskSpec.Size(m)
}
func (m *TaskSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSpec proto.InternalMessageInfo

func (m *TaskSpec) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TaskSpec) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *TaskSpec) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *TaskSpec) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *TaskSpec) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *TaskSpec) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *TaskSpec) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *TaskSpec) GetPackageId() string {
	if m != nil {
		return m.PackageId
	}
	return ""
}

func (m *TaskSpec) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *TaskSpec) GetNeedNotify() bool {
	if m != nil {
		return m.NeedNotify
	}
	return false
}

func (m *TaskSpec) GetCallback() *TaskCallback {
	if m != nil {
		return m.Callback
	}
	return nil
}

func (m *TaskSpec) GetBatchNum() int32 {
	if m != nil {
		return m.BatchNum
	}
	return 0
}

func (m *TaskSpec) GetBatchInterval() int32 {
	if m != nil {
		return m.BatchInterval
	}
	return 0
}

func (m *TaskSpec) GetFailedStop() bool {
	if m != nil {
		return m.FailedStop
	}
	return false
}

func init() {
	proto.RegisterType((*TaskSpec)(nil), "easy_command.TaskSpec")
}

func init() { proto.RegisterFile("task_spec.proto", fileDescriptor_da5788e085e92221) }

var fileDescriptor_da5788e085e92221 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdd, 0x4e, 0xdb, 0x3c,
	0x1c, 0xc6, 0xd5, 0x97, 0x8f, 0xb6, 0x2e, 0x50, 0xde, 0x8c, 0x49, 0x16, 0x27, 0xa9, 0x3c, 0x0e,
	0x82, 0x44, 0x9a, 0xb6, 0x6c, 0x48, 0x70, 0x30, 0x69, 0x9d, 0x84, 0x56, 0x4d, 0xe2, 0xc0, 0x70,
	0x04, 0x2a, 0x95, 0x9b, 0xb8, 0x21, 0xca, 0x87, 0xa3, 0xd8, 0x05, 0x31, 0xc6, 0x6d, 0xed, 0x72,
	0x32, 0x69, 0x97, 0x90, 0x2b, 0x98, 0xec, 0xa4, 0x69, 0x56, 0x71, 0xd8, 0x33, 0xfb, 0xff, 0xfc,
	0x9e, 0xc7, 0xf6, 0xdf, 0x4e, 0x40, 0x5b, 0x10, 0xee, 0x4f, 0x78, 0x4c, 0xed, 0x6e, 0x9c, 0x30,
	0xc1, 0xb4, 0x1d, 0x4a, 0xf8, 0xf3, 0xc4, 0x66, 0x61, 0x48, 0x22, 0xe7, 0xd0, 0x74, 0x3d, 0xf1,
	0x30, 0x9f, 0x76, 0x6d, 0x16, 0x5a, 0x2e, 0x73, 0x99, 0xa5, 0xa0, 0xe9, 0x7c, 0xa6, 0x66, 0x6a,
	0xa2, 0x46, 0xb9, 0xf9, 0xf0, 0xda, 0x65, 0x5d, 0xe9, 0x67, 0x31, 0xef, 0x06, 0xcc, 0x26, 0x81,
	0x65, 0xb3, 0x48, 0x24, 0xc4, 0x16, 0x3c, 0x77, 0x26, 0x34, 0x66, 0x66, 0xc8, 0x1c, 0x1a, 0x70,
	0xab, 0x00, 0x2d, 0x35, 0xb5, 0xaa, 0xcb, 0x5a, 0xc4, 0x16, 0x1e, 0x8b, 0xd6, 0x1c, 0x2a, 0x48,
	0xe2, 0x52, 0x51, 0x84, 0xde, 0xae, 0x2d, 0x94, 0xfb, 0x13, 0x9b, 0x04, 0xc1, 0x94, 0xd8, 0x7e,
	0x91, 0x7d, 0x56, 0x69, 0x5a, 0xf8, 0xe4, 0x09, 0x9f, 0x3d, 0x59, 0x2e, 0x33, 0x95, 0x68, 0x3e,
	0x92, 0xc0, 0x73, 0x88, 0x60, 0x09, 0xb7, 0xca, 0x61, 0xee, 0x43, 0xbf, 0xea, 0xa0, 0x71, 0x43,
	0xb8, 0x7f, 0x1d, 0x53, 0x5b, 0xbb, 0x07, 0xdb, 0x32, 0x7b, 0xe4, 0xc0, 0x5a, 0xa7, 0x66, 0x34,
	0x87, 0x97, 0x59, 0xaa, 0xef, 0xce, 0x58, 0x12, 0x5e, 0xa0, 0xbc, 0x8e, 0xfe, 0xfc, 0xd6, 0xfb,
	0xc0, 0xba, 0x37, 0xee, 0x7a, 0xe6, 0xf9, 0xf8, 0xe5, 0xe3, 0xeb, 0xb1, 0xd1, 0xbf, 0xeb, 0x99,
	0x83, 0xf1, 0xcf, 0xde, 0x5d, 0xdf, 0x3c, 0x1f, 0x1f, 0x4f, 0x24, 0x27, 0x45, 0x62, 0xce, 0xc6,
	0x2f, 0xfd, 0xb3, 0x93, 0x41, 0xef, 0xf5, 0x08, 0x17, 0xa9, 0xda, 0x07, 0xb0, 0x19, 0x91, 0x90,
	0xc2, 0xff, 0x54, 0x7a, 0x3b, 0x4b, 0xf5, 0x56, 0x9e, 0x2e, 0xab, 0x08, 0x2b, 0x51, 0x42, 0xe2,
	0x39, 0xa6, 0x70, 0x63, 0x15, 0x92, 0x55, 0x84, 0x95, 0xa8, 0x0d, 0x40, 0x93, 0xc5, 0x34, 0x21,
	0xf2, 0xca, 0xe0, 0xa6, 0x22, 0x0f, 0xb2, 0x54, 0xdf, 0xcf, 0xc9, 0x52, 0x42, 0x78, 0x89, 0x69,
	0x27, 0xa0, 0xee, 0x26, 0x6c, 0x1e, 0x8f, 0x1c, 0xb8, 0xa5, 0x1c, 0x5a, 0x96, 0xea, 0x7b, 0xb9,
	0xa3, 0x10, 0x10, 0x5e, 0x20, 0xda, 0x10, 0xd4, 0xf3, 0x17, 0xc1, 0xe1, 0x76, 0x67, 0xc3, 0x68,
	0x0d, 0x0e, 0xba, 0xd5, 0x4b, 0xe8, 0x7e, 0x51, 0x62, 0x35, 0xa3, 0xc0, 0x11, 0x5e, 0x18, 0x65,
	0x46, 0xfe, 0x00, 0x38, 0xac, 0xbf, 0x95, 0x71, 0xa3, 0xc4, 0x6a, 0x46, 0x81, 0x23, 0xbc, 0x30,
	0x6a, 0x17, 0x60, 0x8b, 0xc4, 0x72, 0xcf, 0x0d, 0xb5, 0xe7, 0xa3, 0x2c, 0xd5, 0x77, 0x8a, 0xf5,
	0x64, 0x59, 0xde, 0xc8, 0x3e, 0xd8, 0xbb, 0xcf, 0x7b, 0xfe, 0x63, 0xfc, 0xd2, 0x3f, 0x7d, 0x3d,
	0xc2, 0xb9, 0x45, 0xbb, 0x04, 0x4d, 0x3b, 0x98, 0x73, 0x41, 0x93, 0x91, 0x03, 0x9b, 0xca, 0x6f,
	0x2c, 0xbb, 0x54, 0x4a, 0x6f, 0x67, 0x2c, 0xad, 0xb2, 0xdb, 0x31, 0xb1, 0x7d, 0xe2, 0xd2, 0x91,
	0x03, 0xc1, 0x6a, 0xb7, 0x4b, 0x09, 0xe1, 0x25, 0x26, 0x3d, 0x8f, 0x34, 0xe1, 0x1e, 0x8b, 0x46,
	0x0e, 0x6c, 0xad, 0x7a, 0x4a, 0x09, 0xe1, 0x25, 0xa6, 0x7d, 0x02, 0x20, 0xa2, 0xd4, 0xb9, 0x62,
	0xc2, 0x9b, 0x3d, 0xc3, 0x9d, 0x4e, 0xcd, 0x68, 0x0c, 0xdf, 0x67, 0xa9, 0xfe, 0x7f, 0xf1, 0x4a,
	0x4a, 0x0d, 0xe1, 0x0a, 0xa8, 0x7d, 0x07, 0x8d, 0xc5, 0xd7, 0x00, 0x77, 0x3b, 0x35, 0xa3, 0x35,
	0x38, 0x5c, 0xed, 0x33, 0xf7, 0xbf, 0x16, 0xc4, 0xf0, 0x5d, 0x96, 0xea, 0xed, 0xa2, 0x03, 0x45,
	0x0d, 0xe1, 0x32, 0x40, 0xb3, 0x40, 0x63, 0x4a, 0x84, 0xfd, 0x70, 0x35, 0x0f, 0xe1, 0x5e, 0xa7,
	0x66, 0x6c, 0x55, 0x0d, 0x0b, 0x05, 0xe1, 0x12, 0xd2, 0x3e, 0x83, 0x5d, 0x35, 0x1e, 0x45, 0x82,
	0x26, 0x8f, 0x24, 0x80, 0x6d, 0xe5, 0x82, 0x59, 0xaa, 0x1f, 0x54, 0x5c, 0x0b, 0x19, 0xe1, 0x7f,
	0x71, 0x79, 0xe8, 0x19, 0xf1, 0x02, 0xea, 0x5c, 0x0b, 0x16, 0xc3, 0xfd, 0xd5, 0x43, 0x2f, 0x35,
	0x84, 0x2b, 0xe0, 0xf0, 0xdb, 0xed, 0xe5, 0x7a, 0x7e, 0x27, 0xd3, 0x6d, 0x05, 0x9f, 0xfe, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x6c, 0x30, 0x67, 0x98, 0x97, 0x05, 0x00, 0x00,
}
