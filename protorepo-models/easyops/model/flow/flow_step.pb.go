// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flow_step.proto

package flow

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//流程步骤
type FlowStep struct {
	//
	//步骤ID
	StepId int32 `protobuf:"varint,1,opt,name=stepId,proto3" json:"stepId" form:"stepId"`
	//
	//引用步骤ID(工具ID或者流程ID，当为人工审批节点是为空)
	ToolId string `protobuf:"bytes,2,opt,name=toolId,proto3" json:"toolId" form:"toolId"`
	//
	//流程审核示例
	//"actions":[
	//{
	//"label":"继续",
	//"value":"yes",
	//"terminate":false
	//},
	//{
	//"label":"停止",
	//"value":"no",
	//"terminate":true
	//},
	//]
	//
	Actions []*FlowStep_Actions `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions" form:"actions"`
	//
	//审批用户或者用户组
	Approvers []string `protobuf:"bytes,4,rep,name=approvers,proto3" json:"approvers" form:"approvers"`
	//
	//邮件通知
	MailToApprovers bool `protobuf:"varint,5,opt,name=mailToApprovers,proto3" json:"mailToApprovers" form:"mailToApprovers"`
	//
	//步骤名
	StepName string `protobuf:"bytes,6,opt,name=stepName,proto3" json:"stepName" form:"stepName"`
	//
	//使用工具版本
	VId string `protobuf:"bytes,7,opt,name=vId,proto3" json:"vId" form:"vId"`
	//
	//执行用户
	ExecUser string `protobuf:"bytes,8,opt,name=execUser,proto3" json:"execUser" form:"execUser"`
	//
	//失败退出
	FailureExit bool `protobuf:"varint,9,opt,name=failureExit,proto3" json:"failureExit" form:"failureExit"`
	//
	//步骤类型(tool、flow、manual)
	SubType string `protobuf:"bytes,10,opt,name=subType,proto3" json:"subType" form:"subType"`
	//
	//类型
	Type string `protobuf:"bytes,11,opt,name=type,proto3" json:"type" form:"type"`
	//
	//在画布中X坐标
	XX float32 `protobuf:"fixed32,12,opt,name=_x,json=X,proto3" json:"_x" form:"_x"`
	//
	//在画布中Y坐标
	XY float32 `protobuf:"fixed32,13,opt,name=_y,json=Y,proto3" json:"_y" form:"_y"`
	//
	//是否root执行
	Root bool `protobuf:"varint,14,opt,name=root,proto3" json:"root" form:"root"`
	//
	//相对流程起点X坐标
	XDx float32 `protobuf:"fixed32,15,opt,name=_dx,json=Dx,proto3" json:"_dx" form:"_dx"`
	//
	//相对流程启动Y坐标
	XDy float32 `protobuf:"fixed32,16,opt,name=_dy,json=Dy,proto3" json:"_dy" form:"_dy"`
	//
	//样式
	Styles *FlowStep_Styles `protobuf:"bytes,17,opt,name=styles,proto3" json:"styles" form:"styles"`
	//
	//步骤输出, 有时候是{}, 有时候[]
	Outputs *types.Value `protobuf:"bytes,18,opt,name=outputs,proto3" json:"outputs" form:"outputs"`
	//
	//流程输入
	//{
	//"inputs": {
	//"must_input": "1",
	//"option_input": "000",
	//"@agents": [
	//{
	//"instanceId": "5c6f6cf0d8079",
	//"ip": "192.168.100.162"
	//},
	//{
	//"instanceId": "5c6f6cf0d8075",
	//"ip": "192.168.100.163"
	//}
	//]
	//}
	//}
	//
	Inputs *types.Value `protobuf:"bytes,19,opt,name=inputs,proto3" json:"inputs" form:"inputs"`
	//
	//通知条件 "OnSuccess", "OnFailure", "OnTimeout"
	InformCondition []string `protobuf:"bytes,20,rep,name=informCondition,proto3" json:"informCondition" form:"informCondition"`
	//
	//前置节点信息
	Parents              []*FlowStep_Parents `protobuf:"bytes,21,rep,name=parents,proto3" json:"parents" form:"parents"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FlowStep) Reset()         { *m = FlowStep{} }
func (m *FlowStep) String() string { return proto.CompactTextString(m) }
func (*FlowStep) ProtoMessage()    {}
func (*FlowStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_3300bd14b39a70f6, []int{0}
}
func (m *FlowStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowStep.Unmarshal(m, b)
}
func (m *FlowStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowStep.Marshal(b, m, deterministic)
}
func (m *FlowStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowStep.Merge(m, src)
}
func (m *FlowStep) XXX_Size() int {
	return xxx_messageInfo_FlowStep.Size(m)
}
func (m *FlowStep) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowStep.DiscardUnknown(m)
}

var xxx_messageInfo_FlowStep proto.InternalMessageInfo

func (m *FlowStep) GetStepId() int32 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *FlowStep) GetToolId() string {
	if m != nil {
		return m.ToolId
	}
	return ""
}

func (m *FlowStep) GetActions() []*FlowStep_Actions {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *FlowStep) GetApprovers() []string {
	if m != nil {
		return m.Approvers
	}
	return nil
}

func (m *FlowStep) GetMailToApprovers() bool {
	if m != nil {
		return m.MailToApprovers
	}
	return false
}

func (m *FlowStep) GetStepName() string {
	if m != nil {
		return m.StepName
	}
	return ""
}

func (m *FlowStep) GetVId() string {
	if m != nil {
		return m.VId
	}
	return ""
}

func (m *FlowStep) GetExecUser() string {
	if m != nil {
		return m.ExecUser
	}
	return ""
}

func (m *FlowStep) GetFailureExit() bool {
	if m != nil {
		return m.FailureExit
	}
	return false
}

func (m *FlowStep) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *FlowStep) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FlowStep) GetXX() float32 {
	if m != nil {
		return m.XX
	}
	return 0
}

func (m *FlowStep) GetXY() float32 {
	if m != nil {
		return m.XY
	}
	return 0
}

func (m *FlowStep) GetRoot() bool {
	if m != nil {
		return m.Root
	}
	return false
}

func (m *FlowStep) GetXDx() float32 {
	if m != nil {
		return m.XDx
	}
	return 0
}

func (m *FlowStep) GetXDy() float32 {
	if m != nil {
		return m.XDy
	}
	return 0
}

func (m *FlowStep) GetStyles() *FlowStep_Styles {
	if m != nil {
		return m.Styles
	}
	return nil
}

func (m *FlowStep) GetOutputs() *types.Value {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *FlowStep) GetInputs() *types.Value {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *FlowStep) GetInformCondition() []string {
	if m != nil {
		return m.InformCondition
	}
	return nil
}

func (m *FlowStep) GetParents() []*FlowStep_Parents {
	if m != nil {
		return m.Parents
	}
	return nil
}

type FlowStep_Actions struct {
	//
	//标题
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label" form:"label"`
	//
	//值
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" form:"value"`
	//
	//是否中断
	Terminate            bool     `protobuf:"varint,3,opt,name=terminate,proto3" json:"terminate" form:"terminate"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowStep_Actions) Reset()         { *m = FlowStep_Actions{} }
func (m *FlowStep_Actions) String() string { return proto.CompactTextString(m) }
func (*FlowStep_Actions) ProtoMessage()    {}
func (*FlowStep_Actions) Descriptor() ([]byte, []int) {
	return fileDescriptor_3300bd14b39a70f6, []int{0, 0}
}
func (m *FlowStep_Actions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowStep_Actions.Unmarshal(m, b)
}
func (m *FlowStep_Actions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowStep_Actions.Marshal(b, m, deterministic)
}
func (m *FlowStep_Actions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowStep_Actions.Merge(m, src)
}
func (m *FlowStep_Actions) XXX_Size() int {
	return xxx_messageInfo_FlowStep_Actions.Size(m)
}
func (m *FlowStep_Actions) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowStep_Actions.DiscardUnknown(m)
}

var xxx_messageInfo_FlowStep_Actions proto.InternalMessageInfo

func (m *FlowStep_Actions) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *FlowStep_Actions) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *FlowStep_Actions) GetTerminate() bool {
	if m != nil {
		return m.Terminate
	}
	return false
}

type FlowStep_Styles struct {
	//
	//宽
	Width                float32  `protobuf:"fixed32,1,opt,name=width,proto3" json:"width" form:"width"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowStep_Styles) Reset()         { *m = FlowStep_Styles{} }
func (m *FlowStep_Styles) String() string { return proto.CompactTextString(m) }
func (*FlowStep_Styles) ProtoMessage()    {}
func (*FlowStep_Styles) Descriptor() ([]byte, []int) {
	return fileDescriptor_3300bd14b39a70f6, []int{0, 1}
}
func (m *FlowStep_Styles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowStep_Styles.Unmarshal(m, b)
}
func (m *FlowStep_Styles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowStep_Styles.Marshal(b, m, deterministic)
}
func (m *FlowStep_Styles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowStep_Styles.Merge(m, src)
}
func (m *FlowStep_Styles) XXX_Size() int {
	return xxx_messageInfo_FlowStep_Styles.Size(m)
}
func (m *FlowStep_Styles) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowStep_Styles.DiscardUnknown(m)
}

var xxx_messageInfo_FlowStep_Styles proto.InternalMessageInfo

func (m *FlowStep_Styles) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

type FlowStep_Parents struct {
	//
	//步骤名称
	StepName string `protobuf:"bytes,1,opt,name=stepName,proto3" json:"stepName" form:"stepName"`
	//
	//步骤序号
	StepId int32 `protobuf:"varint,2,opt,name=stepId,proto3" json:"stepId" form:"stepId"`
	//
	//连线起点位置
	SourcePoint string `protobuf:"bytes,3,opt,name=sourcePoint,proto3" json:"sourcePoint" form:"sourcePoint"`
	//
	//连线终点位置
	TargetPoint          string   `protobuf:"bytes,4,opt,name=targetPoint,proto3" json:"targetPoint" form:"targetPoint"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowStep_Parents) Reset()         { *m = FlowStep_Parents{} }
func (m *FlowStep_Parents) String() string { return proto.CompactTextString(m) }
func (*FlowStep_Parents) ProtoMessage()    {}
func (*FlowStep_Parents) Descriptor() ([]byte, []int) {
	return fileDescriptor_3300bd14b39a70f6, []int{0, 2}
}
func (m *FlowStep_Parents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowStep_Parents.Unmarshal(m, b)
}
func (m *FlowStep_Parents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowStep_Parents.Marshal(b, m, deterministic)
}
func (m *FlowStep_Parents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowStep_Parents.Merge(m, src)
}
func (m *FlowStep_Parents) XXX_Size() int {
	return xxx_messageInfo_FlowStep_Parents.Size(m)
}
func (m *FlowStep_Parents) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowStep_Parents.DiscardUnknown(m)
}

var xxx_messageInfo_FlowStep_Parents proto.InternalMessageInfo

func (m *FlowStep_Parents) GetStepName() string {
	if m != nil {
		return m.StepName
	}
	return ""
}

func (m *FlowStep_Parents) GetStepId() int32 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *FlowStep_Parents) GetSourcePoint() string {
	if m != nil {
		return m.SourcePoint
	}
	return ""
}

func (m *FlowStep_Parents) GetTargetPoint() string {
	if m != nil {
		return m.TargetPoint
	}
	return ""
}

func init() {
	proto.RegisterType((*FlowStep)(nil), "flow.FlowStep")
	proto.RegisterType((*FlowStep_Actions)(nil), "flow.FlowStep.Actions")
	proto.RegisterType((*FlowStep_Styles)(nil), "flow.FlowStep.Styles")
	proto.RegisterType((*FlowStep_Parents)(nil), "flow.FlowStep.Parents")
}

func init() { proto.RegisterFile("flow_step.proto", fileDescriptor_3300bd14b39a70f6) }

var fileDescriptor_3300bd14b39a70f6 = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xc7, 0x21, 0x3b, 0xf1, 0x07, 0x9d, 0xc4, 0x29, 0xdb, 0x06, 0x84, 0x51, 0x40, 0x1e, 0x1b,
	0x0c, 0x0a, 0x50, 0x49, 0x69, 0x32, 0x14, 0x6d, 0x2e, 0x86, 0xc6, 0xcb, 0x06, 0xe4, 0xa6, 0x28,
	0xd8, 0xae, 0xd8, 0x5a, 0xa4, 0x06, 0x6d, 0x31, 0xae, 0x30, 0xd9, 0x14, 0x24, 0xca, 0x1f, 0xed,
	0xf2, 0x08, 0x7b, 0x91, 0xbd, 0xd1, 0x6e, 0x34, 0x60, 0x8f, 0xa0, 0x27, 0x18, 0x48, 0xca, 0x36,
	0xe3, 0x0c, 0xdb, 0xee, 0xa4, 0xf3, 0xff, 0xfd, 0xcf, 0xd1, 0x39, 0xe6, 0xa1, 0x41, 0xfb, 0x3a,
	0xe2, 0xb3, 0x7e, 0x2a, 0x58, 0xec, 0xc5, 0x09, 0x17, 0x1c, 0x6e, 0xc9, 0x40, 0xc7, 0x1d, 0x85,
	0xe2, 0x53, 0x36, 0xf0, 0x86, 0x7c, 0xec, 0x8f, 0xf8, 0x88, 0xfb, 0x4a, 0x1c, 0x64, 0xd7, 0xea,
	0x4d, 0xbd, 0xa8, 0x27, 0x6d, 0xea, 0x3c, 0x33, 0xf0, 0xf1, 0x2c, 0x14, 0xbf, 0xf0, 0x99, 0x3f,
	0xe2, 0xae, 0x12, 0xdd, 0x29, 0x8d, 0xc2, 0x80, 0x0a, 0x9e, 0xa4, 0xfe, 0xea, 0xb1, 0xf4, 0x3d,
	0x1a, 0x71, 0x3e, 0x8a, 0xd8, 0x3a, 0x7b, 0x2a, 0x92, 0x6c, 0x28, 0xb4, 0x8a, 0x7f, 0xdf, 0x01,
	0x8d, 0x1f, 0x22, 0x3e, 0x7b, 0x23, 0x58, 0x0c, 0x8f, 0x40, 0x4d, 0x7e, 0xe5, 0x65, 0x80, 0xac,
	0xae, 0xe5, 0x6c, 0xf7, 0xee, 0x15, 0xb9, 0xbd, 0x7b, 0xcd, 0x93, 0xf1, 0x19, 0xd6, 0x71, 0x4c,
	0x4a, 0x40, 0xa2, 0x82, 0xf3, 0xe8, 0x32, 0x40, 0x95, 0xae, 0xe5, 0x34, 0x4d, 0x54, 0xc7, 0x31,
	0x29, 0x01, 0x78, 0x01, 0xea, 0x74, 0x28, 0x42, 0x3e, 0x49, 0x51, 0xb5, 0x5b, 0x75, 0x5a, 0x27,
	0x07, 0x9e, 0xec, 0xdf, 0x5b, 0x96, 0xf5, 0xce, 0xb5, 0xda, 0x83, 0x45, 0x6e, 0xef, 0xe9, 0x1c,
	0xa5, 0x01, 0x93, 0xa5, 0x15, 0x46, 0xa0, 0x49, 0xe3, 0x38, 0xe1, 0x53, 0x96, 0xa4, 0x68, 0xab,
	0x5b, 0x75, 0x9a, 0xbd, 0x57, 0x45, 0x6e, 0xef, 0x97, 0xfc, 0x52, 0xc2, 0x7f, 0xfd, 0x69, 0x3f,
	0x03, 0xdf, 0x38, 0x1f, 0x3f, 0x50, 0xf7, 0xf3, 0xb9, 0xfb, 0xfe, 0xd8, 0x7d, 0x71, 0xb5, 0x7e,
	0xec, 0xbb, 0x57, 0x5f, 0x4e, 0x9e, 0x9c, 0x3e, 0xbd, 0x39, 0x3a, 0xfc, 0xd5, 0xf9, 0x78, 0xf6,
	0xe1, 0xd8, 0x7d, 0x41, 0xdd, 0xcf, 0x57, 0x5f, 0x9e, 0x9e, 0xde, 0x1c, 0x1d, 0x92, 0x75, 0x01,
	0x78, 0x01, 0xda, 0x63, 0x1a, 0x46, 0x6f, 0xf9, 0xf9, 0xaa, 0xe6, 0x76, 0xd7, 0x72, 0x1a, 0xbd,
	0x4e, 0x91, 0xdb, 0x07, 0xba, 0xe6, 0x06, 0x80, 0xc9, 0xa6, 0x05, 0xfa, 0xa0, 0x21, 0xc7, 0xf5,
	0x8a, 0x8e, 0x19, 0xaa, 0xa9, 0x31, 0xdd, 0x2f, 0x72, 0xbb, 0xbd, 0x9e, 0xa8, 0x54, 0x30, 0x59,
	0x41, 0xb0, 0x0b, 0xaa, 0xd3, 0xcb, 0x00, 0xd5, 0x15, 0xbb, 0x57, 0xe4, 0x36, 0xd0, 0xec, 0x54,
	0xce, 0x53, 0x4a, 0xf0, 0x1d, 0x68, 0xb0, 0x39, 0x1b, 0xfe, 0x98, 0xb2, 0x04, 0x35, 0x14, 0x76,
	0xb6, 0x4e, 0xb9, 0x54, 0xe4, 0x10, 0x1e, 0x83, 0xaf, 0x6e, 0xcd, 0xc0, 0xbb, 0x3b, 0x84, 0x43,
	0xb2, 0xca, 0x05, 0x9f, 0x83, 0xd6, 0x35, 0x0d, 0xa3, 0x2c, 0x61, 0xdf, 0xcf, 0x43, 0x81, 0x9a,
	0xaa, 0xd9, 0x83, 0x22, 0xb7, 0xa1, 0x4e, 0x6d, 0x88, 0x98, 0x98, 0x28, 0x7c, 0x02, 0xea, 0x69,
	0x36, 0x78, 0xbb, 0x88, 0x19, 0x02, 0xea, 0x83, 0x8c, 0x9f, 0xb1, 0x14, 0x30, 0x59, 0x22, 0xf0,
	0x31, 0xd8, 0x12, 0x12, 0x6d, 0x29, 0xb4, 0x5d, 0xe4, 0x76, 0xab, 0x3c, 0x35, 0x8a, 0x53, 0x22,
	0x7c, 0x04, 0x2a, 0xfd, 0x39, 0xda, 0xe9, 0x5a, 0x4e, 0xa5, 0xb7, 0x5b, 0xe4, 0x76, 0x53, 0x23,
	0xfd, 0x39, 0x26, 0xd6, 0x4f, 0x4a, 0x5d, 0xa0, 0xdd, 0x3b, 0xea, 0x02, 0x13, 0xeb, 0x67, 0x59,
	0x20, 0xe1, 0x5c, 0xa0, 0x3d, 0xd5, 0x81, 0x51, 0x40, 0x46, 0x31, 0x51, 0x22, 0xb4, 0x41, 0xb5,
	0x1f, 0xcc, 0x51, 0x5b, 0xe5, 0x30, 0xe6, 0xdc, 0x0f, 0xe6, 0x98, 0x54, 0x2e, 0xe6, 0x1a, 0x58,
	0xa0, 0xfd, 0xbb, 0xc0, 0x42, 0x02, 0x0b, 0xf8, 0x52, 0xae, 0xca, 0x22, 0x62, 0x29, 0xba, 0xd7,
	0xb5, 0x9c, 0xd6, 0xc9, 0xc3, 0x8d, 0x33, 0xfd, 0x46, 0x89, 0xb7, 0x37, 0x48, 0x46, 0xd4, 0x06,
	0xc9, 0x07, 0xb9, 0x16, 0x3c, 0x13, 0x71, 0x26, 0x52, 0x04, 0x55, 0x8a, 0x03, 0x4f, 0x6f, 0xaa,
	0xb7, 0xdc, 0x54, 0xef, 0x1d, 0x8d, 0x32, 0x66, 0xce, 0xb3, 0x34, 0x60, 0xb2, 0xb4, 0xc2, 0x73,
	0x50, 0x0b, 0x27, 0x2a, 0xc9, 0xfd, 0x7f, 0x4d, 0x62, 0x7c, 0x88, 0xe6, 0x31, 0x29, 0x8d, 0xf2,
	0xac, 0x87, 0x13, 0x29, 0x7d, 0xc7, 0x27, 0x41, 0x28, 0xb7, 0x0d, 0x3d, 0x50, 0xfb, 0x65, 0x9c,
	0xf5, 0x0d, 0x00, 0x93, 0x4d, 0x8b, 0x6c, 0x27, 0xa6, 0x09, 0x9b, 0x88, 0x14, 0x3d, 0xfc, 0xc7,
	0x2d, 0x7f, 0xad, 0x55, 0xb3, 0x9d, 0xd2, 0x80, 0xc9, 0xd2, 0xda, 0xf9, 0xcd, 0x02, 0xf5, 0xf2,
	0x3a, 0x80, 0x5f, 0x83, 0xed, 0x88, 0x0e, 0x58, 0xa4, 0x2e, 0xa3, 0x66, 0x6f, 0xbf, 0xc8, 0xed,
	0x1d, 0xed, 0x53, 0x61, 0x4c, 0xb4, 0x2c, 0xb9, 0xa9, 0xec, 0xb1, 0xbc, 0x89, 0x0c, 0x4e, 0x85,
	0x31, 0xd1, 0x32, 0x3c, 0x01, 0x4d, 0xc1, 0x92, 0x71, 0x38, 0xa1, 0x82, 0xa1, 0xaa, 0x3a, 0x1e,
	0x0f, 0xd6, 0x37, 0xc8, 0x4a, 0xc2, 0x64, 0x8d, 0x75, 0x8e, 0x41, 0x4d, 0xff, 0x92, 0xb2, 0xca,
	0x2c, 0x0c, 0xc4, 0x27, 0xf5, 0x35, 0x15, 0xb3, 0x8a, 0x0a, 0x63, 0xa2, 0xe5, 0xce, 0x1f, 0x16,
	0xa8, 0x97, 0xad, 0xde, 0xda, 0x7f, 0xeb, 0xff, 0xec, 0xff, 0xfa, 0x02, 0xae, 0xfc, 0xd7, 0x05,
	0xfc, 0x1c, 0xb4, 0x52, 0x9e, 0x25, 0x43, 0xf6, 0x9a, 0x87, 0x13, 0xa1, 0xfa, 0x69, 0x9a, 0x0b,
	0x6b, 0x88, 0x98, 0x98, 0xa8, 0x74, 0x0a, 0x9a, 0x8c, 0x98, 0xd0, 0xce, 0xad, 0x4d, 0xa7, 0x21,
	0x62, 0x62, 0xa2, 0xbd, 0x97, 0xef, 0xbf, 0x1d, 0x71, 0x8f, 0xd1, 0x74, 0xc1, 0xe3, 0xd4, 0x8b,
	0xf8, 0x90, 0x46, 0xfe, 0x90, 0x4f, 0x44, 0x42, 0x87, 0x22, 0xd5, 0x7f, 0x30, 0x09, 0x8b, 0xb9,
	0x3b, 0xe6, 0x01, 0x8b, 0x52, 0xbf, 0x04, 0x7d, 0xf5, 0xea, 0xcb, 0xd3, 0x30, 0xa8, 0x29, 0xe8,
	0xf4, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0xfc, 0x63, 0xa2, 0x13, 0x07, 0x00, 0x00,
}
