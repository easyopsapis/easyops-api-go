// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flow.proto

package flow

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//流程信息
type Flow struct {
	//
	//流程ID
	FlowId string `protobuf:"bytes,1,opt,name=flowId,proto3" json:"flowId" form:"flowId"`
	//
	//流程名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//流程自定义分类
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type" form:"type"`
	//
	//流程类别如流水线、流程、流水线模板等
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category" form:"category"`
	//
	//流程版本名
	VName string `protobuf:"bytes,5,opt,name=vName,proto3" json:"vName" form:"vName"`
	//
	//是否可循环
	EnableLoop bool `protobuf:"varint,6,opt,name=enableLoop,proto3" json:"enableLoop" form:"enableLoop"`
	//
	//是否只读
	ReadOnly bool `protobuf:"varint,7,opt,name=readOnly,proto3" json:"readOnly" form:"readOnly"`
	//
	//org
	Org int32 `protobuf:"varint,8,opt,name=org,proto3" json:"org" form:"org"`
	//
	//创建时间
	CreateTime string `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime" form:"createTime"`
	//
	//流程创建者
	Creator string `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator" form:"creator"`
	//
	//版本创建者
	VCreator string `protobuf:"bytes,11,opt,name=vCreator,proto3" json:"vCreator" form:"vCreator"`
	//
	//修改时间
	UpdateTime string `protobuf:"bytes,12,opt,name=updateTime,proto3" json:"updateTime" form:"updateTime"`
	//
	//版本号(时间戳-秒)
	Version int32 `protobuf:"varint,13,opt,name=version,proto3" json:"version" form:"version"`
	//
	//版本说明
	VDesc string `protobuf:"bytes,14,opt,name=vDesc,proto3" json:"vDesc" form:"vDesc"`
	//
	//流程查询权限列表["username",":user_group_id"]
	ReadAuthorizers []string `protobuf:"bytes,15,rep,name=readAuthorizers,proto3" json:"readAuthorizers" form:"readAuthorizers"`
	//
	//流程更新权限列表["username",":user_group_id"]
	UpdateAuthorizers []string `protobuf:"bytes,16,rep,name=updateAuthorizers,proto3" json:"updateAuthorizers" form:"updateAuthorizers"`
	//
	//流程删除权限列表["username",":user_group_id"]
	DeleteAuthorizers []string `protobuf:"bytes,17,rep,name=deleteAuthorizers,proto3" json:"deleteAuthorizers" form:"deleteAuthorizers"`
	//
	//流程执行权限列表["username",":user_group_id"]
	ExecuteAuthorizers []string `protobuf:"bytes,18,rep,name=executeAuthorizers,proto3" json:"executeAuthorizers" form:"executeAuthorizers"`
	//
	//流程备注
	Memo string `protobuf:"bytes,19,opt,name=memo,proto3" json:"memo" form:"memo"`
	//
	//通知订阅者，英文逗号分开
	Subscribers []string `protobuf:"bytes,20,rep,name=subscribers,proto3" json:"subscribers" form:"subscribers"`
	//
	//通知事件
	SubscribedChannel string `protobuf:"bytes,21,opt,name=subscribedChannel,proto3" json:"subscribedChannel" form:"subscribedChannel"`
	//
	//是否系统ORG
	IsSystemOrg bool `protobuf:"varint,22,opt,name=is_system_org,json=isSystemOrg,proto3" json:"is_system_org" form:"is_system_org"`
	//
	//流程步骤
	StepList []*FlowStep `protobuf:"bytes,23,rep,name=stepList,proto3" json:"stepList" form:"stepList"`
	//
	//表格输出定义
	TableDefs []*Flow_TableDefs `protobuf:"bytes,24,rep,name=tableDefs,proto3" json:"tableDefs" form:"tableDefs"`
	//
	//流程环境变量 { "youcash":"1234",
	//}
	FlowEnv *types.Value `protobuf:"bytes,25,opt,name=flowEnv,proto3" json:"flowEnv" form:"flowEnv"`
	//
	//流程标签
	Tags []string `protobuf:"bytes,26,rep,name=tags,proto3" json:"tags" form:"tags"`
	//
	//流程环境类型
	Metadata *Flow_Metadata `protobuf:"bytes,27,opt,name=metadata,proto3" json:"metadata" form:"metadata"`
	//
	//流程输入
	//{
	//"flowInputs": {
	//"@agents": [
	//{
	//"instanceId": "5c6f6cf0d8079",
	//"ip": "192.168.100.162"
	//},
	//{
	//"instanceId": "5c6f6cf0d8075",
	//"ip": "192.168.100.163"
	//}
	//],
	//"must_input": "1",
	//"option_input": "000"
	//}
	//}
	//
	FlowInputs *types.Value `protobuf:"bytes,28,opt,name=flowInputs,proto3" json:"flowInputs" form:"flowInputs"`
	//
	//流程输出设置
	FlowOutputs []*Flow_FlowOutputs `protobuf:"bytes,29,rep,name=flowOutputs,proto3" json:"flowOutputs" form:"flowOutputs"`
	//
	//输出定义
	OutputDefs []*Flow_OutputDefs `protobuf:"bytes,30,rep,name=outputDefs,proto3" json:"outputDefs" form:"outputDefs"`
	//
	//流程执行历史
	Histories            []*types.Struct `protobuf:"bytes,31,rep,name=histories,proto3" json:"histories" form:"histories"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Flow) Reset()         { *m = Flow{} }
func (m *Flow) String() string { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()    {}
func (*Flow) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0}
}
func (m *Flow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow.Unmarshal(m, b)
}
func (m *Flow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow.Marshal(b, m, deterministic)
}
func (m *Flow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow.Merge(m, src)
}
func (m *Flow) XXX_Size() int {
	return xxx_messageInfo_Flow.Size(m)
}
func (m *Flow) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow.DiscardUnknown(m)
}

var xxx_messageInfo_Flow proto.InternalMessageInfo

func (m *Flow) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *Flow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flow) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Flow) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Flow) GetVName() string {
	if m != nil {
		return m.VName
	}
	return ""
}

func (m *Flow) GetEnableLoop() bool {
	if m != nil {
		return m.EnableLoop
	}
	return false
}

func (m *Flow) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *Flow) GetOrg() int32 {
	if m != nil {
		return m.Org
	}
	return 0
}

func (m *Flow) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *Flow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Flow) GetVCreator() string {
	if m != nil {
		return m.VCreator
	}
	return ""
}

func (m *Flow) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *Flow) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Flow) GetVDesc() string {
	if m != nil {
		return m.VDesc
	}
	return ""
}

func (m *Flow) GetReadAuthorizers() []string {
	if m != nil {
		return m.ReadAuthorizers
	}
	return nil
}

func (m *Flow) GetUpdateAuthorizers() []string {
	if m != nil {
		return m.UpdateAuthorizers
	}
	return nil
}

func (m *Flow) GetDeleteAuthorizers() []string {
	if m != nil {
		return m.DeleteAuthorizers
	}
	return nil
}

func (m *Flow) GetExecuteAuthorizers() []string {
	if m != nil {
		return m.ExecuteAuthorizers
	}
	return nil
}

func (m *Flow) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Flow) GetSubscribers() []string {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *Flow) GetSubscribedChannel() string {
	if m != nil {
		return m.SubscribedChannel
	}
	return ""
}

func (m *Flow) GetIsSystemOrg() bool {
	if m != nil {
		return m.IsSystemOrg
	}
	return false
}

func (m *Flow) GetStepList() []*FlowStep {
	if m != nil {
		return m.StepList
	}
	return nil
}

func (m *Flow) GetTableDefs() []*Flow_TableDefs {
	if m != nil {
		return m.TableDefs
	}
	return nil
}

func (m *Flow) GetFlowEnv() *types.Value {
	if m != nil {
		return m.FlowEnv
	}
	return nil
}

func (m *Flow) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Flow) GetMetadata() *Flow_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Flow) GetFlowInputs() *types.Value {
	if m != nil {
		return m.FlowInputs
	}
	return nil
}

func (m *Flow) GetFlowOutputs() []*Flow_FlowOutputs {
	if m != nil {
		return m.FlowOutputs
	}
	return nil
}

func (m *Flow) GetOutputDefs() []*Flow_OutputDefs {
	if m != nil {
		return m.OutputDefs
	}
	return nil
}

func (m *Flow) GetHistories() []*types.Struct {
	if m != nil {
		return m.Histories
	}
	return nil
}

type Flow_TableDefs struct {
	//
	//输出表格id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id"`
	//
	//输出表格标题
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//维度列
	Dimensions []*Flow_TableDefs_Dimensions `protobuf:"bytes,3,rep,name=dimensions,proto3" json:"dimensions" form:"dimensions"`
	//
	//输出列
	Columns              []*Flow_TableDefs_Columns `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns" form:"columns"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Flow_TableDefs) Reset()         { *m = Flow_TableDefs{} }
func (m *Flow_TableDefs) String() string { return proto.CompactTextString(m) }
func (*Flow_TableDefs) ProtoMessage()    {}
func (*Flow_TableDefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 0}
}
func (m *Flow_TableDefs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow_TableDefs.Unmarshal(m, b)
}
func (m *Flow_TableDefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow_TableDefs.Marshal(b, m, deterministic)
}
func (m *Flow_TableDefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow_TableDefs.Merge(m, src)
}
func (m *Flow_TableDefs) XXX_Size() int {
	return xxx_messageInfo_Flow_TableDefs.Size(m)
}
func (m *Flow_TableDefs) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow_TableDefs.DiscardUnknown(m)
}

var xxx_messageInfo_Flow_TableDefs proto.InternalMessageInfo

func (m *Flow_TableDefs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Flow_TableDefs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flow_TableDefs) GetDimensions() []*Flow_TableDefs_Dimensions {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Flow_TableDefs) GetColumns() []*Flow_TableDefs_Columns {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Flow_TableDefs_Dimensions struct {
	//
	//列id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id"`
	//
	//列标题
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow_TableDefs_Dimensions) Reset()         { *m = Flow_TableDefs_Dimensions{} }
func (m *Flow_TableDefs_Dimensions) String() string { return proto.CompactTextString(m) }
func (*Flow_TableDefs_Dimensions) ProtoMessage()    {}
func (*Flow_TableDefs_Dimensions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 0, 0}
}
func (m *Flow_TableDefs_Dimensions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow_TableDefs_Dimensions.Unmarshal(m, b)
}
func (m *Flow_TableDefs_Dimensions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow_TableDefs_Dimensions.Marshal(b, m, deterministic)
}
func (m *Flow_TableDefs_Dimensions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow_TableDefs_Dimensions.Merge(m, src)
}
func (m *Flow_TableDefs_Dimensions) XXX_Size() int {
	return xxx_messageInfo_Flow_TableDefs_Dimensions.Size(m)
}
func (m *Flow_TableDefs_Dimensions) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow_TableDefs_Dimensions.DiscardUnknown(m)
}

var xxx_messageInfo_Flow_TableDefs_Dimensions proto.InternalMessageInfo

func (m *Flow_TableDefs_Dimensions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Flow_TableDefs_Dimensions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Flow_TableDefs_Columns struct {
	//
	//列id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id"`
	//
	//列标题
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow_TableDefs_Columns) Reset()         { *m = Flow_TableDefs_Columns{} }
func (m *Flow_TableDefs_Columns) String() string { return proto.CompactTextString(m) }
func (*Flow_TableDefs_Columns) ProtoMessage()    {}
func (*Flow_TableDefs_Columns) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 0, 1}
}
func (m *Flow_TableDefs_Columns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow_TableDefs_Columns.Unmarshal(m, b)
}
func (m *Flow_TableDefs_Columns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow_TableDefs_Columns.Marshal(b, m, deterministic)
}
func (m *Flow_TableDefs_Columns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow_TableDefs_Columns.Merge(m, src)
}
func (m *Flow_TableDefs_Columns) XXX_Size() int {
	return xxx_messageInfo_Flow_TableDefs_Columns.Size(m)
}
func (m *Flow_TableDefs_Columns) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow_TableDefs_Columns.DiscardUnknown(m)
}

var xxx_messageInfo_Flow_TableDefs_Columns proto.InternalMessageInfo

func (m *Flow_TableDefs_Columns) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Flow_TableDefs_Columns) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Flow_Metadata struct {
	//
	//环境
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type" form:"type"`
	//
	//描述
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc" form:"desc"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow_Metadata) Reset()         { *m = Flow_Metadata{} }
func (m *Flow_Metadata) String() string { return proto.CompactTextString(m) }
func (*Flow_Metadata) ProtoMessage()    {}
func (*Flow_Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 1}
}
func (m *Flow_Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow_Metadata.Unmarshal(m, b)
}
func (m *Flow_Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow_Metadata.Marshal(b, m, deterministic)
}
func (m *Flow_Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow_Metadata.Merge(m, src)
}
func (m *Flow_Metadata) XXX_Size() int {
	return xxx_messageInfo_Flow_Metadata.Size(m)
}
func (m *Flow_Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Flow_Metadata proto.InternalMessageInfo

func (m *Flow_Metadata) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Flow_Metadata) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type Flow_FlowOutputs struct {
	//
	//流程输出参数设置
	Columns              []*Flow_FlowOutputs_Columns `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns" form:"columns"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Flow_FlowOutputs) Reset()         { *m = Flow_FlowOutputs{} }
func (m *Flow_FlowOutputs) String() string { return proto.CompactTextString(m) }
func (*Flow_FlowOutputs) ProtoMessage()    {}
func (*Flow_FlowOutputs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 2}
}
func (m *Flow_FlowOutputs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow_FlowOutputs.Unmarshal(m, b)
}
func (m *Flow_FlowOutputs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow_FlowOutputs.Marshal(b, m, deterministic)
}
func (m *Flow_FlowOutputs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow_FlowOutputs.Merge(m, src)
}
func (m *Flow_FlowOutputs) XXX_Size() int {
	return xxx_messageInfo_Flow_FlowOutputs.Size(m)
}
func (m *Flow_FlowOutputs) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow_FlowOutputs.DiscardUnknown(m)
}

var xxx_messageInfo_Flow_FlowOutputs proto.InternalMessageInfo

func (m *Flow_FlowOutputs) GetColumns() []*Flow_FlowOutputs_Columns {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Flow_FlowOutputs_Columns struct {
	//
	//参数类型
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type" form:"type"`
	//
	//参数ID
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" form:"id"`
	//
	//参数标题
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow_FlowOutputs_Columns) Reset()         { *m = Flow_FlowOutputs_Columns{} }
func (m *Flow_FlowOutputs_Columns) String() string { return proto.CompactTextString(m) }
func (*Flow_FlowOutputs_Columns) ProtoMessage()    {}
func (*Flow_FlowOutputs_Columns) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 2, 0}
}
func (m *Flow_FlowOutputs_Columns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow_FlowOutputs_Columns.Unmarshal(m, b)
}
func (m *Flow_FlowOutputs_Columns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow_FlowOutputs_Columns.Marshal(b, m, deterministic)
}
func (m *Flow_FlowOutputs_Columns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow_FlowOutputs_Columns.Merge(m, src)
}
func (m *Flow_FlowOutputs_Columns) XXX_Size() int {
	return xxx_messageInfo_Flow_FlowOutputs_Columns.Size(m)
}
func (m *Flow_FlowOutputs_Columns) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow_FlowOutputs_Columns.DiscardUnknown(m)
}

var xxx_messageInfo_Flow_FlowOutputs_Columns proto.InternalMessageInfo

func (m *Flow_FlowOutputs_Columns) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Flow_FlowOutputs_Columns) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Flow_FlowOutputs_Columns) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Flow_OutputDefs struct {
	//
	//参数类型
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type" form:"type"`
	//
	//参数ID
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" form:"id"`
	//
	//参数标题
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow_OutputDefs) Reset()         { *m = Flow_OutputDefs{} }
func (m *Flow_OutputDefs) String() string { return proto.CompactTextString(m) }
func (*Flow_OutputDefs) ProtoMessage()    {}
func (*Flow_OutputDefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 3}
}
func (m *Flow_OutputDefs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow_OutputDefs.Unmarshal(m, b)
}
func (m *Flow_OutputDefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow_OutputDefs.Marshal(b, m, deterministic)
}
func (m *Flow_OutputDefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow_OutputDefs.Merge(m, src)
}
func (m *Flow_OutputDefs) XXX_Size() int {
	return xxx_messageInfo_Flow_OutputDefs.Size(m)
}
func (m *Flow_OutputDefs) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow_OutputDefs.DiscardUnknown(m)
}

var xxx_messageInfo_Flow_OutputDefs proto.InternalMessageInfo

func (m *Flow_OutputDefs) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Flow_OutputDefs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Flow_OutputDefs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Flow)(nil), "flow.Flow")
	proto.RegisterType((*Flow_TableDefs)(nil), "flow.Flow.TableDefs")
	proto.RegisterType((*Flow_TableDefs_Dimensions)(nil), "flow.Flow.TableDefs.Dimensions")
	proto.RegisterType((*Flow_TableDefs_Columns)(nil), "flow.Flow.TableDefs.Columns")
	proto.RegisterType((*Flow_Metadata)(nil), "flow.Flow.Metadata")
	proto.RegisterType((*Flow_FlowOutputs)(nil), "flow.Flow.FlowOutputs")
	proto.RegisterType((*Flow_FlowOutputs_Columns)(nil), "flow.Flow.FlowOutputs.Columns")
	proto.RegisterType((*Flow_OutputDefs)(nil), "flow.Flow.OutputDefs")
}

func init() { proto.RegisterFile("flow.proto", fileDescriptor_bb3fc33c49933823) }

var fileDescriptor_bb3fc33c49933823 = []byte{
	// 1309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xdd, 0x4e, 0x1b, 0x47,
	0x14, 0xee, 0x62, 0x12, 0xec, 0x71, 0x08, 0x30, 0x10, 0x32, 0x71, 0x49, 0xd6, 0xdd, 0xa0, 0x68,
	0xdd, 0x64, 0x6d, 0x30, 0x49, 0x24, 0x50, 0x5b, 0x12, 0x42, 0x51, 0x93, 0x26, 0x21, 0x1a, 0x10,
	0x95, 0xe2, 0x3a, 0x68, 0xb1, 0x87, 0x65, 0xd5, 0xb5, 0xc7, 0xda, 0x5d, 0x43, 0x09, 0xd0, 0xab,
	0x4a, 0x7d, 0x81, 0x3e, 0x45, 0xa4, 0x3e, 0x47, 0x2f, 0xfb, 0x06, 0x5b, 0xa9, 0x57, 0xbd, 0xde,
	0x27, 0xa8, 0xe6, 0xec, 0xdf, 0x80, 0x51, 0x8a, 0x94, 0xa8, 0x52, 0x6f, 0xf0, 0xcc, 0x9c, 0xef,
	0xfb, 0xe6, 0x9b, 0x39, 0x33, 0x7b, 0x06, 0x84, 0x76, 0x1d, 0x7e, 0x50, 0xed, 0xb9, 0xdc, 0xe7,
	0x78, 0x58, 0xb4, 0x4b, 0x86, 0x65, 0xfb, 0x7b, 0xfd, 0x9d, 0x6a, 0x8b, 0x77, 0x6a, 0x16, 0xb7,
	0x78, 0x0d, 0x82, 0x3b, 0xfd, 0x5d, 0xe8, 0x41, 0x07, 0x5a, 0x11, 0xa9, 0xf4, 0xd2, 0xe2, 0x55,
	0x66, 0x7a, 0x87, 0xbc, 0xe7, 0x55, 0x1d, 0xde, 0x32, 0x9d, 0x5a, 0x8b, 0x77, 0x7d, 0xd7, 0x6c,
	0xf9, 0x5e, 0xc4, 0x74, 0x59, 0x8f, 0x1b, 0x1d, 0xde, 0x66, 0x8e, 0x57, 0x8b, 0x81, 0x35, 0xe8,
	0xd6, 0xc4, 0x74, 0xf0, 0x67, 0xdb, 0xf3, 0x59, 0x2f, 0xd6, 0x7b, 0x28, 0x4d, 0xdf, 0x39, 0xb0,
	0xfd, 0x1f, 0xf8, 0x41, 0xcd, 0xe2, 0x06, 0x04, 0x8d, 0x7d, 0xd3, 0xb1, 0xdb, 0xa6, 0xcf, 0x5d,
	0xaf, 0x96, 0x36, 0x63, 0xde, 0x8c, 0xc5, 0xb9, 0xe5, 0xb0, 0xcc, 0xad, 0xe7, 0xbb, 0xfd, 0x96,
	0x1f, 0x45, 0xb5, 0x77, 0x25, 0x34, 0xbc, 0xe6, 0xf0, 0x03, 0xfc, 0x08, 0x5d, 0x16, 0x33, 0x3e,
	0x6d, 0x13, 0xa5, 0xac, 0xe8, 0x85, 0x15, 0x3d, 0x0c, 0xd4, 0xd1, 0x5d, 0xee, 0x76, 0x96, 0xb4,
	0x68, 0x5c, 0xfb, 0xeb, 0x4f, 0x75, 0x12, 0x4d, 0xbc, 0x69, 0x98, 0xc6, 0xee, 0x63, 0x63, 0x6d,
	0xce, 0x58, 0x6c, 0x1e, 0x2d, 0xd4, 0x4f, 0x66, 0x69, 0xcc, 0xc3, 0xb7, 0xd1, 0x70, 0xd7, 0xec,
	0x30, 0x32, 0x04, 0xfc, 0xb1, 0x30, 0x50, 0x8b, 0x11, 0x5f, 0x8c, 0x6a, 0x14, 0x82, 0x02, 0xe4,
	0x1f, 0xf6, 0x18, 0xc9, 0x9d, 0x05, 0x89, 0x51, 0x8d, 0x42, 0x10, 0xd7, 0x50, 0xbe, 0x65, 0xfa,
	0xcc, 0xe2, 0xee, 0x21, 0x19, 0x06, 0xe0, 0x64, 0x18, 0xa8, 0x63, 0x11, 0x30, 0x89, 0x68, 0x34,
	0x05, 0xe1, 0x3b, 0xe8, 0xd2, 0xfe, 0x4b, 0x31, 0xf7, 0x25, 0x40, 0x8f, 0x87, 0x81, 0x7a, 0x25,
	0x42, 0xc3, 0xb0, 0x46, 0xa3, 0x30, 0x7e, 0x80, 0x10, 0xeb, 0x9a, 0x3b, 0x0e, 0x7b, 0xce, 0x79,
	0x8f, 0x5c, 0x2e, 0x2b, 0x7a, 0x7e, 0xe5, 0x5a, 0x18, 0xa8, 0x13, 0x11, 0x38, 0x8b, 0x69, 0x54,
	0x02, 0x0a, 0x3f, 0x2e, 0x33, 0xdb, 0xeb, 0x5d, 0xe7, 0x90, 0x8c, 0x00, 0x49, 0xf2, 0x93, 0x44,
	0x34, 0x9a, 0x82, 0xf0, 0x1d, 0x94, 0xe3, 0xae, 0x45, 0xf2, 0x65, 0x45, 0xbf, 0xb4, 0x32, 0x15,
	0x06, 0x2a, 0x8a, 0xb0, 0xdc, 0xb5, 0xc4, 0x36, 0x0e, 0x8d, 0x7f, 0x42, 0x05, 0x00, 0xff, 0xad,
	0x20, 0xd4, 0x72, 0x99, 0xe9, 0xb3, 0x4d, 0xbb, 0xc3, 0x48, 0x01, 0xdc, 0xff, 0xae, 0x64, 0x8e,
	0xb2, 0xa0, 0xe0, 0xfd, 0xa6, 0xa0, 0x77, 0xca, 0x1b, 0x5d, 0x5f, 0x5e, 0x6a, 0xcc, 0x1b, 0x8b,
	0xcd, 0x86, 0xc8, 0xc1, 0xe7, 0x95, 0x65, 0xf8, 0x3d, 0xba, 0x7f, 0x52, 0x31, 0xf4, 0xf9, 0xc6,
	0x9c, 0x51, 0x6f, 0x1e, 0xcf, 0x41, 0xbc, 0x62, 0xe8, 0x0b, 0x8d, 0x39, 0x63, 0x3e, 0xe9, 0x1f,
	0x37, 0xe6, 0x8d, 0x7a, 0xc4, 0xaa, 0x34, 0x36, 0xcb, 0x4d, 0xbd, 0xde, 0x98, 0x33, 0x16, 0x9a,
	0xc7, 0x80, 0x89, 0x86, 0x97, 0xf4, 0xc6, 0x9c, 0xf1, 0x20, 0xe9, 0x64, 0x6d, 0xfd, 0xfb, 0x2a,
	0xfc, 0xde, 0xad, 0x2c, 0xeb, 0xaf, 0x8f, 0x1b, 0x77, 0x8d, 0xa6, 0xbe, 0xbc, 0x74, 0x0e, 0x5d,
	0x62, 0x2f, 0xcf, 0x52, 0x69, 0x6d, 0x78, 0x03, 0x8d, 0x40, 0x8f, 0xbb, 0x04, 0xc1, 0x32, 0x17,
	0xc3, 0x40, 0xbd, 0x2a, 0xad, 0x92, 0xbb, 0x62, 0x89, 0xb7, 0xd1, 0x67, 0xe2, 0x84, 0xbd, 0x7d,
	0x6c, 0xbc, 0x16, 0x2a, 0x8d, 0x6a, 0xda, 0xde, 0x36, 0x9a, 0x47, 0xf5, 0x7b, 0x0b, 0xf3, 0x27,
	0xb3, 0x34, 0x51, 0xc2, 0x5b, 0x28, 0xbf, 0xff, 0x24, 0x56, 0x2d, 0x82, 0xea, 0x52, 0x96, 0x98,
	0x24, 0x72, 0x61, 0xd9, 0x54, 0x0b, 0xf2, 0xd2, 0xef, 0xb5, 0x93, 0xbc, 0x5c, 0x19, 0xc8, 0x4b,
	0x16, 0xfc, 0x5f, 0xe6, 0x25, 0xb3, 0x8f, 0xef, 0xa1, 0x91, 0x7d, 0xe6, 0x7a, 0x36, 0xef, 0x92,
	0x51, 0x38, 0xae, 0x38, 0xcb, 0x4b, 0x1c, 0xd0, 0x68, 0x02, 0x81, 0x8b, 0xb6, 0xca, 0xbc, 0x16,
	0xb9, 0x3a, 0x70, 0xd1, 0xc4, 0xb0, 0xb8, 0x68, 0xe2, 0x17, 0xff, 0x84, 0xc6, 0xc4, 0x65, 0x78,
	0xdc, 0xf7, 0xf7, 0xb8, 0x6b, 0xbf, 0x65, 0xae, 0x47, 0xc6, 0xca, 0x39, 0xbd, 0xb0, 0xb2, 0x19,
	0x06, 0xea, 0x74, 0x76, 0x71, 0x24, 0x80, 0xd8, 0xc8, 0x87, 0xe8, 0xbe, 0x7e, 0x2a, 0x4f, 0x83,
	0x69, 0xaa, 0xcc, 0x1e, 0xeb, 0x6f, 0xc4, 0x7a, 0x16, 0x4d, 0xe3, 0x6d, 0xf3, 0x68, 0x7e, 0xe1,
	0xa4, 0x32, 0x4b, 0xcf, 0x4e, 0x86, 0x7f, 0x56, 0xd0, 0x44, 0xb4, 0x48, 0xd9, 0xc2, 0x38, 0x58,
	0xd8, 0x0a, 0x03, 0x95, 0xc8, 0x69, 0xfc, 0x48, 0x26, 0x06, 0x27, 0x04, 0x1b, 0x6d, 0xe6, 0xb0,
	0xd3, 0x36, 0x26, 0xce, 0xda, 0x18, 0x80, 0x7c, 0x90, 0x8d, 0x01, 0x35, 0xfc, 0x8b, 0x82, 0x30,
	0xfb, 0x91, 0xb5, 0xfa, 0xa7, 0x7d, 0x60, 0xf0, 0xf1, 0x5d, 0x18, 0xa8, 0x37, 0xe2, 0xef, 0xdf,
	0x00, 0xe6, 0x43, 0x8c, 0x9c, 0x33, 0xa5, 0xf8, 0xfc, 0x77, 0x58, 0x87, 0x93, 0xc9, 0xb3, 0x9f,
	0x7f, 0x31, 0xaa, 0x51, 0x08, 0xe2, 0x6d, 0x54, 0xf4, 0xfa, 0x3b, 0x5e, 0xcb, 0xb5, 0x77, 0x84,
	0xcd, 0x29, 0xb0, 0xf9, 0x65, 0x18, 0xa8, 0x38, 0xc2, 0x4a, 0xc1, 0x0b, 0xdf, 0x6d, 0x59, 0x11,
	0x3f, 0x43, 0x13, 0x69, 0xb7, 0xfd, 0x64, 0xcf, 0xec, 0x76, 0x99, 0x43, 0xae, 0x81, 0xa5, 0x99,
	0x2c, 0x2b, 0x03, 0x10, 0x8d, 0x0e, 0xd2, 0xf0, 0x17, 0x68, 0xd4, 0xf6, 0xb6, 0xbd, 0x43, 0xcf,
	0x67, 0x9d, 0x6d, 0xf1, 0xd1, 0x9f, 0x86, 0x02, 0x41, 0xc2, 0x40, 0x9d, 0x8a, 0x74, 0x4e, 0x85,
	0x35, 0x5a, 0xb4, 0xbd, 0x0d, 0xe8, 0xae, 0xbb, 0x16, 0x5e, 0x46, 0x79, 0x51, 0xe2, 0x9f, 0xdb,
	0x9e, 0x4f, 0xae, 0x97, 0x73, 0x7a, 0xb1, 0x7e, 0xb5, 0x0a, 0x0f, 0x0f, 0x51, 0x93, 0x37, 0x7c,
	0xd6, 0x93, 0x2b, 0x4d, 0x82, 0xd4, 0x68, 0x4a, 0xc2, 0xdf, 0xa0, 0x82, 0x2f, 0xea, 0xd4, 0x2a,
	0xdb, 0xf5, 0x08, 0x01, 0x85, 0xa9, 0x4c, 0xa1, 0xba, 0x99, 0xc4, 0xa0, 0x0a, 0x8d, 0xc7, 0xa5,
	0x36, 0x19, 0xd4, 0x68, 0x46, 0xc6, 0xab, 0x68, 0x44, 0xf0, 0xbe, 0xee, 0xee, 0x93, 0x1b, 0x65,
	0x45, 0x2f, 0xd6, 0xa7, 0xab, 0xd1, 0xcb, 0xa1, 0x9a, 0xbc, 0x1c, 0xaa, 0x5b, 0xa6, 0xd3, 0x67,
	0xf2, 0x07, 0x22, 0x26, 0x68, 0x34, 0xa1, 0x42, 0x7d, 0x37, 0x2d, 0x8f, 0x94, 0x20, 0x69, 0x72,
	0x7d, 0x37, 0x2d, 0x4f, 0xd4, 0x77, 0xd3, 0x12, 0x53, 0xe5, 0x3b, 0xcc, 0x37, 0xdb, 0xa6, 0x6f,
	0x92, 0x4f, 0x61, 0xae, 0x49, 0xc9, 0xf3, 0x8b, 0x38, 0x24, 0x2f, 0x3d, 0x81, 0x6b, 0x34, 0x65,
	0xe2, 0x17, 0xd1, 0x1b, 0xed, 0x69, 0xb7, 0xd7, 0xf7, 0x3d, 0x32, 0xf3, 0x5e, 0xcf, 0x52, 0x91,
	0xcf, 0x38, 0x1a, 0x95, 0x04, 0xf0, 0x2b, 0x54, 0x14, 0xbd, 0xf5, 0xbe, 0x0f, 0x7a, 0x37, 0x61,
	0x2f, 0xa7, 0x25, 0x5f, 0x6b, 0x59, 0x74, 0x65, 0x3a, 0x3b, 0x8d, 0x12, 0x49, 0xa3, 0xb2, 0x04,
	0x7e, 0x8e, 0x10, 0x87, 0x26, 0x24, 0xe7, 0x16, 0x08, 0x5e, 0x93, 0x04, 0xd7, 0xd3, 0xa0, 0xec,
	0x2f, 0xa3, 0x68, 0x54, 0xe2, 0xe3, 0x6f, 0x51, 0x61, 0xcf, 0xf6, 0x7c, 0xee, 0xda, 0xcc, 0x23,
	0x2a, 0x88, 0x5d, 0x1f, 0x58, 0xed, 0x06, 0xbc, 0xed, 0xe4, 0x64, 0xa7, 0x1c, 0x8d, 0x66, 0xfc,
	0xd2, 0xaf, 0x39, 0x54, 0x48, 0xcf, 0x06, 0xbe, 0x89, 0x86, 0xec, 0xe4, 0xdd, 0x37, 0x1a, 0x06,
	0x6a, 0x21, 0x3e, 0xb8, 0x6d, 0x8d, 0x0e, 0xd9, 0x17, 0x7c, 0xd8, 0x6d, 0x21, 0xd4, 0xb6, 0x3b,
	0xac, 0x2b, 0xca, 0x84, 0x47, 0x72, 0xe0, 0x4f, 0x3d, 0xef, 0x24, 0x56, 0x57, 0x53, 0x98, 0xbc,
	0xec, 0x8c, 0xac, 0x51, 0x49, 0x09, 0x3f, 0x43, 0x23, 0x2d, 0xee, 0xf4, 0x3b, 0x5d, 0x8f, 0x0c,
	0x83, 0xe8, 0xcc, 0xb9, 0xa2, 0x4f, 0x22, 0x8c, 0x7c, 0x38, 0x63, 0x9a, 0x46, 0x13, 0x81, 0xd2,
	0x2b, 0x84, 0xb2, 0xc9, 0x3f, 0xc6, 0xaa, 0x4b, 0x2f, 0xd0, 0x48, 0x3c, 0xf3, 0x47, 0x91, 0xdb,
	0x44, 0xf9, 0xe4, 0xf4, 0xa7, 0x2f, 0x65, 0xe5, 0x7d, 0x2f, 0xe5, 0xdb, 0x68, 0xb8, 0x2d, 0xca,
	0xf1, 0x80, 0x6a, 0x1b, 0xaa, 0x31, 0x04, 0x4b, 0x7f, 0x28, 0xa8, 0xb8, 0x76, 0xea, 0x5c, 0xa6,
	0x5b, 0xaa, 0xc0, 0x96, 0xde, 0x3a, 0xff, 0x94, 0x5f, 0x6c, 0x53, 0xdd, 0x6c, 0x0b, 0x2e, 0x64,
	0x39, 0xda, 0xa7, 0xa1, 0x7f, 0xdb, 0xa7, 0xdc, 0xfb, 0xf6, 0xa9, 0x8f, 0x50, 0x76, 0x79, 0xfe,
	0xb3, 0x69, 0x57, 0x1e, 0xbd, 0xfe, 0xea, 0xc3, 0xfe, 0xa9, 0xdb, 0xb9, 0x0c, 0xa0, 0x85, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x55, 0x73, 0x82, 0x08, 0x5e, 0x0e, 0x00, 0x00,
}
