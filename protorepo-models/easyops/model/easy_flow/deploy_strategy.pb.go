// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deploy_strategy.proto

package easy_flow

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	cmdb "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/cmdb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
//部署策略信息
type DeployStrategy struct {
	//
	//策略Id，策略Id自动生成
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id"`
	//
	//策略名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//api版本
	ApiVersion string `protobuf:"bytes,3,opt,name=apiVersion,proto3" json:"apiVersion" form:"apiVersion"`
	//
	//组织
	Org int32 `protobuf:"varint,4,opt,name=org,proto3" json:"org" form:"org"`
	//
	//应用相关信息
	App *DeployStrategy_App `protobuf:"bytes,5,opt,name=app,proto3" json:"app" form:"app"`
	//
	//策略类型
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type" form:"type"`
	//
	//批量策略信息
	BatchStrategy *DeployStrategy_BatchStrategy `protobuf:"bytes,7,opt,name=batchStrategy,proto3" json:"batchStrategy" form:"batchStrategy"`
	//
	//范围
	Scope string `protobuf:"bytes,8,opt,name=scope,proto3" json:"scope" form:"scope"`
	//
	//集群列表
	Clusters []*cmdb.ClusterInfo `protobuf:"bytes,9,rep,name=clusters,proto3" json:"clusters" form:"clusters"`
	//
	//目标设备列表
	TargetList []*TargetInfo `protobuf:"bytes,10,rep,name=targetList,proto3" json:"targetList" form:"targetList"`
	//
	//集群环境
	ClusterEnvironment string `protobuf:"bytes,11,opt,name=clusterEnvironment,proto3" json:"clusterEnvironment" form:"clusterEnvironment"`
	//
	//集群类型
	ClusterType string `protobuf:"bytes,12,opt,name=clusterType,proto3" json:"clusterType" form:"clusterType"`
	//
	//部署包信息
	PackageList *DeployStrategy_PackageList `protobuf:"bytes,13,opt,name=packageList,proto3" json:"packageList" form:"packageList"`
	//
	//部署策略状态
	Status               *DeployStrategy_Status `protobuf:"bytes,14,opt,name=status,proto3" json:"status" form:"status"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DeployStrategy) Reset()         { *m = DeployStrategy{} }
func (m *DeployStrategy) String() string { return proto.CompactTextString(m) }
func (*DeployStrategy) ProtoMessage()    {}
func (*DeployStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_157d7033b348d531, []int{0}
}
func (m *DeployStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployStrategy.Unmarshal(m, b)
}
func (m *DeployStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployStrategy.Marshal(b, m, deterministic)
}
func (m *DeployStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployStrategy.Merge(m, src)
}
func (m *DeployStrategy) XXX_Size() int {
	return xxx_messageInfo_DeployStrategy.Size(m)
}
func (m *DeployStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_DeployStrategy proto.InternalMessageInfo

func (m *DeployStrategy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeployStrategy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployStrategy) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *DeployStrategy) GetOrg() int32 {
	if m != nil {
		return m.Org
	}
	return 0
}

func (m *DeployStrategy) GetApp() *DeployStrategy_App {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *DeployStrategy) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeployStrategy) GetBatchStrategy() *DeployStrategy_BatchStrategy {
	if m != nil {
		return m.BatchStrategy
	}
	return nil
}

func (m *DeployStrategy) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *DeployStrategy) GetClusters() []*cmdb.ClusterInfo {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *DeployStrategy) GetTargetList() []*TargetInfo {
	if m != nil {
		return m.TargetList
	}
	return nil
}

func (m *DeployStrategy) GetClusterEnvironment() string {
	if m != nil {
		return m.ClusterEnvironment
	}
	return ""
}

func (m *DeployStrategy) GetClusterType() string {
	if m != nil {
		return m.ClusterType
	}
	return ""
}

func (m *DeployStrategy) GetPackageList() *DeployStrategy_PackageList {
	if m != nil {
		return m.PackageList
	}
	return nil
}

func (m *DeployStrategy) GetStatus() *DeployStrategy_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type DeployStrategy_App struct {
	//
	//应用名
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name"`
	//
	//应用Id
	AppId                string   `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId" form:"appId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployStrategy_App) Reset()         { *m = DeployStrategy_App{} }
func (m *DeployStrategy_App) String() string { return proto.CompactTextString(m) }
func (*DeployStrategy_App) ProtoMessage()    {}
func (*DeployStrategy_App) Descriptor() ([]byte, []int) {
	return fileDescriptor_157d7033b348d531, []int{0, 0}
}
func (m *DeployStrategy_App) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployStrategy_App.Unmarshal(m, b)
}
func (m *DeployStrategy_App) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployStrategy_App.Marshal(b, m, deterministic)
}
func (m *DeployStrategy_App) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployStrategy_App.Merge(m, src)
}
func (m *DeployStrategy_App) XXX_Size() int {
	return xxx_messageInfo_DeployStrategy_App.Size(m)
}
func (m *DeployStrategy_App) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployStrategy_App.DiscardUnknown(m)
}

var xxx_messageInfo_DeployStrategy_App proto.InternalMessageInfo

func (m *DeployStrategy_App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployStrategy_App) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type DeployStrategy_BatchStrategy struct {
	//
	//自动批量策略信息
	AutoBatch *DeployStrategy_BatchStrategy_AutoBatch `protobuf:"bytes,1,opt,name=autoBatch,proto3" json:"autoBatch" form:"autoBatch"`
	//
	//手动批量
	ManualBatch *DeployStrategy_BatchStrategy_ManualBatch `protobuf:"bytes,2,opt,name=manualBatch,proto3" json:"manualBatch" form:"manualBatch"`
	//
	//分批类型
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type" form:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployStrategy_BatchStrategy) Reset()         { *m = DeployStrategy_BatchStrategy{} }
func (m *DeployStrategy_BatchStrategy) String() string { return proto.CompactTextString(m) }
func (*DeployStrategy_BatchStrategy) ProtoMessage()    {}
func (*DeployStrategy_BatchStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_157d7033b348d531, []int{0, 1}
}
func (m *DeployStrategy_BatchStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployStrategy_BatchStrategy.Unmarshal(m, b)
}
func (m *DeployStrategy_BatchStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployStrategy_BatchStrategy.Marshal(b, m, deterministic)
}
func (m *DeployStrategy_BatchStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployStrategy_BatchStrategy.Merge(m, src)
}
func (m *DeployStrategy_BatchStrategy) XXX_Size() int {
	return xxx_messageInfo_DeployStrategy_BatchStrategy.Size(m)
}
func (m *DeployStrategy_BatchStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployStrategy_BatchStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_DeployStrategy_BatchStrategy proto.InternalMessageInfo

func (m *DeployStrategy_BatchStrategy) GetAutoBatch() *DeployStrategy_BatchStrategy_AutoBatch {
	if m != nil {
		return m.AutoBatch
	}
	return nil
}

func (m *DeployStrategy_BatchStrategy) GetManualBatch() *DeployStrategy_BatchStrategy_ManualBatch {
	if m != nil {
		return m.ManualBatch
	}
	return nil
}

func (m *DeployStrategy_BatchStrategy) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type DeployStrategy_BatchStrategy_AutoBatch struct {
	//
	//自动分批:每批次部署机器数;手动分批:部署总共批次
	BatchNum int32 `protobuf:"varint,1,opt,name=batchNum,proto3" json:"batchNum" form:"batchNum"`
	//
	//部署间隔时长(s)
	BatchInterval int32 `protobuf:"varint,2,opt,name=batchInterval,proto3" json:"batchInterval" form:"batchInterval"`
	//
	//是否失败暂停
	FailedStop           string   `protobuf:"bytes,3,opt,name=failedStop,proto3" json:"failedStop" form:"failedStop"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployStrategy_BatchStrategy_AutoBatch) Reset() {
	*m = DeployStrategy_BatchStrategy_AutoBatch{}
}
func (m *DeployStrategy_BatchStrategy_AutoBatch) String() string { return proto.CompactTextString(m) }
func (*DeployStrategy_BatchStrategy_AutoBatch) ProtoMessage()    {}
func (*DeployStrategy_BatchStrategy_AutoBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_157d7033b348d531, []int{0, 1, 0}
}
func (m *DeployStrategy_BatchStrategy_AutoBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_AutoBatch.Unmarshal(m, b)
}
func (m *DeployStrategy_BatchStrategy_AutoBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_AutoBatch.Marshal(b, m, deterministic)
}
func (m *DeployStrategy_BatchStrategy_AutoBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployStrategy_BatchStrategy_AutoBatch.Merge(m, src)
}
func (m *DeployStrategy_BatchStrategy_AutoBatch) XXX_Size() int {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_AutoBatch.Size(m)
}
func (m *DeployStrategy_BatchStrategy_AutoBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployStrategy_BatchStrategy_AutoBatch.DiscardUnknown(m)
}

var xxx_messageInfo_DeployStrategy_BatchStrategy_AutoBatch proto.InternalMessageInfo

func (m *DeployStrategy_BatchStrategy_AutoBatch) GetBatchNum() int32 {
	if m != nil {
		return m.BatchNum
	}
	return 0
}

func (m *DeployStrategy_BatchStrategy_AutoBatch) GetBatchInterval() int32 {
	if m != nil {
		return m.BatchInterval
	}
	return 0
}

func (m *DeployStrategy_BatchStrategy_AutoBatch) GetFailedStop() string {
	if m != nil {
		return m.FailedStop
	}
	return ""
}

type DeployStrategy_BatchStrategy_ManualBatch struct {
	//
	//分批详情
	Batches []*DeployStrategy_BatchStrategy_ManualBatch_Batches `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches" form:"batches"`
	//
	//自动分批:每批次部署机器数;手动分批:部署总共批次
	BatchNum int32 `protobuf:"varint,2,opt,name=batchNum,proto3" json:"batchNum" form:"batchNum"`
	//
	//部署间隔时长(s)
	BatchInterval int32 `protobuf:"varint,3,opt,name=batchInterval,proto3" json:"batchInterval" form:"batchInterval"`
	//
	//是否失败暂停
	FailedStop           string   `protobuf:"bytes,4,opt,name=failedStop,proto3" json:"failedStop" form:"failedStop"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployStrategy_BatchStrategy_ManualBatch) Reset() {
	*m = DeployStrategy_BatchStrategy_ManualBatch{}
}
func (m *DeployStrategy_BatchStrategy_ManualBatch) String() string { return proto.CompactTextString(m) }
func (*DeployStrategy_BatchStrategy_ManualBatch) ProtoMessage()    {}
func (*DeployStrategy_BatchStrategy_ManualBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_157d7033b348d531, []int{0, 1, 1}
}
func (m *DeployStrategy_BatchStrategy_ManualBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch.Unmarshal(m, b)
}
func (m *DeployStrategy_BatchStrategy_ManualBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch.Marshal(b, m, deterministic)
}
func (m *DeployStrategy_BatchStrategy_ManualBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch.Merge(m, src)
}
func (m *DeployStrategy_BatchStrategy_ManualBatch) XXX_Size() int {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch.Size(m)
}
func (m *DeployStrategy_BatchStrategy_ManualBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch.DiscardUnknown(m)
}

var xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch proto.InternalMessageInfo

func (m *DeployStrategy_BatchStrategy_ManualBatch) GetBatches() []*DeployStrategy_BatchStrategy_ManualBatch_Batches {
	if m != nil {
		return m.Batches
	}
	return nil
}

func (m *DeployStrategy_BatchStrategy_ManualBatch) GetBatchNum() int32 {
	if m != nil {
		return m.BatchNum
	}
	return 0
}

func (m *DeployStrategy_BatchStrategy_ManualBatch) GetBatchInterval() int32 {
	if m != nil {
		return m.BatchInterval
	}
	return 0
}

func (m *DeployStrategy_BatchStrategy_ManualBatch) GetFailedStop() string {
	if m != nil {
		return m.FailedStop
	}
	return ""
}

type DeployStrategy_BatchStrategy_ManualBatch_Batches struct {
	//
	//批次主机列表
	Targets              []*DeployBatchTarget `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets" form:"targets"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DeployStrategy_BatchStrategy_ManualBatch_Batches) Reset() {
	*m = DeployStrategy_BatchStrategy_ManualBatch_Batches{}
}
func (m *DeployStrategy_BatchStrategy_ManualBatch_Batches) String() string {
	return proto.CompactTextString(m)
}
func (*DeployStrategy_BatchStrategy_ManualBatch_Batches) ProtoMessage() {}
func (*DeployStrategy_BatchStrategy_ManualBatch_Batches) Descriptor() ([]byte, []int) {
	return fileDescriptor_157d7033b348d531, []int{0, 1, 1, 0}
}
func (m *DeployStrategy_BatchStrategy_ManualBatch_Batches) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch_Batches.Unmarshal(m, b)
}
func (m *DeployStrategy_BatchStrategy_ManualBatch_Batches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch_Batches.Marshal(b, m, deterministic)
}
func (m *DeployStrategy_BatchStrategy_ManualBatch_Batches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch_Batches.Merge(m, src)
}
func (m *DeployStrategy_BatchStrategy_ManualBatch_Batches) XXX_Size() int {
	return xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch_Batches.Size(m)
}
func (m *DeployStrategy_BatchStrategy_ManualBatch_Batches) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch_Batches.DiscardUnknown(m)
}

var xxx_messageInfo_DeployStrategy_BatchStrategy_ManualBatch_Batches proto.InternalMessageInfo

func (m *DeployStrategy_BatchStrategy_ManualBatch_Batches) GetTargets() []*DeployBatchTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

type DeployStrategy_PackageList struct {
	//
	//集群
	Cluster *cmdb.ClusterInfo `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster" form:"cluster"`
	//
	//目标版本
	TargetVersion string `protobuf:"bytes,2,opt,name=targetVersion,proto3" json:"targetVersion" form:"targetVersion"`
	//
	//是否提前暂停
	PreStop string `protobuf:"bytes,3,opt,name=preStop,proto3" json:"preStop" form:"preStop"`
	//
	//是否发布重启
	PostRestart string `protobuf:"bytes,4,opt,name=postRestart,proto3" json:"postRestart" form:"postRestart"`
	//
	//是否自动运行
	AutoStart string `protobuf:"bytes,5,opt,name=autoStart,proto3" json:"autoStart" form:"autoStart"`
	//
	//是否需要用户检查
	UserCheck string `protobuf:"bytes,6,opt,name=userCheck,proto3" json:"userCheck" form:"userCheck"`
	//
	//是否完全更新
	FullUpdate string `protobuf:"bytes,7,opt,name=fullUpdate,proto3" json:"fullUpdate" form:"fullUpdate"`
	//
	//强制更新
	Force string `protobuf:"bytes,8,opt,name=force,proto3" json:"force" form:"force"`
	//
	//强制安装
	ForceInstall string `protobuf:"bytes,9,opt,name=forceInstall,proto3" json:"forceInstall" form:"forceInstall"`
	//
	//包Id
	PackageId string `protobuf:"bytes,10,opt,name=packageId,proto3" json:"packageId" form:"packageId"`
	//
	//包名称
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name" form:"name"`
	//
	//安装路径
	InstallPath string `protobuf:"bytes,12,opt,name=installPath,proto3" json:"installPath" form:"installPath"`
	//
	//版本类型 1 程序包,  2 配置包,  4 文件包
	Type int32 `protobuf:"varint,13,opt,name=type,proto3" json:"type" form:"type"`
	//
	//平台
	Platform             string   `protobuf:"bytes,14,opt,name=platform,proto3" json:"platform" form:"platform"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployStrategy_PackageList) Reset()         { *m = DeployStrategy_PackageList{} }
func (m *DeployStrategy_PackageList) String() string { return proto.CompactTextString(m) }
func (*DeployStrategy_PackageList) ProtoMessage()    {}
func (*DeployStrategy_PackageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_157d7033b348d531, []int{0, 2}
}
func (m *DeployStrategy_PackageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployStrategy_PackageList.Unmarshal(m, b)
}
func (m *DeployStrategy_PackageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployStrategy_PackageList.Marshal(b, m, deterministic)
}
func (m *DeployStrategy_PackageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployStrategy_PackageList.Merge(m, src)
}
func (m *DeployStrategy_PackageList) XXX_Size() int {
	return xxx_messageInfo_DeployStrategy_PackageList.Size(m)
}
func (m *DeployStrategy_PackageList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployStrategy_PackageList.DiscardUnknown(m)
}

var xxx_messageInfo_DeployStrategy_PackageList proto.InternalMessageInfo

func (m *DeployStrategy_PackageList) GetCluster() *cmdb.ClusterInfo {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *DeployStrategy_PackageList) GetTargetVersion() string {
	if m != nil {
		return m.TargetVersion
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetPreStop() string {
	if m != nil {
		return m.PreStop
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetPostRestart() string {
	if m != nil {
		return m.PostRestart
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetAutoStart() string {
	if m != nil {
		return m.AutoStart
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetUserCheck() string {
	if m != nil {
		return m.UserCheck
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetFullUpdate() string {
	if m != nil {
		return m.FullUpdate
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetForceInstall() string {
	if m != nil {
		return m.ForceInstall
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetPackageId() string {
	if m != nil {
		return m.PackageId
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetInstallPath() string {
	if m != nil {
		return m.InstallPath
	}
	return ""
}

func (m *DeployStrategy_PackageList) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DeployStrategy_PackageList) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type DeployStrategy_Status struct {
	//
	//是否过时
	OutOfDate            string   `protobuf:"bytes,1,opt,name=outOfDate,proto3" json:"outOfDate" form:"outOfDate"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployStrategy_Status) Reset()         { *m = DeployStrategy_Status{} }
func (m *DeployStrategy_Status) String() string { return proto.CompactTextString(m) }
func (*DeployStrategy_Status) ProtoMessage()    {}
func (*DeployStrategy_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_157d7033b348d531, []int{0, 3}
}
func (m *DeployStrategy_Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployStrategy_Status.Unmarshal(m, b)
}
func (m *DeployStrategy_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployStrategy_Status.Marshal(b, m, deterministic)
}
func (m *DeployStrategy_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployStrategy_Status.Merge(m, src)
}
func (m *DeployStrategy_Status) XXX_Size() int {
	return xxx_messageInfo_DeployStrategy_Status.Size(m)
}
func (m *DeployStrategy_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployStrategy_Status.DiscardUnknown(m)
}

var xxx_messageInfo_DeployStrategy_Status proto.InternalMessageInfo

func (m *DeployStrategy_Status) GetOutOfDate() string {
	if m != nil {
		return m.OutOfDate
	}
	return ""
}

func init() {
	proto.RegisterType((*DeployStrategy)(nil), "easy_flow.DeployStrategy")
	proto.RegisterType((*DeployStrategy_App)(nil), "easy_flow.DeployStrategy.App")
	proto.RegisterType((*DeployStrategy_BatchStrategy)(nil), "easy_flow.DeployStrategy.BatchStrategy")
	proto.RegisterType((*DeployStrategy_BatchStrategy_AutoBatch)(nil), "easy_flow.DeployStrategy.BatchStrategy.AutoBatch")
	proto.RegisterType((*DeployStrategy_BatchStrategy_ManualBatch)(nil), "easy_flow.DeployStrategy.BatchStrategy.ManualBatch")
	proto.RegisterType((*DeployStrategy_BatchStrategy_ManualBatch_Batches)(nil), "easy_flow.DeployStrategy.BatchStrategy.ManualBatch.Batches")
	proto.RegisterType((*DeployStrategy_PackageList)(nil), "easy_flow.DeployStrategy.PackageList")
	proto.RegisterType((*DeployStrategy_Status)(nil), "easy_flow.DeployStrategy.Status")
}

func init() { proto.RegisterFile("deploy_strategy.proto", fileDescriptor_157d7033b348d531) }

var fileDescriptor_157d7033b348d531 = []byte{
	// 1253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x73, 0x13, 0x47,
	0x13, 0x46, 0x92, 0x65, 0x59, 0x23, 0x6c, 0xcc, 0xf0, 0xf1, 0xee, 0xab, 0x0a, 0xb5, 0xae, 0x89,
	0x43, 0x04, 0x44, 0x5a, 0x30, 0x49, 0x0a, 0x0c, 0x85, 0xcb, 0x02, 0x2a, 0xa5, 0x04, 0x12, 0x32,
	0x36, 0x39, 0x60, 0xd9, 0xae, 0xb1, 0x34, 0x92, 0xb7, 0x58, 0x69, 0xb6, 0x76, 0x47, 0x10, 0xf3,
	0x71, 0xcc, 0x25, 0xc7, 0xfc, 0x95, 0xdc, 0x72, 0xcd, 0xff, 0x10, 0x55, 0xfc, 0x84, 0xbd, 0xe4,
	0x9a, 0xda, 0x9e, 0xd9, 0xdd, 0x59, 0x8c, 0x29, 0x42, 0xc8, 0x6d, 0x67, 0xfa, 0x79, 0x9e, 0x9e,
	0xee, 0xe9, 0xee, 0x59, 0x74, 0xa6, 0xcf, 0x7d, 0x4f, 0x1c, 0xec, 0x86, 0x32, 0x60, 0x92, 0x0f,
	0x0f, 0x5a, 0x7e, 0x20, 0xa4, 0xc0, 0x55, 0xce, 0xc2, 0x83, 0xdd, 0x81, 0x27, 0x9e, 0xd6, 0x9b,
	0x43, 0x57, 0xee, 0x4f, 0xf6, 0x5a, 0x3d, 0x31, 0x72, 0x86, 0x62, 0x28, 0x1c, 0x40, 0xec, 0x4d,
	0x06, 0xb0, 0x82, 0x05, 0x7c, 0x29, 0x66, 0x7d, 0x7b, 0x28, 0x5a, 0x31, 0x59, 0xf8, 0x61, 0xcb,
	0x13, 0x3d, 0xe6, 0x39, 0x3d, 0x31, 0x96, 0x01, 0xeb, 0xc9, 0x50, 0x31, 0x03, 0xee, 0x8b, 0xe6,
	0x48, 0xf4, 0xb9, 0x17, 0x3a, 0x1a, 0xe8, 0xc0, 0xd2, 0x49, 0x7d, 0x3a, 0xfa, 0x50, 0x7b, 0x4c,
	0xf6, 0xf6, 0x77, 0x25, 0x0b, 0x86, 0x5c, 0x6a, 0xf9, 0x1f, 0x3f, 0x5c, 0xbe, 0x37, 0xea, 0xef,
	0x39, 0x3d, 0x6f, 0x12, 0x4a, 0x1e, 0xec, 0xba, 0xe3, 0x41, 0x72, 0xe2, 0x87, 0x1f, 0xe3, 0xc4,
	0xea, 0x90, 0xa6, 0xec, 0xd7, 0x46, 0xde, 0x46, 0x4f, 0x5d, 0xf9, 0x58, 0x3c, 0x75, 0x86, 0xa2,
	0x09, 0xc6, 0xe6, 0x13, 0xe6, 0xb9, 0x7d, 0x26, 0x45, 0x10, 0x3a, 0xe9, 0xa7, 0xe2, 0x91, 0x3f,
	0xcf, 0xa2, 0x85, 0x3b, 0x10, 0xff, 0x86, 0xbe, 0x13, 0x3c, 0x41, 0x45, 0xb7, 0x6f, 0x15, 0x96,
	0x0a, 0x8d, 0x6a, 0x9b, 0x47, 0x53, 0xbb, 0x3a, 0x10, 0xc1, 0x68, 0x95, 0xb8, 0x7d, 0xf2, 0xfa,
	0x95, 0xbd, 0x89, 0xe8, 0xce, 0xd6, 0x1a, 0x6b, 0x3e, 0x5b, 0x6f, 0x3e, 0xba, 0xdc, 0xbc, 0xbe,
	0xfd, 0xfc, 0xda, 0xcb, 0x66, 0x6e, 0xfd, 0xe5, 0x3f, 0x5c, 0x5f, 0x59, 0x79, 0xb9, 0x4c, 0x8b,
	0x6e, 0x1f, 0x7f, 0x8a, 0x66, 0xc6, 0x6c, 0xc4, 0xad, 0x22, 0x38, 0x3e, 0x11, 0x4d, 0xed, 0x9a,
	0x72, 0x1c, 0xef, 0x12, 0x0a, 0x46, 0xfc, 0x15, 0x42, 0xcc, 0x77, 0x7f, 0xe2, 0x41, 0xe8, 0x8a,
	0xb1, 0x55, 0x02, 0xe8, 0x99, 0x68, 0x6a, 0x9f, 0x54, 0xd0, 0xcc, 0x46, 0xa8, 0x01, 0xc4, 0xe7,
	0x51, 0x49, 0x04, 0x43, 0x6b, 0x66, 0xa9, 0xd0, 0x28, 0xb7, 0x4f, 0x47, 0x53, 0x1b, 0x29, 0xbc,
	0x08, 0x86, 0x71, 0x50, 0xc5, 0xc5, 0x63, 0x34, 0x06, 0xe0, 0x35, 0x54, 0x62, 0xbe, 0x6f, 0x95,
	0x97, 0x0a, 0x8d, 0xda, 0xca, 0xb9, 0x56, 0x9a, 0xf0, 0x56, 0x3e, 0x45, 0xad, 0x75, 0xdf, 0x6f,
	0x2f, 0x64, 0x32, 0xcc, 0xf7, 0x09, 0x8d, 0x99, 0x71, 0x10, 0xf2, 0xc0, 0xe7, 0xd6, 0xec, 0x9b,
	0x41, 0xc4, 0xbb, 0x84, 0x82, 0x11, 0x0f, 0xd1, 0x3c, 0xd4, 0x5a, 0x22, 0x67, 0x55, 0xc0, 0xdf,
	0xe7, 0x47, 0xfb, 0x6b, 0x9b, 0xf0, 0xb6, 0x15, 0x4d, 0xed, 0xd3, 0x4a, 0x36, 0xa7, 0x43, 0x68,
	0x5e, 0x17, 0x9f, 0x47, 0xe5, 0xb0, 0x27, 0x7c, 0x6e, 0xcd, 0xc1, 0x71, 0x16, 0xa3, 0xa9, 0x7d,
	0x5c, 0xf1, 0x60, 0x9b, 0x50, 0x65, 0xc6, 0x6d, 0x34, 0xa7, 0x2b, 0x35, 0xb4, 0xaa, 0x4b, 0xa5,
	0x46, 0x6d, 0xe5, 0x64, 0x2b, 0xae, 0xdf, 0xd6, 0x6d, 0xb5, 0xdb, 0x19, 0x0f, 0x44, 0xfb, 0x54,
	0x34, 0xb5, 0x4f, 0x28, 0x76, 0x02, 0x26, 0x34, 0xe5, 0xe1, 0x7b, 0x08, 0xa9, 0xaa, 0xbc, 0xe7,
	0x86, 0xd2, 0x42, 0xa0, 0x72, 0xc6, 0x88, 0x68, 0x13, 0x8c, 0xa0, 0x64, 0x5c, 0x58, 0x46, 0x21,
	0xd4, 0xe0, 0xe3, 0xfb, 0x08, 0x6b, 0xe5, 0xbb, 0xe3, 0x27, 0x6e, 0x20, 0xc6, 0x23, 0x3e, 0x96,
	0x56, 0x0d, 0xc2, 0x38, 0x17, 0x4d, 0xed, 0xff, 0xe7, 0x0e, 0x62, 0x60, 0x08, 0x7d, 0x0b, 0x11,
	0x5f, 0x43, 0x35, 0xbd, 0xbb, 0x19, 0xdf, 0xce, 0x71, 0xd0, 0x39, 0x1b, 0x4d, 0x6d, 0x9c, 0xd3,
	0xd9, 0x84, 0x4b, 0x32, 0xa1, 0x78, 0x17, 0xd5, 0x7c, 0xd6, 0x7b, 0xcc, 0x86, 0x1c, 0xe2, 0x9a,
	0x87, 0x9b, 0xfa, 0xec, 0xe8, 0x9b, 0x7a, 0x90, 0x81, 0x4d, 0x07, 0x86, 0x06, 0xa1, 0xa6, 0x22,
	0xfe, 0x0e, 0xcd, 0x86, 0x92, 0xc9, 0x49, 0x68, 0x2d, 0x80, 0xf6, 0xd2, 0xd1, 0xda, 0x1b, 0x80,
	0x6b, 0x9f, 0x8c, 0xa6, 0xf6, 0xbc, 0xbe, 0x46, 0xd8, 0x21, 0x54, 0x4b, 0xd4, 0x07, 0xa8, 0xb4,
	0xae, 0xaa, 0x10, 0x5a, 0xa9, 0xf0, 0xae, 0x56, 0x5a, 0x45, 0x65, 0xe6, 0xfb, 0x9d, 0xbe, 0x6e,
	0xb8, 0xe5, 0xac, 0x38, 0x60, 0x3b, 0xee, 0x8b, 0x45, 0xb4, 0xb0, 0xb3, 0x75, 0xb9, 0x79, 0x9d,
	0x35, 0x9f, 0x6d, 0x3f, 0xbf, 0x72, 0xf5, 0xe5, 0x32, 0x55, 0x94, 0xfa, 0x1f, 0xb3, 0x68, 0x3e,
	0x57, 0x93, 0x98, 0xa3, 0x2a, 0x9b, 0x48, 0x01, 0x9b, 0xe0, 0xb7, 0xb6, 0x72, 0xe5, 0x3d, 0xeb,
	0xb9, 0xb5, 0x9e, 0x10, 0xa1, 0x35, 0x17, 0xf5, 0x21, 0x92, 0x4d, 0x42, 0x33, 0x65, 0x3c, 0x42,
	0xb5, 0x11, 0x1b, 0x4f, 0x98, 0xa7, 0x1c, 0x15, 0xc1, 0xd1, 0xd5, 0xf7, 0x75, 0x74, 0x3f, 0xa3,
	0x9a, 0x97, 0x63, 0x28, 0x12, 0x6a, 0xea, 0xa7, 0xed, 0x5c, 0x7a, 0x47, 0x3b, 0xd7, 0x7f, 0x2f,
	0xa0, 0x6a, 0x1a, 0x02, 0x76, 0xd0, 0x1c, 0x34, 0xe1, 0xf7, 0x93, 0x11, 0xe4, 0xa1, 0x6c, 0x36,
	0x4e, 0x62, 0x21, 0x34, 0x05, 0xe1, 0x5b, 0x7a, 0x1a, 0x74, 0xc6, 0x92, 0x07, 0x4f, 0x98, 0x07,
	0x41, 0x95, 0x0f, 0x35, 0x79, 0x62, 0x4e, 0x9a, 0x3c, 0x59, 0xc7, 0x23, 0x71, 0xc0, 0x5c, 0x8f,
	0xf7, 0x37, 0xa4, 0xf0, 0x0f, 0x8f, 0xc4, 0xcc, 0x46, 0xa8, 0x01, 0xac, 0xff, 0x55, 0x44, 0x35,
	0x23, 0x1f, 0xd8, 0x45, 0x15, 0xd0, 0xe5, 0xa1, 0x55, 0x80, 0xe6, 0xbd, 0xf1, 0x01, 0x59, 0x55,
	0x16, 0x1e, 0xb6, 0x71, 0x34, 0xb5, 0x17, 0x8c, 0xd3, 0xf3, 0x90, 0xd0, 0x44, 0x3f, 0x97, 0xa2,
	0xe2, 0x07, 0xa5, 0xa8, 0xf4, 0x6f, 0x52, 0x34, 0xf3, 0xbe, 0x29, 0x7a, 0x88, 0x2a, 0x3a, 0x1e,
	0xfc, 0x2d, 0xaa, 0xa8, 0xe9, 0x94, 0x64, 0xe7, 0x93, 0x43, 0xd9, 0x01, 0xa8, 0x9a, 0x72, 0x66,
	0xf8, 0x9a, 0x46, 0x68, 0x22, 0x50, 0xff, 0xad, 0x82, 0x6a, 0xc6, 0x98, 0xc0, 0x6b, 0xa8, 0xa2,
	0x27, 0x8e, 0x6e, 0x9c, 0xb7, 0x0c, 0x5f, 0x43, 0x50, 0x63, 0x09, 0x4d, 0x58, 0x71, 0x7a, 0x94,
	0x76, 0xf2, 0x2e, 0xaa, 0x8e, 0x36, 0xd2, 0x93, 0x33, 0x13, 0x9a, 0x87, 0xe3, 0x2f, 0x50, 0xc5,
	0x0f, 0xb8, 0x51, 0x3e, 0x86, 0x37, 0x6d, 0x20, 0x34, 0x81, 0xc4, 0xb3, 0xd4, 0x17, 0xa1, 0xa4,
	0x3c, 0x94, 0x2c, 0x90, 0x3a, 0x9b, 0xe6, 0xa8, 0xcb, 0x8c, 0xf1, 0xa8, 0xcb, 0x56, 0x78, 0x45,
	0xcd, 0x88, 0x0d, 0xe0, 0x95, 0x81, 0xf7, 0x46, 0xc3, 0x6f, 0x28, 0x56, 0x06, 0x8b, 0x39, 0x93,
	0x90, 0x07, 0xb7, 0xf7, 0x79, 0xef, 0xb1, 0x7e, 0x55, 0x0d, 0x4e, 0x6a, 0x22, 0x34, 0x83, 0xc1,
	0x75, 0x4f, 0x3c, 0xef, 0xa1, 0xdf, 0x67, 0x92, 0xc3, 0xe3, 0x9a, 0xbf, 0xee, 0xd4, 0x16, 0x5f,
	0x77, 0xba, 0x88, 0x5f, 0xcb, 0x81, 0x08, 0x7a, 0x6f, 0x79, 0x2d, 0x61, 0x9b, 0x50, 0x65, 0xc6,
	0x37, 0xd0, 0x71, 0xf8, 0xe8, 0x8c, 0x43, 0xc9, 0x3c, 0xcf, 0xaa, 0x02, 0xfc, 0x7f, 0xd1, 0xd4,
	0x3e, 0x65, 0xc0, 0xb5, 0x95, 0xd0, 0x1c, 0x18, 0xff, 0x5a, 0x40, 0x55, 0x3d, 0xfe, 0x3b, 0x7d,
	0x0b, 0x01, 0xd5, 0xcb, 0x02, 0x4a, 0x4d, 0xff, 0xdd, 0xbf, 0x56, 0xe6, 0x1e, 0x5f, 0xd2, 0xef,
	0x44, 0x2d, 0x8d, 0xc0, 0x7c, 0x27, 0x5e, 0xbf, 0xb2, 0x67, 0xfc, 0x63, 0x3f, 0xb7, 0xf4, 0x7b,
	0xf1, 0x4b, 0x01, 0xd5, 0x5c, 0x15, 0xc5, 0x03, 0x26, 0xf7, 0xf5, 0x23, 0xda, 0xcb, 0x2e, 0xde,
	0x30, 0xc6, 0xdc, 0x0e, 0xfa, 0x66, 0xa7, 0xd1, 0xe8, 0x3a, 0x5b, 0x3b, 0x5d, 0x67, 0xb5, 0x7b,
	0xb1, 0xbb, 0x46, 0xc8, 0xcd, 0x5b, 0xdd, 0x17, 0xdd, 0xa0, 0x3b, 0xde, 0xbe, 0x74, 0xe1, 0xd2,
	0x85, 0x17, 0x8d, 0xae, 0x73, 0xe1, 0xc5, 0x96, 0x3a, 0xde, 0xf6, 0x6a, 0xa3, 0xdb, 0xdd, 0xda,
	0xe9, 0x76, 0x0f, 0x23, 0x2f, 0x2e, 0x53, 0xd3, 0x6f, 0x3a, 0x93, 0xe7, 0x61, 0x06, 0x1c, 0xf1,
	0x8b, 0xe5, 0xa0, 0x39, 0xdf, 0x63, 0x32, 0x36, 0xc0, 0xbb, 0x5a, 0x35, 0x47, 0x4c, 0x62, 0x21,
	0x34, 0x05, 0xd5, 0x6f, 0xa2, 0x59, 0xf5, 0xbc, 0xc6, 0x15, 0x27, 0x26, 0xf2, 0x87, 0xc1, 0x9d,
	0xb8, 0x78, 0x0a, 0x6f, 0x56, 0x5c, 0x6a, 0x22, 0x34, 0x83, 0xb5, 0xef, 0x3e, 0xba, 0xfd, 0x11,
	0x7e, 0xeb, 0xf7, 0x66, 0x01, 0x79, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x9c, 0xa7,
	0x33, 0x27, 0x0d, 0x00, 0x00,
}
