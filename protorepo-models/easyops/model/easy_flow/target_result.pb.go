// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: target_result.proto

package easy_flow

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	cmdb "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/cmdb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//目标设备信息
type TargetResult struct {
	//
	//目标设备Id
	TargetId string `protobuf:"bytes,1,opt,name=targetId,proto3" json:"targetId" form:"targetId"`
	//
	//目标设别名称
	TargetName string `protobuf:"bytes,2,opt,name=targetName,proto3" json:"targetName" form:"targetName"`
	//
	//集群
	Cluster *cmdb.ClusterInfo `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster" form:"cluster"`
	//
	//错误码
	Code int32 `protobuf:"varint,4,opt,name=code,proto3" json:"code" form:"code"`
	//
	//消息
	Msg string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg" form:"msg"`
	//
	//状态
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status" form:"status"`
	//
	//包状态列表
	PackageStatus        []*DeployPackageResult `protobuf:"bytes,7,rep,name=packageStatus,proto3" json:"packageStatus" form:"packageStatus"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TargetResult) Reset()         { *m = TargetResult{} }
func (m *TargetResult) String() string { return proto.CompactTextString(m) }
func (*TargetResult) ProtoMessage()    {}
func (*TargetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_36f74cab569a2c5f, []int{0}
}
func (m *TargetResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetResult.Unmarshal(m, b)
}
func (m *TargetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetResult.Marshal(b, m, deterministic)
}
func (m *TargetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetResult.Merge(m, src)
}
func (m *TargetResult) XXX_Size() int {
	return xxx_messageInfo_TargetResult.Size(m)
}
func (m *TargetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetResult.DiscardUnknown(m)
}

var xxx_messageInfo_TargetResult proto.InternalMessageInfo

func (m *TargetResult) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *TargetResult) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *TargetResult) GetCluster() *cmdb.ClusterInfo {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *TargetResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TargetResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *TargetResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TargetResult) GetPackageStatus() []*DeployPackageResult {
	if m != nil {
		return m.PackageStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*TargetResult)(nil), "easy_flow.TargetResult")
}

func init() { proto.RegisterFile("target_result.proto", fileDescriptor_36f74cab569a2c5f) }

var fileDescriptor_36f74cab569a2c5f = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x65, 0xd2, 0xa6, 0x74, 0x43, 0x5b, 0x65, 0x01, 0xc9, 0xca, 0x01, 0x5b, 0x0b, 0x87,
	0x70, 0xb0, 0x17, 0xc2, 0x87, 0x80, 0x4b, 0x85, 0x0b, 0x48, 0xbd, 0x20, 0xea, 0x72, 0x02, 0x51,
	0x6b, 0x63, 0xaf, 0x97, 0x50, 0x3b, 0x63, 0x79, 0xd7, 0x44, 0x15, 0xca, 0x95, 0xc7, 0x34, 0x82,
	0x47, 0xf0, 0x13, 0xa0, 0xec, 0x3a, 0x91, 0x73, 0x04, 0xf5, 0x36, 0xb3, 0xf3, 0xfb, 0xff, 0x3d,
	0x1f, 0x46, 0xb7, 0x15, 0x2b, 0x05, 0x57, 0x51, 0xc9, 0x65, 0x95, 0x29, 0xbf, 0x28, 0x41, 0x01,
	0xde, 0xe7, 0x4c, 0x5e, 0x45, 0x69, 0x06, 0x8b, 0x91, 0x27, 0x66, 0xea, 0x6b, 0x35, 0xf5, 0x63,
	0xc8, 0xa9, 0x00, 0x01, 0x54, 0x13, 0xd3, 0x2a, 0xd5, 0x99, 0x4e, 0x74, 0x64, 0x94, 0xa3, 0x33,
	0x01, 0xfe, 0x4a, 0x0c, 0x85, 0xf4, 0x33, 0x88, 0x59, 0x46, 0x63, 0x98, 0xab, 0x92, 0xc5, 0x4a,
	0x1a, 0x65, 0xc9, 0x0b, 0xf0, 0x72, 0x48, 0x78, 0x26, 0x69, 0x0b, 0x52, 0x9d, 0xd2, 0x38, 0x4f,
	0xa6, 0x34, 0xce, 0x2a, 0xa9, 0x78, 0x19, 0xcd, 0xe6, 0xe9, 0xda, 0x32, 0xfa, 0x7f, 0xcb, 0xcd,
	0x18, 0x34, 0xe1, 0x45, 0x06, 0x57, 0x51, 0xc1, 0xe2, 0x4b, 0x26, 0xf8, 0xd6, 0xb4, 0xa3, 0xe7,
	0x9d, 0x11, 0xf3, 0xc5, 0x4c, 0x5d, 0xc2, 0x82, 0x0a, 0xf0, 0x74, 0xd1, 0xfb, 0xce, 0xb2, 0x59,
	0xc2, 0x14, 0x94, 0x92, 0x6e, 0x42, 0xa3, 0x23, 0xbf, 0x7b, 0xe8, 0xd6, 0x47, 0xbd, 0xbd, 0x50,
	0xdb, 0xe1, 0x9f, 0x16, 0xba, 0x69, 0xd6, 0x79, 0x9a, 0xd8, 0x96, 0x6b, 0x8d, 0xf7, 0x83, 0x6f,
	0x4d, 0xed, 0x1c, 0xa5, 0x50, 0xe6, 0xaf, 0xc8, 0xba, 0x42, 0xfe, 0xfc, 0x72, 0xce, 0xd1, 0xd9,
	0xc5, 0x67, 0xe6, 0xa5, 0xaf, 0xbd, 0x77, 0x8f, 0xbc, 0x97, 0x5f, 0x7e, 0xbc, 0x58, 0x7a, 0xc7,
	0xdd, 0xfc, 0xe9, 0x3f, 0xe6, 0x8f, 0x27, 0xcb, 0x07, 0xe1, 0xe6, 0xdb, 0xf8, 0x19, 0x42, 0x26,
	0x7e, 0xcf, 0x72, 0x6e, 0xdf, 0xd0, 0x9d, 0xdc, 0x6d, 0x6a, 0x67, 0xd8, 0xed, 0x64, 0x55, 0x23,
	0x61, 0x07, 0xc4, 0xc7, 0x68, 0xaf, 0xdd, 0xbf, 0xdd, 0x73, 0xad, 0xf1, 0x60, 0x32, 0xf4, 0x57,
	0x47, 0xf1, 0x4f, 0xcc, 0xe3, 0xe9, 0x3c, 0x85, 0x00, 0x37, 0xb5, 0x73, 0x68, 0x6c, 0x5a, 0x96,
	0x84, 0x6b, 0x15, 0xbe, 0x8f, 0x76, 0x62, 0x48, 0xb8, 0xbd, 0xe3, 0x5a, 0xe3, 0xdd, 0xe0, 0xa8,
	0xa9, 0x9d, 0x41, 0x8b, 0x42, 0xc2, 0x49, 0xa8, 0x8b, 0xd8, 0x45, 0xbd, 0x5c, 0x0a, 0x7b, 0x57,
	0x77, 0x75, 0xd8, 0xd4, 0x0e, 0x32, 0x4c, 0x2e, 0x05, 0x09, 0x57, 0x25, 0xfc, 0x10, 0xf5, 0xa5,
	0x62, 0xaa, 0x92, 0x76, 0x5f, 0x43, 0xc3, 0xa6, 0x76, 0x0e, 0x0c, 0x64, 0xde, 0x49, 0xd8, 0x02,
	0xf8, 0x02, 0x1d, 0xb4, 0x37, 0x3d, 0x37, 0x8a, 0x3d, 0xb7, 0x37, 0x1e, 0x4c, 0xee, 0xf9, 0x9b,
	0xd3, 0xfb, 0x6f, 0xf4, 0xe9, 0x3f, 0x18, 0xca, 0x5c, 0x2a, 0xb0, 0x9b, 0xda, 0xb9, 0x63, 0x1c,
	0xb7, 0xe4, 0x24, 0xdc, 0xb6, 0x0b, 0xde, 0x7e, 0x3a, 0xb9, 0x86, 0xdf, 0x6f, 0xda, 0xd7, 0xe4,
	0x93, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x3a, 0xfc, 0xc3, 0x6e, 0x03, 0x00, 0x00,
}
