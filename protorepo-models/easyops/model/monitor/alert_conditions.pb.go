// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alert_conditions.proto

package monitor

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//告警条件
type AlertConditions struct {
	//
	//告警类型
	AlertType string `protobuf:"bytes,1,opt,name=alert_type,json=alertType,proto3" json:"alert_type" form:"alert_type"`
	//
	//告警子类
	AlertSubType string `protobuf:"bytes,2,opt,name=alert_sub_type,json=alertSubType,proto3" json:"alert_sub_type" form:"alert_sub_type"`
	//
	//告警指标表
	AlertTable string `protobuf:"bytes,3,opt,name=alert_table,json=alertTable,proto3" json:"alert_table" form:"alert_table"`
	//
	//告警指标
	AttrId string `protobuf:"bytes,4,opt,name=attr_id,json=attrId,proto3" json:"attr_id" form:"attr_id"`
	//
	//告警单位
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit" form:"unit"`
	//
	//比较器
	Comparators          []*AlertConditions_Comparators `protobuf:"bytes,6,rep,name=comparators,proto3" json:"comparators" form:"comparators"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *AlertConditions) Reset()         { *m = AlertConditions{} }
func (m *AlertConditions) String() string { return proto.CompactTextString(m) }
func (*AlertConditions) ProtoMessage()    {}
func (*AlertConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffc863d2e96fbe26, []int{0}
}
func (m *AlertConditions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlertConditions.Unmarshal(m, b)
}
func (m *AlertConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlertConditions.Marshal(b, m, deterministic)
}
func (m *AlertConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertConditions.Merge(m, src)
}
func (m *AlertConditions) XXX_Size() int {
	return xxx_messageInfo_AlertConditions.Size(m)
}
func (m *AlertConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertConditions.DiscardUnknown(m)
}

var xxx_messageInfo_AlertConditions proto.InternalMessageInfo

func (m *AlertConditions) GetAlertType() string {
	if m != nil {
		return m.AlertType
	}
	return ""
}

func (m *AlertConditions) GetAlertSubType() string {
	if m != nil {
		return m.AlertSubType
	}
	return ""
}

func (m *AlertConditions) GetAlertTable() string {
	if m != nil {
		return m.AlertTable
	}
	return ""
}

func (m *AlertConditions) GetAttrId() string {
	if m != nil {
		return m.AttrId
	}
	return ""
}

func (m *AlertConditions) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *AlertConditions) GetComparators() []*AlertConditions_Comparators {
	if m != nil {
		return m.Comparators
	}
	return nil
}

type AlertConditions_Comparators struct {
	//
	//比较器类型:
	//bigger_than: 大于
	//smaller_than: 小于
	//equal: 等于
	//unequal: 不等于
	//include: 包含（字符串指标用）
	//exclude: 不包含（字符串指标用)
	//dynamic: 动态阈值
	//transition: 状态变更
	//
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type" form:"type"`
	//
	//阈值
	Threshold *types.Value `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold" form:"threshold"`
	//
	//告警等级
	Level                int32    `protobuf:"varint,3,opt,name=level,proto3" json:"level" form:"level"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlertConditions_Comparators) Reset()         { *m = AlertConditions_Comparators{} }
func (m *AlertConditions_Comparators) String() string { return proto.CompactTextString(m) }
func (*AlertConditions_Comparators) ProtoMessage()    {}
func (*AlertConditions_Comparators) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffc863d2e96fbe26, []int{0, 0}
}
func (m *AlertConditions_Comparators) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlertConditions_Comparators.Unmarshal(m, b)
}
func (m *AlertConditions_Comparators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlertConditions_Comparators.Marshal(b, m, deterministic)
}
func (m *AlertConditions_Comparators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertConditions_Comparators.Merge(m, src)
}
func (m *AlertConditions_Comparators) XXX_Size() int {
	return xxx_messageInfo_AlertConditions_Comparators.Size(m)
}
func (m *AlertConditions_Comparators) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertConditions_Comparators.DiscardUnknown(m)
}

var xxx_messageInfo_AlertConditions_Comparators proto.InternalMessageInfo

func (m *AlertConditions_Comparators) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AlertConditions_Comparators) GetThreshold() *types.Value {
	if m != nil {
		return m.Threshold
	}
	return nil
}

func (m *AlertConditions_Comparators) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func init() {
	proto.RegisterType((*AlertConditions)(nil), "monitor.AlertConditions")
	proto.RegisterType((*AlertConditions_Comparators)(nil), "monitor.AlertConditions.Comparators")
}

func init() { proto.RegisterFile("alert_conditions.proto", fileDescriptor_ffc863d2e96fbe26) }

var fileDescriptor_ffc863d2e96fbe26 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0x25, 0x6b, 0x92, 0x12, 0xb9, 0xb4, 0x9d, 0x58, 0x83, 0x17, 0x06, 0x2e, 0xda, 0x18, 0x85,
	0x51, 0x19, 0xba, 0xc1, 0x60, 0x2f, 0xa3, 0xc9, 0xd3, 0xf6, 0xa8, 0x95, 0x3d, 0xec, 0x61, 0x45,
	0xb6, 0x15, 0xc7, 0x20, 0xfb, 0x1a, 0x49, 0x1e, 0xe4, 0x5f, 0xf6, 0xbc, 0xcf, 0xf2, 0x47, 0xf8,
	0x0b, 0x86, 0xaf, 0x9c, 0xc5, 0xeb, 0x9b, 0xee, 0x3d, 0xe7, 0xdc, 0x7b, 0x38, 0x57, 0x64, 0x29,
	0xb5, 0x32, 0xee, 0x31, 0x85, 0x2a, 0x2b, 0x5c, 0x01, 0x95, 0xe5, 0xb5, 0x01, 0x07, 0xf4, 0xb4,
	0x84, 0xaa, 0x70, 0x60, 0x56, 0xb7, 0x79, 0xe1, 0x76, 0x4d, 0xc2, 0x53, 0x28, 0xe3, 0x1c, 0x72,
	0x88, 0x11, 0x4f, 0x9a, 0x2d, 0x56, 0x58, 0xe0, 0xcb, 0xeb, 0x56, 0xaf, 0x72, 0x80, 0x5c, 0xab,
	0x23, 0xcb, 0x3a, 0xd3, 0xa4, 0xce, 0xa3, 0xec, 0xf7, 0x94, 0x5c, 0xdc, 0xf7, 0x0b, 0x37, 0xff,
	0xf6, 0xd1, 0x0f, 0x84, 0x78, 0x0f, 0x6e, 0x5f, 0xab, 0x70, 0x72, 0x3d, 0xb9, 0x59, 0xac, 0xaf,
	0xba, 0x36, 0x7a, 0xbe, 0x05, 0x53, 0x7e, 0x62, 0x47, 0x8c, 0x89, 0x05, 0x16, 0x0f, 0xfb, 0x5a,
	0xd1, 0xcf, 0xe4, 0xdc, 0x23, 0xb6, 0x49, 0xbc, 0xf2, 0x19, 0x2a, 0x5f, 0x76, 0x6d, 0x74, 0x35,
	0x56, 0x1e, 0x70, 0x26, 0xce, 0xb0, 0xf1, 0xad, 0x49, 0x70, 0xc0, 0x47, 0x12, 0x0c, 0xa3, 0x65,
	0xa2, 0x55, 0x78, 0x82, 0xea, 0x65, 0xd7, 0x46, 0xf4, 0xbf, 0xbd, 0x3d, 0xc8, 0x84, 0x77, 0xf8,
	0xd0, 0x17, 0xf4, 0x1d, 0x39, 0x95, 0xce, 0x99, 0xc7, 0x22, 0x0b, 0xa7, 0x28, 0xa2, 0x5d, 0x1b,
	0x9d, 0x0f, 0x22, 0x0f, 0x30, 0x31, 0xef, 0x5f, 0x5f, 0x32, 0xfa, 0x9a, 0x4c, 0x9b, 0xaa, 0x70,
	0xe1, 0x0c, 0x99, 0x17, 0x5d, 0x1b, 0x05, 0x9e, 0xd9, 0x77, 0x99, 0x40, 0x90, 0xfe, 0x24, 0x41,
	0x0a, 0x65, 0x2d, 0x8d, 0x74, 0x60, 0x6c, 0x38, 0xbf, 0x3e, 0xb9, 0x09, 0xee, 0xde, 0xf0, 0xe1,
	0x02, 0xfc, 0x49, 0x60, 0x7c, 0x73, 0xe4, 0x8e, 0x0d, 0x8f, 0x46, 0x30, 0x31, 0x1e, 0xb8, 0xfa,
	0x33, 0x21, 0xc1, 0x48, 0xd4, 0x9b, 0x1a, 0x65, 0x3d, 0x32, 0xe5, 0x73, 0x42, 0x90, 0x7e, 0x25,
	0x0b, 0xb7, 0x33, 0xca, 0xee, 0x40, 0x67, 0x98, 0x6d, 0x70, 0xb7, 0xe4, 0xfe, 0xb8, 0xfc, 0x70,
	0x5c, 0xfe, 0x5d, 0xea, 0x46, 0xad, 0x5f, 0x74, 0x6d, 0x74, 0x39, 0x4c, 0x38, 0x48, 0x98, 0x38,
	0xca, 0xe9, 0x5b, 0x32, 0xd3, 0xea, 0x97, 0xd2, 0x98, 0xf2, 0x6c, 0x7d, 0xd9, 0xb5, 0xd1, 0x99,
	0xe7, 0x63, 0x9b, 0x09, 0x0f, 0xaf, 0x37, 0x3f, 0xee, 0x73, 0xe0, 0x4a, 0xda, 0x3d, 0xd4, 0x96,
	0x6b, 0x48, 0xa5, 0x8e, 0x53, 0xa8, 0x9c, 0x91, 0xa9, 0xb3, 0xfe, 0x4b, 0x19, 0x55, 0xc3, 0x6d,
	0x09, 0x99, 0xd2, 0x36, 0x1e, 0x88, 0x31, 0x96, 0xf1, 0x10, 0x57, 0x32, 0x47, 0xde, 0xfb, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xb6, 0x82, 0xa7, 0xda, 0x02, 0x00, 0x00,
}
