// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: version.proto

package artifact

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
//程序包版本
type Version struct {
	//
	//包名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name"`
	//
	//版本Id
	VersionId string `protobuf:"bytes,2,opt,name=versionId,proto3" json:"versionId" form:"versionId"`
	//
	//程序包Id
	PackageId string `protobuf:"bytes,3,opt,name=packageId,proto3" json:"packageId" form:"packageId"`
	//
	//组织id
	Org int32 `protobuf:"varint,4,opt,name=org,proto3" json:"org" form:"org"`
	//
	//基础Docker镜像Id
	BaseImageId string `protobuf:"bytes,5,opt,name=baseImageId,proto3" json:"baseImageId" form:"baseImageId"`
	//
	//基线版本名
	BaseVersionName string `protobuf:"bytes,6,opt,name=baseVersionName,proto3" json:"baseVersionName" form:"baseVersionName"`
	//
	//创建者
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator" form:"creator"`
	//
	//版本类型 1 开发, 3 测试, 7 预发布, 15 生产
	EnvType int32 `protobuf:"varint,8,opt,name=env_type,json=envType,proto3" json:"env_type" form:"env_type"`
	//
	//版本备注
	Memo string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo" form:"memo"`
	//
	//创建时间
	Ctime string `protobuf:"bytes,10,opt,name=ctime,proto3" json:"ctime" form:"ctime"`
	//
	//修改时间
	Mtime string `protobuf:"bytes,11,opt,name=mtime,proto3" json:"mtime" form:"mtime"`
	//
	//包文件的md5检验值
	Sign *types.Struct `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign" form:"sign"`
	//
	//关联的svn库版本，已废弃
	RepoVersion string `protobuf:"bytes,13,opt,name=repoVersion,proto3" json:"repoVersion" form:"repoVersion"`
	//
	//包存储源信息
	Source *Version_Source `protobuf:"bytes,14,opt,name=source,proto3" json:"source" form:"source"`
	//
	//包存储服务版本
	SourceType string `protobuf:"bytes,15,opt,name=sourceType,proto3" json:"sourceType" form:"sourceType"`
	//
	//工作区基础版本Id
	WorkspaceBaseId string `protobuf:"bytes,16,opt,name=workspaceBaseId,proto3" json:"workspaceBaseId" form:"workspaceBaseId"`
	//
	//版本的进程及启停、安装、升级脚本, package.conf.yaml
	Conf                 string   `protobuf:"bytes,17,opt,name=conf,proto3" json:"conf" form:"conf"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2c07d79758f814, []int{0}
}
func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Version) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *Version) GetPackageId() string {
	if m != nil {
		return m.PackageId
	}
	return ""
}

func (m *Version) GetOrg() int32 {
	if m != nil {
		return m.Org
	}
	return 0
}

func (m *Version) GetBaseImageId() string {
	if m != nil {
		return m.BaseImageId
	}
	return ""
}

func (m *Version) GetBaseVersionName() string {
	if m != nil {
		return m.BaseVersionName
	}
	return ""
}

func (m *Version) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Version) GetEnvType() int32 {
	if m != nil {
		return m.EnvType
	}
	return 0
}

func (m *Version) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Version) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *Version) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

func (m *Version) GetSign() *types.Struct {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Version) GetRepoVersion() string {
	if m != nil {
		return m.RepoVersion
	}
	return ""
}

func (m *Version) GetSource() *Version_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Version) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *Version) GetWorkspaceBaseId() string {
	if m != nil {
		return m.WorkspaceBaseId
	}
	return ""
}

func (m *Version) GetConf() string {
	if m != nil {
		return m.Conf
	}
	return ""
}

type Version_Source struct {
	//
	//源服务名字
	EnsName string `protobuf:"bytes,1,opt,name=ensName,proto3" json:"ensName" form:"ensName"`
	//
	//源域名
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host" form:"host"`
	//
	//源类型
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type" form:"type"`
	//
	//http源的ip
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip" form:"ip"`
	//
	//http源的port
	Port                 int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port" form:"port"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version_Source) Reset()         { *m = Version_Source{} }
func (m *Version_Source) String() string { return proto.CompactTextString(m) }
func (*Version_Source) ProtoMessage()    {}
func (*Version_Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2c07d79758f814, []int{0, 0}
}
func (m *Version_Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version_Source.Unmarshal(m, b)
}
func (m *Version_Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version_Source.Marshal(b, m, deterministic)
}
func (m *Version_Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version_Source.Merge(m, src)
}
func (m *Version_Source) XXX_Size() int {
	return xxx_messageInfo_Version_Source.Size(m)
}
func (m *Version_Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Version_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Version_Source proto.InternalMessageInfo

func (m *Version_Source) GetEnsName() string {
	if m != nil {
		return m.EnsName
	}
	return ""
}

func (m *Version_Source) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Version_Source) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Version_Source) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Version_Source) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*Version)(nil), "artifact.Version")
	proto.RegisterType((*Version_Source)(nil), "artifact.Version.Source")
}

func init() { proto.RegisterFile("version.proto", fileDescriptor_7d2c07d79758f814) }

var fileDescriptor_7d2c07d79758f814 = []byte{
	// 882 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x35, 0x6d, 0xd9, 0xb2, 0xd6, 0x51, 0x64, 0x6f, 0x53, 0x87, 0x30, 0x5a, 0xd0, 0x60, 0x8d,
	0x82, 0xaa, 0xbd, 0xa4, 0x24, 0x27, 0x41, 0x62, 0x14, 0x10, 0xa2, 0x16, 0x05, 0x7c, 0xc9, 0x61,
	0x63, 0x14, 0xa8, 0x69, 0x39, 0xa0, 0xa9, 0x35, 0x43, 0x58, 0xe4, 0x12, 0x24, 0x6d, 0xd7, 0x89,
	0xfc, 0x03, 0xfd, 0x86, 0x7e, 0x41, 0x81, 0xfe, 0x44, 0xd1, 0x9f, 0xe8, 0x85, 0x05, 0x7a, 0xe9,
	0x9d, 0x5f, 0x50, 0xec, 0x2c, 0x29, 0xb2, 0x6a, 0x2f, 0x3d, 0xe4, 0xd0, 0x8b, 0xb4, 0x33, 0xef,
	0xbd, 0x99, 0xd9, 0xdd, 0xd9, 0x21, 0x6a, 0xdf, 0xb0, 0x38, 0xf1, 0x79, 0x68, 0x46, 0x31, 0x4f,
	0x39, 0x5e, 0x77, 0xe2, 0xd4, 0xbf, 0x74, 0xdc, 0x74, 0x87, 0x78, 0x7e, 0xfa, 0xf6, 0xfa, 0xc2,
	0x74, 0x79, 0x60, 0x79, 0xdc, 0xe3, 0x16, 0x10, 0x2e, 0xae, 0x2f, 0xc1, 0x02, 0x03, 0x56, 0x52,
	0xb8, 0xf3, 0xac, 0x46, 0x0f, 0x6e, 0xfd, 0xf4, 0x8a, 0xdf, 0x5a, 0x1e, 0x27, 0x00, 0x92, 0x1b,
	0x67, 0xea, 0x4f, 0x9c, 0x94, 0xc7, 0x89, 0x35, 0x5f, 0x16, 0xba, 0x4f, 0x3c, 0xce, 0xbd, 0x29,
	0xab, 0xa2, 0x27, 0x69, 0x7c, 0xed, 0xa6, 0x12, 0xd5, 0xff, 0x6c, 0xa3, 0xe6, 0xb7, 0xb2, 0x40,
	0xbc, 0x8f, 0x1a, 0xa1, 0x13, 0x30, 0x55, 0xd9, 0x55, 0x8c, 0xd6, 0xe8, 0x71, 0x9e, 0x69, 0x1b,
	0x97, 0x3c, 0x0e, 0x8e, 0x74, 0xe1, 0xd5, 0xff, 0xf8, 0x5d, 0x6b, 0x44, 0x4b, 0xdf, 0x9b, 0x14,
	0x48, 0xf8, 0x07, 0x05, 0xb5, 0x8a, 0x9d, 0x1d, 0x4f, 0xd4, 0x65, 0x90, 0x4c, 0xf3, 0x4c, 0xdb,
	0x94, 0x92, 0x39, 0x24, 0x74, 0x27, 0x88, 0x9e, 0xdb, 0x43, 0x87, 0xbc, 0x7b, 0x49, 0x4e, 0x7b,
	0xe4, 0xc5, 0xf8, 0xfd, 0xf3, 0x7b, 0xf2, 0x37, 0xfb, 0xc9, 0x7f, 0xb4, 0xfb, 0x83, 0xfb, 0x3d,
	0x5a, 0xa5, 0x87, 0x62, 0x22, 0xc7, 0xbd, 0x72, 0x3c, 0x76, 0x3c, 0x51, 0x57, 0x16, 0x8b, 0x99,
	0x43, 0x1f, 0xb0, 0x98, 0x79, 0x0e, 0xfc, 0x39, 0x5a, 0xe1, 0xb1, 0xa7, 0x36, 0x76, 0x15, 0x63,
	0x75, 0xf4, 0x28, 0xcf, 0x34, 0x24, 0xab, 0xe0, 0xb1, 0x27, 0xf2, 0x2f, 0x6f, 0x2e, 0x51, 0x41,
	0xc0, 0xcf, 0xd1, 0xc6, 0x85, 0x93, 0xb0, 0xe3, 0x40, 0x56, 0xbd, 0x0a, 0x55, 0x6f, 0xe7, 0x99,
	0x86, 0x25, 0xbf, 0x06, 0xea, 0xb4, 0x4e, 0xc5, 0xdf, 0xa1, 0x8e, 0x30, 0x8b, 0x7b, 0x7b, 0x25,
	0xee, 0x6c, 0x0d, 0xd4, 0x56, 0x9e, 0x69, 0xdb, 0x95, 0xba, 0x46, 0x10, 0x99, 0xb7, 0x50, 0xe7,
	0xfc, 0x6c, 0xb2, 0x7f, 0x66, 0x96, 0x3f, 0x7b, 0x74, 0x31, 0x0e, 0xfe, 0x06, 0x35, 0xdd, 0x98,
	0x89, 0xf6, 0x51, 0x9b, 0x10, 0xf2, 0x20, 0xcf, 0xb4, 0x87, 0x32, 0x64, 0x01, 0x88, 0x50, 0xdb,
	0xe8, 0xd1, 0xb9, 0xfd, 0x92, 0x9c, 0x3a, 0xe4, 0xdd, 0x1b, 0x32, 0x3e, 0xbb, 0x7d, 0x7f, 0x78,
	0xf0, 0xec, 0xc9, 0xfd, 0x1e, 0x2d, 0xc5, 0xd8, 0x44, 0xeb, 0x2c, 0xbc, 0x79, 0x93, 0xde, 0x45,
	0x4c, 0x5d, 0x87, 0x93, 0xf8, 0x28, 0xcf, 0xb4, 0x8e, 0x0c, 0x54, 0x22, 0x3a, 0x6d, 0xb2, 0xf0,
	0xe6, 0xe4, 0x2e, 0x62, 0xb8, 0x8b, 0x1a, 0x01, 0x0b, 0xb8, 0xda, 0x82, 0xa4, 0x1f, 0x57, 0xbd,
	0x27, 0xbc, 0x70, 0x6c, 0xd1, 0x12, 0x05, 0x0a, 0xfe, 0x4d, 0x41, 0xab, 0x6e, 0xea, 0x07, 0x4c,
	0x45, 0x40, 0xfe, 0x45, 0xc9, 0x33, 0xed, 0x41, 0x51, 0xa2, 0xf0, 0x0b, 0xfa, 0xcf, 0x0a, 0xfa,
	0x49, 0x39, 0x37, 0x8c, 0xe1, 0x91, 0xdd, 0x27, 0x2f, 0xc6, 0xb6, 0xb8, 0xa9, 0x2f, 0xba, 0x43,
	0xbb, 0xb8, 0xc1, 0x2e, 0x31, 0xfa, 0x76, 0x8f, 0x0c, 0xc6, 0xb3, 0x1e, 0xe0, 0x5d, 0x62, 0x1c,
	0xda, 0x3d, 0xd2, 0x2f, 0xed, 0x99, 0xdd, 0x27, 0x03, 0xa9, 0xea, 0xda, 0x27, 0xbb, 0x63, 0x63,
	0x60, 0xf7, 0xc8, 0xe1, 0x78, 0x06, 0x1c, 0xe9, 0x3e, 0x32, 0xec, 0x1e, 0x79, 0x5a, 0x1a, 0xd5,
	0xda, 0x38, 0x33, 0xe1, 0x7f, 0xbf, 0x3b, 0x34, 0x4e, 0x67, 0xf6, 0x3e, 0x19, 0x1b, 0xc3, 0xa3,
	0x7f, 0x91, 0xd7, 0xd4, 0xc3, 0x3d, 0x2a, 0x77, 0x04, 0x7b, 0x0b, 0x60, 0x6f, 0x1b, 0xff, 0xd8,
	0x5b, 0xf0, 0xbf, 0xdd, 0x1b, 0x54, 0x8e, 0xbf, 0x44, 0x8d, 0xc4, 0xf7, 0x42, 0xf5, 0xc1, 0xae,
	0x62, 0x6c, 0x0c, 0x1e, 0x9b, 0x72, 0x2e, 0x99, 0xe5, 0x5c, 0x32, 0x5f, 0xc3, 0x5c, 0x1a, 0x75,
	0xaa, 0xbb, 0x17, 0x74, 0x9d, 0x82, 0x4a, 0xbc, 0x96, 0x98, 0x45, 0xbc, 0xe8, 0x55, 0xb5, 0xbd,
	0xf8, 0x5a, 0x6a, 0xa0, 0x4e, 0xeb, 0x54, 0xfc, 0x15, 0x5a, 0x4b, 0xf8, 0x75, 0xec, 0x32, 0xf5,
	0x21, 0x64, 0x56, 0xcd, 0x72, 0x04, 0x9b, 0x05, 0xc5, 0x7c, 0x0d, 0xf8, 0x68, 0x2b, 0xcf, 0xb4,
	0x76, 0x91, 0x1a, 0x3c, 0x3a, 0x2d, 0xa4, 0xf8, 0x29, 0x42, 0x72, 0x25, 0xba, 0x55, 0xed, 0xcc,
	0xbb, 0x74, 0xab, 0x4e, 0x3f, 0x81, 0x9e, 0xae, 0x11, 0xf1, 0x8f, 0x0a, 0xea, 0xdc, 0xf2, 0xf8,
	0x2a, 0x89, 0x1c, 0x97, 0x8d, 0xc4, 0x13, 0x9e, 0xa8, 0x9b, 0x20, 0x8e, 0xab, 0xa7, 0xba, 0x40,
	0xf8, 0x70, 0x43, 0x6a, 0xb1, 0x14, 0xfc, 0x19, 0x6a, 0xb8, 0x3c, 0xbc, 0x54, 0xb7, 0xa0, 0xa4,
	0xda, 0xc9, 0x0b, 0xaf, 0x4e, 0x01, 0xdc, 0xf9, 0x55, 0x41, 0x6b, 0xf2, 0x80, 0xf0, 0x01, 0x6a,
	0xb2, 0x30, 0x79, 0x55, 0x7d, 0x24, 0x70, 0x35, 0x1d, 0x0a, 0x00, 0xde, 0x34, 0xac, 0x44, 0xf4,
	0xb7, 0x3c, 0x49, 0x8b, 0x8f, 0x43, 0x2d, 0xba, 0xf0, 0xea, 0x14, 0x40, 0x41, 0x82, 0x21, 0xb1,
	0xb2, 0x48, 0x92, 0x03, 0x02, 0x40, 0xfc, 0x29, 0x5a, 0xf6, 0x23, 0x98, 0xa8, 0xad, 0x51, 0x3b,
	0xcf, 0xb4, 0x96, 0xa4, 0xf8, 0x91, 0x4e, 0x97, 0xfd, 0x48, 0xc4, 0x88, 0x78, 0x9c, 0xc2, 0x08,
	0x5d, 0xad, 0xc7, 0x10, 0x5e, 0x9d, 0x02, 0x38, 0xfa, 0xfa, 0x74, 0xe4, 0x71, 0x93, 0x39, 0xc9,
	0x1d, 0x8f, 0x12, 0x73, 0xca, 0x5d, 0x67, 0x6a, 0xb9, 0x3c, 0x4c, 0x63, 0xc7, 0x4d, 0x13, 0xf9,
	0x75, 0x14, 0x5d, 0x43, 0x02, 0x3e, 0x61, 0xd3, 0xc4, 0x2a, 0x88, 0x16, 0x98, 0x56, 0xd9, 0x31,
	0x17, 0x6b, 0x40, 0x3c, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xe5, 0x13, 0x52, 0xd6, 0x07,
	0x00, 0x00,
}
