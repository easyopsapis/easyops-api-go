// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service_spec.proto

package container

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//ServiceSpec 定义
type ServiceSpec struct {
	//
	//Service 类型
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type" form:"type"`
	//
	//虚拟服务 IP 地址
	ClusterIP string `protobuf:"bytes,2,opt,name=clusterIP,proto3" json:"clusterIP" form:"clusterIP"`
	//
	//负载均衡 IP
	LoadBalancerIP string `protobuf:"bytes,3,opt,name=loadBalancerIP,proto3" json:"loadBalancerIP" form:"loadBalancerIP"`
	//
	//外部 IP 列表
	ExternalIPs []string `protobuf:"bytes,4,rep,name=externalIPs,proto3" json:"externalIPs" form:"externalIPs"`
	//
	//外部域名
	ExternalName string `protobuf:"bytes,5,opt,name=externalName,proto3" json:"externalName" form:"externalName"`
	//
	//是否支持 Session
	SessionAffinity string `protobuf:"bytes,6,opt,name=sessionAffinity,proto3" json:"sessionAffinity" form:"sessionAffinity"`
	//
	//Pod 筛选器
	Selector *types.Struct `protobuf:"bytes,7,opt,name=selector,proto3" json:"selector" form:"selector"`
	//
	//Service 需要暴露的端口列表
	Ports                []*ServicePort `protobuf:"bytes,8,rep,name=ports,proto3" json:"ports" form:"ports"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServiceSpec) Reset()         { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()    {}
func (*ServiceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e7120e16b65876a, []int{0}
}
func (m *ServiceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceSpec.Unmarshal(m, b)
}
func (m *ServiceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceSpec.Marshal(b, m, deterministic)
}
func (m *ServiceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSpec.Merge(m, src)
}
func (m *ServiceSpec) XXX_Size() int {
	return xxx_messageInfo_ServiceSpec.Size(m)
}
func (m *ServiceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSpec proto.InternalMessageInfo

func (m *ServiceSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceSpec) GetClusterIP() string {
	if m != nil {
		return m.ClusterIP
	}
	return ""
}

func (m *ServiceSpec) GetLoadBalancerIP() string {
	if m != nil {
		return m.LoadBalancerIP
	}
	return ""
}

func (m *ServiceSpec) GetExternalIPs() []string {
	if m != nil {
		return m.ExternalIPs
	}
	return nil
}

func (m *ServiceSpec) GetExternalName() string {
	if m != nil {
		return m.ExternalName
	}
	return ""
}

func (m *ServiceSpec) GetSessionAffinity() string {
	if m != nil {
		return m.SessionAffinity
	}
	return ""
}

func (m *ServiceSpec) GetSelector() *types.Struct {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *ServiceSpec) GetPorts() []*ServicePort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceSpec)(nil), "container.ServiceSpec")
}

func init() { proto.RegisterFile("service_spec.proto", fileDescriptor_8e7120e16b65876a) }

var fileDescriptor_8e7120e16b65876a = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x98, 0x4b, 0x6e, 0xd3, 0x40,
	0x1c, 0xc6, 0x55, 0xfa, 0xa0, 0x76, 0x2a, 0x5a, 0xb9, 0xa2, 0x8d, 0x2a, 0x24, 0x47, 0x06, 0xa4,
	0x71, 0xa9, 0xed, 0xd8, 0x49, 0x5a, 0x35, 0x48, 0x54, 0x0d, 0x0f, 0xd1, 0x0d, 0xaa, 0x52, 0x89,
	0x05, 0x49, 0x40, 0xae, 0x33, 0x31, 0x16, 0x4e, 0xc6, 0x9a, 0x99, 0xb4, 0x54, 0xb1, 0xcf, 0x80,
	0xc4, 0x35, 0x10, 0x12, 0x7b, 0x6e, 0xc0, 0x8a, 0x2d, 0x9b, 0x20, 0x71, 0x84, 0x9c, 0x00, 0x79,
	0x26, 0x49, 0x9f, 0x06, 0x16, 0xa5, 0xea, 0xc2, 0x3b, 0x8f, 0xff, 0xdf, 0x37, 0xf3, 0xcb, 0xe6,
	0xa7, 0x8c, 0x45, 0x89, 0x40, 0x7c, 0xe0, 0x39, 0xf0, 0x0d, 0x09, 0xa0, 0xa3, 0x07, 0x18, 0x51,
	0x24, 0x09, 0x0e, 0xea, 0x50, 0xdb, 0xeb, 0x40, 0xbc, 0xa2, 0xb9, 0x1e, 0x7d, 0xdb, 0xdd, 0xd7,
	0x1d, 0xd4, 0x36, 0x5c, 0xe4, 0x22, 0x83, 0x25, 0xf6, 0xbb, 0x2d, 0xb6, 0x62, 0x0b, 0xf6, 0xc4,
	0x9b, 0x2b, 0x2f, 0x5d, 0xa4, 0x43, 0x9b, 0x1c, 0xa1, 0x80, 0xe8, 0x3e, 0x72, 0x6c, 0xdf, 0x88,
	0xb7, 0xc2, 0xb6, 0x43, 0x09, 0x6f, 0x62, 0x18, 0x20, 0xad, 0x8d, 0x9a, 0xd0, 0x27, 0xc6, 0x30,
	0x68, 0xb0, 0xa5, 0x31, 0x3e, 0xd3, 0x18, 0x11, 0x05, 0x08, 0xd3, 0xe1, 0xbe, 0xeb, 0x27, 0x30,
	0xda, 0x87, 0x1e, 0x7d, 0x87, 0x0e, 0x0d, 0x17, 0x69, 0x6c, 0xa8, 0x1d, 0xd8, 0xbe, 0xd7, 0xb4,
	0x29, 0xc2, 0xc4, 0x18, 0x3f, 0x0e, 0x7b, 0x77, 0x5c, 0x84, 0x5c, 0x1f, 0x1e, 0x53, 0x13, 0x8a,
	0xbb, 0xce, 0x70, 0x57, 0xe5, 0xab, 0x2c, 0x66, 0xf6, 0xf8, 0x61, 0x7b, 0x01, 0x74, 0xa4, 0xbb,
	0xe2, 0x14, 0x3d, 0x0a, 0x60, 0x76, 0x22, 0x37, 0x01, 0x84, 0xca, 0xfc, 0xa0, 0x2f, 0x67, 0x5a,
	0x08, 0xb7, 0xcb, 0x4a, 0xfc, 0x56, 0xa9, 0xb2, 0xa1, 0xf4, 0x4d, 0x10, 0x05, 0xc7, 0xef, 0x12,
	0x0a, 0xf1, 0xce, 0x6e, 0xf6, 0x06, 0x8b, 0x7e, 0x12, 0x06, 0x7d, 0x79, 0x81, 0x67, 0xc7, 0x33,
	0xe5, 0xd7, 0x4f, 0xf9, 0xa3, 0x20, 0x7e, 0x10, 0x5e, 0x03, 0x60, 0x81, 0x52, 0x2d, 0xaf, 0x95,
	0x1a, 0x3d, 0x33, 0x0a, 0x6b, 0x79, 0xad, 0xd8, 0xa8, 0x37, 0x7b, 0x66, 0xa4, 0xc6, 0xcf, 0x66,
	0x63, 0x2b, 0x5e, 0xac, 0x59, 0x91, 0x0a, 0xea, 0xfa, 0x3f, 0x26, 0xd5, 0x5e, 0x21, 0x52, 0xc3,
	0x3a, 0x59, 0x05, 0x00, 0xd4, 0xf2, 0xda, 0xe6, 0xb6, 0xf6, 0xcc, 0xd6, 0x5a, 0x8d, 0x9e, 0xb9,
	0x56, 0x8c, 0xca, 0x6a, 0x6f, 0x23, 0x3a, 0xf7, 0x36, 0x2c, 0xab, 0x6a, 0x78, 0x61, 0x78, 0x3d,
	0x02, 0xe5, 0x73, 0x69, 0x00, 0x2c, 0xce, 0x11, 0x5a, 0x43, 0x8a, 0xd0, 0xac, 0x37, 0xeb, 0xcd,
	0xb0, 0x66, 0x6a, 0x9b, 0x31, 0x07, 0x87, 0xfd, 0x4b, 0x86, 0x63, 0x26, 0x9e, 0x5c, 0x8a, 0x00,
	0x38, 0x7f, 0xb6, 0xca, 0x7f, 0x62, 0x58, 0xbe, 0x12, 0x86, 0x62, 0x22, 0x43, 0x5c, 0xbb, 0x68,
	0xb4, 0x75, 0x99, 0x60, 0x7f, 0x20, 0x2b, 0x24, 0x92, 0x15, 0x13, 0xc8, 0x7a, 0xf9, 0x35, 0x2b,
	0xba, 0x22, 0x3a, 0x2b, 0x91, 0xae, 0x94, 0x4c, 0x57, 0xb8, 0x2a, 0x3a, 0x33, 0x91, 0x6e, 0x3d,
	0x99, 0xae, 0xf8, 0x3f, 0xe8, 0xca, 0x49, 0x20, 0x1b, 0xc9, 0x20, 0xa5, 0xcb, 0x07, 0x51, 0xc1,
	0x7d, 0xfd, 0x81, 0xba, 0x55, 0x27, 0xab, 0xf7, 0xaa, 0xc7, 0xfa, 0x92, 0x7e, 0x08, 0xe2, 0x2d,
	0x1f, 0xd9, 0xcd, 0x8a, 0xed, 0xdb, 0x1d, 0x87, 0x19, 0x6d, 0x92, 0x19, 0xed, 0x4b, 0x6c, 0xb4,
	0xdb, 0xdc, 0x68, 0xa7, 0x03, 0xa9, 0xd6, 0x52, 0xad, 0xa5, 0x5a, 0x4b, 0xb5, 0x76, 0xed, 0xb4,
	0x76, 0x46, 0x64, 0xd2, 0x77, 0x41, 0xcc, 0xc0, 0xf7, 0x14, 0xe2, 0x8e, 0xed, 0xef, 0xec, 0x92,
	0xec, 0x54, 0x6e, 0x12, 0x08, 0x95, 0xcf, 0xb1, 0xd8, 0x24, 0x2e, 0xb6, 0x13, 0xd3, 0xd4, 0x6a,
	0xa9, 0xd5, 0x52, 0xab, 0xa5, 0x56, 0xbb, 0x76, 0x56, 0x3b, 0xa9, 0x30, 0xe9, 0xa1, 0x38, 0x37,
	0x5a, 0xbe, 0xb0, 0xdb, 0x30, 0x3b, 0xcd, 0xfe, 0xab, 0x2d, 0x0f, 0xfa, 0xf2, 0xe2, 0x69, 0xa3,
	0xc5, 0x53, 0xa5, 0x7a, 0x2a, 0x2c, 0x3d, 0x11, 0xe7, 0x09, 0x24, 0xc4, 0x43, 0x9d, 0xed, 0x56,
	0xcb, 0xeb, 0x78, 0xf4, 0x28, 0x3b, 0xc3, 0xfa, 0x2b, 0x83, 0xbe, 0xbc, 0xc4, 0xfb, 0x67, 0x02,
	0x4a, 0xf5, 0x6c, 0x45, 0x7a, 0x2e, 0xce, 0x12, 0xe8, 0x43, 0x87, 0x22, 0x9c, 0xbd, 0x99, 0x9b,
	0x00, 0x19, 0x6b, 0x59, 0xe7, 0x97, 0x6c, 0x7d, 0x74, 0xc9, 0xd6, 0xf7, 0xd8, 0x25, 0xbb, 0xb2,
	0x38, 0xe8, 0xcb, 0xf3, 0xa3, 0x7d, 0x79, 0x45, 0xa9, 0x8e, 0xdb, 0xd2, 0x23, 0x71, 0x3a, 0xbe,
	0xe1, 0x93, 0xec, 0x6c, 0x6e, 0x12, 0x64, 0xac, 0x25, 0x7d, 0xfc, 0x05, 0x40, 0x1f, 0x5e, 0xca,
	0x77, 0x11, 0xa6, 0x95, 0x85, 0x41, 0x5f, 0x9e, 0xe3, 0xbb, 0xb0, 0xb8, 0x52, 0xe5, 0xb5, 0xca,
	0xd3, 0x57, 0x8f, 0x2f, 0xe1, 0x6b, 0xc3, 0xfe, 0x0c, 0x4b, 0x16, 0x7e, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x46, 0xb9, 0x8e, 0x46, 0x09, 0x11, 0x00, 0x00,
}
