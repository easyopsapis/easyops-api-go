// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: volume.proto

package container

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//存储卷
type Volume struct {
	//
	//pod定义的共享存储卷名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name"`
	//
	//存储卷内volume 来源为 hostPath
	HostPath *Volume_HostPath `protobuf:"bytes,2,opt,name=hostPath,proto3" json:"hostPath" form:"hostPath"`
	//
	//volume 来源为 emptyDir
	EmptyDir *Volume_EmptyDir `protobuf:"bytes,3,opt,name=emptyDir,proto3" json:"emptyDir" form:"emptyDir"`
	//
	//volume 来源为 secret
	Secret *Volume_Secret `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret" form:"secret"`
	//
	//volume 来源为 configMap
	ConfigMap *Volume_ConfigMap `protobuf:"bytes,5,opt,name=configMap,proto3" json:"configMap" form:"configMap"`
	//
	//volume 来源为 pvc
	PersistentVolumeClaim *Volume_PersistentVolumeClaim `protobuf:"bytes,6,opt,name=persistentVolumeClaim,proto3" json:"persistentVolumeClaim" form:"persistentVolumeClaim"`
	XXX_NoUnkeyedLiteral  struct{}                      `json:"-"`
	XXX_unrecognized      []byte                        `json:"-"`
	XXX_sizecache         int32                         `json:"-"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0}
}
func (m *Volume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume.Unmarshal(m, b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume.Marshal(b, m, deterministic)
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return xxx_messageInfo_Volume.Size(m)
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetHostPath() *Volume_HostPath {
	if m != nil {
		return m.HostPath
	}
	return nil
}

func (m *Volume) GetEmptyDir() *Volume_EmptyDir {
	if m != nil {
		return m.EmptyDir
	}
	return nil
}

func (m *Volume) GetSecret() *Volume_Secret {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *Volume) GetConfigMap() *Volume_ConfigMap {
	if m != nil {
		return m.ConfigMap
	}
	return nil
}

func (m *Volume) GetPersistentVolumeClaim() *Volume_PersistentVolumeClaim {
	if m != nil {
		return m.PersistentVolumeClaim
	}
	return nil
}

type Volume_HostPath struct {
	//
	//挂载路径
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path" form:"path"`
	//
	//hostPath 存储卷类型, ["DirectoryOrCreate", "Directory", "FileOrCreate", "File", "Socket", "CharDevice", "BlockDevice"]
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type" form:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Volume_HostPath) Reset()         { *m = Volume_HostPath{} }
func (m *Volume_HostPath) String() string { return proto.CompactTextString(m) }
func (*Volume_HostPath) ProtoMessage()    {}
func (*Volume_HostPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 0}
}
func (m *Volume_HostPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_HostPath.Unmarshal(m, b)
}
func (m *Volume_HostPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_HostPath.Marshal(b, m, deterministic)
}
func (m *Volume_HostPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_HostPath.Merge(m, src)
}
func (m *Volume_HostPath) XXX_Size() int {
	return xxx_messageInfo_Volume_HostPath.Size(m)
}
func (m *Volume_HostPath) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_HostPath.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_HostPath proto.InternalMessageInfo

func (m *Volume_HostPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Volume_HostPath) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Volume_EmptyDir struct {
	//
	//emptyDir 存储介质, "" 代表使用 node 上面默认的存储
	Medium string `protobuf:"bytes,1,opt,name=medium,proto3" json:"medium" form:"medium"`
	//
	//emptyDir 存储介质, ["", "Memory", "HugePages"], 单位Mi
	SizeLimit            string   `protobuf:"bytes,2,opt,name=sizeLimit,proto3" json:"sizeLimit" form:"sizeLimit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Volume_EmptyDir) Reset()         { *m = Volume_EmptyDir{} }
func (m *Volume_EmptyDir) String() string { return proto.CompactTextString(m) }
func (*Volume_EmptyDir) ProtoMessage()    {}
func (*Volume_EmptyDir) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 1}
}
func (m *Volume_EmptyDir) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_EmptyDir.Unmarshal(m, b)
}
func (m *Volume_EmptyDir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_EmptyDir.Marshal(b, m, deterministic)
}
func (m *Volume_EmptyDir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_EmptyDir.Merge(m, src)
}
func (m *Volume_EmptyDir) XXX_Size() int {
	return xxx_messageInfo_Volume_EmptyDir.Size(m)
}
func (m *Volume_EmptyDir) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_EmptyDir.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_EmptyDir proto.InternalMessageInfo

func (m *Volume_EmptyDir) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

func (m *Volume_EmptyDir) GetSizeLimit() string {
	if m != nil {
		return m.SizeLimit
	}
	return ""
}

type Volume_Secret struct {
	//
	//使用的密钥名称
	SecretName string `protobuf:"bytes,1,opt,name=secretName,proto3" json:"secretName" form:"secretName"`
	//
	//key 映射文件名
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" json:"items" form:"items"`
	//
	//默认文件权限
	DefaultMode string `protobuf:"bytes,3,opt,name=defaultMode,proto3" json:"defaultMode" form:"defaultMode"`
	//
	//secret或者key必须存在
	Optional             bool     `protobuf:"varint,4,opt,name=optional,proto3" json:"optional" form:"optional"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Volume_Secret) Reset()         { *m = Volume_Secret{} }
func (m *Volume_Secret) String() string { return proto.CompactTextString(m) }
func (*Volume_Secret) ProtoMessage()    {}
func (*Volume_Secret) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 2}
}
func (m *Volume_Secret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_Secret.Unmarshal(m, b)
}
func (m *Volume_Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_Secret.Marshal(b, m, deterministic)
}
func (m *Volume_Secret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_Secret.Merge(m, src)
}
func (m *Volume_Secret) XXX_Size() int {
	return xxx_messageInfo_Volume_Secret.Size(m)
}
func (m *Volume_Secret) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_Secret proto.InternalMessageInfo

func (m *Volume_Secret) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *Volume_Secret) GetItems() []*KeyToPath {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Volume_Secret) GetDefaultMode() string {
	if m != nil {
		return m.DefaultMode
	}
	return ""
}

func (m *Volume_Secret) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

type Volume_ConfigMap struct {
	//
	//使用的 configMap 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name"`
	//
	//key 映射文件名
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" json:"items" form:"items"`
	//
	//默认文件权限
	DefaultMode string `protobuf:"bytes,3,opt,name=defaultMode,proto3" json:"defaultMode" form:"defaultMode"`
	//
	//secret或者key必须存在
	Optional             bool     `protobuf:"varint,4,opt,name=optional,proto3" json:"optional" form:"optional"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Volume_ConfigMap) Reset()         { *m = Volume_ConfigMap{} }
func (m *Volume_ConfigMap) String() string { return proto.CompactTextString(m) }
func (*Volume_ConfigMap) ProtoMessage()    {}
func (*Volume_ConfigMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 3}
}
func (m *Volume_ConfigMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_ConfigMap.Unmarshal(m, b)
}
func (m *Volume_ConfigMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_ConfigMap.Marshal(b, m, deterministic)
}
func (m *Volume_ConfigMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_ConfigMap.Merge(m, src)
}
func (m *Volume_ConfigMap) XXX_Size() int {
	return xxx_messageInfo_Volume_ConfigMap.Size(m)
}
func (m *Volume_ConfigMap) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_ConfigMap.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_ConfigMap proto.InternalMessageInfo

func (m *Volume_ConfigMap) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume_ConfigMap) GetItems() []*KeyToPath {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Volume_ConfigMap) GetDefaultMode() string {
	if m != nil {
		return m.DefaultMode
	}
	return ""
}

func (m *Volume_ConfigMap) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

type Volume_PersistentVolumeClaim struct {
	//
	//pvc名称, 必须要同一 namespace 下面
	ClaimName string `protobuf:"bytes,1,opt,name=claimName,proto3" json:"claimName" form:"claimName"`
	//
	//只读
	ReadOnly             bool     `protobuf:"varint,2,opt,name=readOnly,proto3" json:"readOnly" form:"readOnly"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Volume_PersistentVolumeClaim) Reset()         { *m = Volume_PersistentVolumeClaim{} }
func (m *Volume_PersistentVolumeClaim) String() string { return proto.CompactTextString(m) }
func (*Volume_PersistentVolumeClaim) ProtoMessage()    {}
func (*Volume_PersistentVolumeClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 4}
}
func (m *Volume_PersistentVolumeClaim) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_PersistentVolumeClaim.Unmarshal(m, b)
}
func (m *Volume_PersistentVolumeClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_PersistentVolumeClaim.Marshal(b, m, deterministic)
}
func (m *Volume_PersistentVolumeClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_PersistentVolumeClaim.Merge(m, src)
}
func (m *Volume_PersistentVolumeClaim) XXX_Size() int {
	return xxx_messageInfo_Volume_PersistentVolumeClaim.Size(m)
}
func (m *Volume_PersistentVolumeClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_PersistentVolumeClaim.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_PersistentVolumeClaim proto.InternalMessageInfo

func (m *Volume_PersistentVolumeClaim) GetClaimName() string {
	if m != nil {
		return m.ClaimName
	}
	return ""
}

func (m *Volume_PersistentVolumeClaim) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func init() {
	proto.RegisterType((*Volume)(nil), "container.Volume")
	proto.RegisterType((*Volume_HostPath)(nil), "container.Volume.HostPath")
	proto.RegisterType((*Volume_EmptyDir)(nil), "container.Volume.EmptyDir")
	proto.RegisterType((*Volume_Secret)(nil), "container.Volume.Secret")
	proto.RegisterType((*Volume_ConfigMap)(nil), "container.Volume.ConfigMap")
	proto.RegisterType((*Volume_PersistentVolumeClaim)(nil), "container.Volume.PersistentVolumeClaim")
}

func init() { proto.RegisterFile("volume.proto", fileDescriptor_498b213ad3bcd5ad) }

var fileDescriptor_498b213ad3bcd5ad = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0x56, 0x20, 0x44, 0xc9, 0x84, 0x15, 0xe0, 0x85, 0x95, 0x95, 0x5d, 0xc9, 0xd9, 0x59, 0xa4,
	0x75, 0x40, 0x8e, 0x57, 0xec, 0x87, 0xb6, 0x08, 0x15, 0xd5, 0x29, 0x2a, 0x15, 0xa5, 0x20, 0xf7,
	0xe3, 0x40, 0x4c, 0xd0, 0x90, 0x4c, 0x92, 0x11, 0x76, 0xc6, 0xb2, 0x27, 0xa0, 0xa0, 0x48, 0xfd,
	0x2d, 0xfd, 0x55, 0x55, 0x2f, 0xae, 0xd4, 0x53, 0xcf, 0xfe, 0x05, 0xd5, 0xcc, 0xd8, 0x8e, 0xdb,
	0xa4, 0xb7, 0x5e, 0x7a, 0x1b, 0xbf, 0xef, 0xf3, 0x31, 0xd6, 0xfb, 0xbc, 0x03, 0x56, 0x6f, 0xa9,
	0x3b, 0xf6, 0x70, 0xd3, 0x0f, 0x28, 0xa3, 0x4a, 0xa5, 0x4b, 0x47, 0x0c, 0x91, 0x11, 0x0e, 0x6a,
	0xc6, 0x80, 0xb0, 0xe1, 0xf8, 0xba, 0xd9, 0xa5, 0x9e, 0x39, 0xa0, 0x03, 0x6a, 0x0a, 0xc4, 0xf5,
	0xb8, 0x2f, 0xbe, 0xc4, 0x87, 0x38, 0x49, 0x66, 0xed, 0xd5, 0x80, 0x36, 0x31, 0x0a, 0x27, 0xd4,
	0x0f, 0x9b, 0x2e, 0xed, 0x22, 0xd7, 0xe4, 0x52, 0x01, 0xea, 0xb2, 0x50, 0x32, 0x03, 0xec, 0x53,
	0xc3, 0xa3, 0x3d, 0xec, 0x86, 0x66, 0x02, 0x34, 0xc5, 0xa7, 0x99, 0x79, 0x9a, 0x37, 0x78, 0x72,
	0xc5, 0xe8, 0x95, 0x8f, 0xd8, 0x30, 0x91, 0xfd, 0x2f, 0x77, 0x0b, 0xef, 0x8e, 0xb0, 0x1b, 0x7a,
	0x67, 0x0e, 0xa8, 0x21, 0x9a, 0xc6, 0x2d, 0x72, 0x49, 0x0f, 0x31, 0x1a, 0x84, 0x66, 0x76, 0x94,
	0x3c, 0xf8, 0x0e, 0x80, 0xd2, 0x6b, 0xf1, 0x67, 0xca, 0x31, 0x28, 0x8e, 0x90, 0x87, 0xd5, 0x42,
	0xbd, 0xa0, 0x57, 0xac, 0x7f, 0xe2, 0x48, 0xab, 0xf6, 0x69, 0xe0, 0xed, 0x43, 0x5e, 0x85, 0x1f,
	0x3f, 0x68, 0xbf, 0x03, 0xad, 0xd3, 0x46, 0xc6, 0xfd, 0x5f, 0xc6, 0x83, 0x4b, 0xbd, 0x6d, 0x24,
	0xa7, 0x9d, 0xb4, 0xd4, 0x38, 0xdc, 0xb6, 0x85, 0x82, 0x72, 0x02, 0xca, 0x43, 0x1a, 0xb2, 0x73,
	0xc4, 0x86, 0xea, 0x52, 0xbd, 0xa0, 0x57, 0xf7, 0x6a, 0xcd, 0xec, 0xf2, 0x4d, 0x69, 0xd7, 0x3c,
	0x4e, 0x10, 0xd6, 0xcf, 0x71, 0xa4, 0xad, 0x49, 0xa7, 0x94, 0x05, 0xed, 0x4c, 0x80, 0x8b, 0x61,
	0xcf, 0x67, 0x93, 0xc7, 0x24, 0x50, 0x97, 0xbf, 0x25, 0x76, 0x94, 0x20, 0xf2, 0x62, 0x29, 0x0b,
	0xda, 0x99, 0x80, 0xd2, 0x02, 0xa5, 0x10, 0x77, 0x03, 0xcc, 0xd4, 0xa2, 0x90, 0x52, 0xe7, 0xa5,
	0x5e, 0x88, 0xbe, 0xb5, 0x11, 0x47, 0xda, 0x4f, 0x52, 0x48, 0x32, 0xa0, 0x9d, 0x50, 0x95, 0x33,
	0xc0, 0xc7, 0xdf, 0x27, 0x83, 0x53, 0xe4, 0xab, 0x2b, 0x42, 0xe7, 0xd7, 0x79, 0x9d, 0x56, 0x0a,
	0xb1, 0x36, 0xe3, 0x48, 0x5b, 0x97, 0x52, 0x19, 0x0f, 0xda, 0x33, 0x0d, 0xe5, 0x0d, 0xd8, 0xf2,
	0x71, 0x10, 0x92, 0x90, 0xe1, 0x11, 0x93, 0xf4, 0x96, 0x8b, 0x88, 0xa7, 0x96, 0x84, 0xf8, 0x9f,
	0xf3, 0xe2, 0xe7, 0x8b, 0xe0, 0x56, 0x3d, 0x8e, 0xb4, 0xdf, 0xa4, 0xd1, 0x42, 0x3d, 0x68, 0x2f,
	0xf6, 0xa9, 0xbd, 0x2d, 0x80, 0x72, 0x3a, 0x0f, 0xc5, 0x07, 0x45, 0x1e, 0xac, 0x24, 0x07, 0xce,
	0x2c, 0x07, 0xbc, 0xca, 0x73, 0xf0, 0x14, 0x3c, 0xe9, 0xe8, 0xba, 0x63, 0xb6, 0x3b, 0x8e, 0xb9,
	0xef, 0xec, 0x38, 0x87, 0x10, 0x1e, 0x3c, 0x74, 0xa6, 0x4e, 0xe0, 0x8c, 0x2e, 0x77, 0x1b, 0xbb,
	0x8d, 0xa9, 0xee, 0x98, 0x8d, 0x29, 0x8f, 0xc5, 0x23, 0xe3, 0xe2, 0x72, 0x5f, 0x77, 0x9c, 0x76,
	0xc7, 0x71, 0xe6, 0x91, 0x3b, 0xdb, 0xb6, 0x70, 0x52, 0xfe, 0x00, 0x45, 0x36, 0xf1, 0xb1, 0xc8,
	0x4a, 0xc5, 0x5a, 0x9b, 0x39, 0xf2, 0x2a, 0xb4, 0x45, 0xb3, 0x46, 0x40, 0x39, 0x9d, 0xb2, 0xd2,
	0x00, 0x25, 0x0f, 0xf7, 0xc8, 0xd8, 0x4b, 0x2e, 0x99, 0x1b, 0x96, 0xac, 0x43, 0x3b, 0x01, 0x28,
	0x7b, 0xa0, 0x12, 0x92, 0x7b, 0xfc, 0x8c, 0x78, 0x84, 0x25, 0x06, 0xb9, 0x79, 0x64, 0x2d, 0x68,
	0xcf, 0x60, 0xb5, 0x4f, 0x05, 0x50, 0x92, 0x31, 0x50, 0xfe, 0x05, 0x40, 0x4e, 0xfd, 0xf9, 0x6c,
	0x35, 0xb6, 0xe2, 0x48, 0xdb, 0xc8, 0x47, 0x83, 0xf7, 0xa0, 0x9d, 0x03, 0x2a, 0x07, 0x60, 0x85,
	0x30, 0xec, 0x85, 0xea, 0x52, 0x7d, 0x59, 0xaf, 0xee, 0x6d, 0xe6, 0x26, 0x78, 0x82, 0x27, 0x2f,
	0xa9, 0x08, 0xfe, 0x7a, 0x1c, 0x69, 0xab, 0x52, 0x47, 0x80, 0xa1, 0x2d, 0x49, 0xca, 0xff, 0xa0,
	0xda, 0xc3, 0x7d, 0x34, 0x76, 0xd9, 0x29, 0xed, 0x61, 0x91, 0xfa, 0x8a, 0xf5, 0x4b, 0x1c, 0x69,
	0x8a, 0x44, 0xe7, 0x9a, 0xd0, 0xce, 0x43, 0x15, 0x13, 0x94, 0xa9, 0xcf, 0x08, 0x1d, 0x21, 0x57,
	0x24, 0xbc, 0x9c, 0x5f, 0x88, 0xb4, 0x03, 0xed, 0x0c, 0x54, 0x7b, 0x5f, 0x00, 0x95, 0x2c, 0xa9,
	0x7c, 0x10, 0xb9, 0x27, 0x60, 0xed, 0xab, 0x27, 0x20, 0xd9, 0xee, 0x1f, 0xe6, 0xdf, 0xa6, 0x60,
	0x6b, 0xe1, 0x9e, 0xf0, 0x4c, 0x74, 0xf9, 0x21, 0x37, 0xd3, 0xfc, 0x8e, 0xa6, 0x2d, 0xbe, 0xa3,
	0xe9, 0x99, 0xbb, 0x07, 0x18, 0xf5, 0xce, 0x46, 0xee, 0x44, 0xc4, 0xe8, 0x0b, 0xf7, 0xb4, 0x03,
	0xed, 0x0c, 0x64, 0x1d, 0x5d, 0xb4, 0xbe, 0xc3, 0x53, 0x7f, 0x5d, 0x12, 0xc8, 0xbf, 0x3f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xae, 0x31, 0x8d, 0x73, 0x80, 0x06, 0x00, 0x00,
}
