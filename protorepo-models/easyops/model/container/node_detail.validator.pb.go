// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node_detail.proto

package container

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *NodeDetail) Validate() error {
	if this.Metadata != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Metadata); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Metadata", err)
		}
	}
	if this.Spec != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Spec); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Spec", err)
		}
	}
	if this.Status != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Status); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Status", err)
		}
	}
	return nil
}
func (this *NodeDetail_Spec) Validate() error {
	return nil
}
func (this *NodeDetail_Status) Validate() error {
	if this.Capacity != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Capacity); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Capacity", err)
		}
	}
	if this.Allocatable != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Allocatable); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Allocatable", err)
		}
	}
	if this.NodeInfo != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NodeInfo); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NodeInfo", err)
		}
	}
	return nil
}
func (this *NodeDetail_Status_Capacity) Validate() error {
	return nil
}
func (this *NodeDetail_Status_Allocatable) Validate() error {
	return nil
}
func (this *NodeDetail_Status_NodeInfo) Validate() error {
	return nil
}
