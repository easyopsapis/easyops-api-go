// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: configmap.proto

package container

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//ConfigMap holds configuration data for pods to consume.
type ConfigMap struct {
	//
	//configmap id，服务端自动生成
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId" form:"instanceId"`
	//
	//k8s 资源类型, ConfigMap
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind" form:"kind"`
	//
	//configmap 全称，命名规则 clusterId:namespace:kind:name, 创建之后不能修改
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name"`
	//
	//命名空间, 创建之后不能修改
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace" form:"namespace"`
	//
	//名称
	ResourceName string `protobuf:"bytes,5,opt,name=resourceName,proto3" json:"resourceName" form:"resourceName"`
	//
	//configmap 描述
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description" form:"description"`
	//
	//configmap, each key must consist of alphanumeric characters, '-', '_' or '.'
	Data *types.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data" form:"data"`
	//
	//service 定义
	ResourceSpec         string   `protobuf:"bytes,8,opt,name=resourceSpec,proto3" json:"resourceSpec" form:"resourceSpec"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigMap) Reset()         { *m = ConfigMap{} }
func (m *ConfigMap) String() string { return proto.CompactTextString(m) }
func (*ConfigMap) ProtoMessage()    {}
func (*ConfigMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9a4fcd82d33260, []int{0}
}
func (m *ConfigMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigMap.Unmarshal(m, b)
}
func (m *ConfigMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigMap.Marshal(b, m, deterministic)
}
func (m *ConfigMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMap.Merge(m, src)
}
func (m *ConfigMap) XXX_Size() int {
	return xxx_messageInfo_ConfigMap.Size(m)
}
func (m *ConfigMap) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMap.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMap proto.InternalMessageInfo

func (m *ConfigMap) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *ConfigMap) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ConfigMap) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigMap) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ConfigMap) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *ConfigMap) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ConfigMap) GetData() *types.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConfigMap) GetResourceSpec() string {
	if m != nil {
		return m.ResourceSpec
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigMap)(nil), "container.ConfigMap")
}

func init() { proto.RegisterFile("configmap.proto", fileDescriptor_fd9a4fcd82d33260) }

var fileDescriptor_fd9a4fcd82d33260 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x35, 0x56, 0x06, 0x75, 0x11, 0x1b, 0x06, 0xb1, 0x68, 0x9a, 0xc8, 0x64, 0x76, 0xe8,
	0x90, 0x9c, 0x8c, 0x4d, 0x42, 0x14, 0x90, 0x90, 0x36, 0x71, 0xd8, 0x01, 0x0e, 0xd9, 0x8d, 0xaa,
	0x93, 0x5c, 0xc7, 0x0d, 0xd6, 0x92, 0xbc, 0xc8, 0x76, 0x99, 0x18, 0xe2, 0x5f, 0x0d, 0x12, 0x27,
	0xce, 0xf9, 0x0b, 0x90, 0x5f, 0xca, 0x92, 0xc1, 0xa9, 0x7e, 0xfe, 0x7e, 0xdf, 0xe7, 0xbe, 0xbc,
	0x47, 0x36, 0x25, 0x94, 0x0b, 0x9d, 0x15, 0xa2, 0x8a, 0x2a, 0x03, 0x0e, 0xe8, 0x50, 0x42, 0xe9,
	0x84, 0x2e, 0x95, 0xd9, 0xe1, 0x99, 0x76, 0x5f, 0x96, 0xf3, 0x48, 0x42, 0x11, 0x67, 0x90, 0x41,
	0x8c, 0xc4, 0x7c, 0xb9, 0xc0, 0x0a, 0x0b, 0x3c, 0xb5, 0xce, 0x9d, 0x57, 0x3d, 0xbc, 0xb8, 0xd2,
	0xee, 0x12, 0xae, 0xe2, 0x0c, 0x38, 0x8a, 0xfc, 0xab, 0xc8, 0x75, 0x2a, 0x1c, 0x18, 0x1b, 0xdf,
	0x1c, 0x57, 0xbe, 0xdd, 0x0c, 0x20, 0xcb, 0x55, 0x97, 0x6e, 0x9d, 0x59, 0x4a, 0xd7, 0xaa, 0xec,
	0xf7, 0x3a, 0x19, 0x9e, 0xe2, 0x7f, 0xfc, 0x28, 0x2a, 0x7a, 0x46, 0x88, 0x2e, 0xad, 0x13, 0xa5,
	0x54, 0x67, 0x69, 0xb0, 0xb6, 0xb7, 0x36, 0x1e, 0x9e, 0x1c, 0x34, 0x75, 0xf8, 0x68, 0x01, 0xa6,
	0x78, 0xc3, 0x3a, 0x8d, 0xfd, 0xfa, 0x19, 0x6e, 0x91, 0x87, 0x17, 0xd3, 0x43, 0x3e, 0x11, 0xfc,
	0x7a, 0xf6, 0xfd, 0xe5, 0xf1, 0x8f, 0xfd, 0xa4, 0x67, 0xa6, 0xcf, 0xc9, 0xe0, 0x52, 0x97, 0x69,
	0x70, 0x07, 0x43, 0x36, 0x9b, 0x3a, 0x1c, 0xb5, 0x21, 0xfe, 0x96, 0x25, 0x28, 0x7a, 0xa8, 0x14,
	0x85, 0x0a, 0xd6, 0xff, 0x85, 0xfc, 0x2d, 0x4b, 0x50, 0xa4, 0x47, 0x64, 0xe8, 0x7f, 0x6d, 0x25,
	0xa4, 0x0a, 0x06, 0x48, 0x3e, 0x69, 0xea, 0x70, 0xab, 0x23, 0x51, 0x62, 0x49, 0x87, 0xd1, 0x19,
	0x79, 0x60, 0x94, 0x85, 0xa5, 0x91, 0xea, 0x93, 0x7f, 0xe0, 0x2e, 0xda, 0x26, 0x4d, 0x1d, 0x3e,
	0x6e, 0x6d, 0x7d, 0xd5, 0x37, 0xf3, 0x8c, 0xec, 0x5e, 0x4c, 0x7d, 0x27, 0xe3, 0x29, 0x17, 0xfc,
	0xfa, 0x90, 0x4f, 0x66, 0x2f, 0xa6, 0xab, 0xc3, 0xc1, 0xfb, 0xfd, 0xe4, 0x56, 0x1c, 0x7d, 0x4d,
	0x46, 0xa9, 0xb2, 0xd2, 0xe8, 0xca, 0x69, 0x28, 0x83, 0x0d, 0x4c, 0x7f, 0xda, 0xd4, 0x21, 0x6d,
	0xd3, 0x7b, 0x22, 0x4b, 0xfa, 0x28, 0x7d, 0x47, 0x06, 0xa9, 0x70, 0x22, 0xb8, 0xb7, 0xb7, 0x36,
	0x1e, 0x1d, 0x6d, 0x47, 0xed, 0x70, 0xa2, 0xbf, 0xc3, 0x89, 0xce, 0x71, 0x38, 0xfd, 0x4f, 0xe1,
	0x71, 0x96, 0xa0, 0x8b, 0xbe, 0xed, 0xda, 0x3a, 0xaf, 0x94, 0x0c, 0xee, 0xe3, 0xc3, 0xdb, 0xff,
	0xb7, 0xe5, 0x55, 0x96, 0xdc, 0x82, 0x4f, 0x3e, 0x7c, 0x3e, 0xcd, 0x20, 0x52, 0xc2, 0x7e, 0x83,
	0xca, 0x46, 0x39, 0x48, 0x91, 0xc7, 0x7e, 0x1b, 0x8d, 0x90, 0xce, 0xb6, 0xeb, 0x61, 0x54, 0x05,
	0xbc, 0x80, 0x54, 0xe5, 0x36, 0x5e, 0x81, 0x31, 0x96, 0xf1, 0xcd, 0xda, 0xce, 0x37, 0x90, 0x3c,
	0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x91, 0x83, 0x95, 0xdb, 0x02, 0x00, 0x00,
}
