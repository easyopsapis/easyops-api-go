// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relation_query_strategy_v2.proto

package cmdb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//模型关系查询策略v2
type RelationQueryStrategyV2 struct {
	//
	//策略ID(可以自定义, 不给定后台会默认生成)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id"`
	//
	//v3(精确查询)或v4(全量查询字段)
	ByPath string `protobuf:"bytes,2,opt,name=byPath,proto3" json:"byPath" form:"byPath"`
	//
	//策略名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name"`
	//
	//策略类型(org 或者 user)
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type" form:"type"`
	//
	//策略内容(包含查询条件和返回的字段, 不指定返回的字段则默认返回name字段, alias ${objectId}.name)
	PathList []*types.Struct `protobuf:"bytes,5,rep,name=path_list,json=pathList,proto3" json:"path_list" form:"path_list"`
	//
	//策略所属模型id
	ObjectId string `protobuf:"bytes,6,opt,name=object_id,json=objectId,proto3" json:"object_id" form:"object_id"`
	//
	//创建时间
	Ctime string `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime" form:"ctime"`
	//
	//创建用户
	Creator              string   `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator" form:"creator"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationQueryStrategyV2) Reset()         { *m = RelationQueryStrategyV2{} }
func (m *RelationQueryStrategyV2) String() string { return proto.CompactTextString(m) }
func (*RelationQueryStrategyV2) ProtoMessage()    {}
func (*RelationQueryStrategyV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_a88849e6e6687576, []int{0}
}
func (m *RelationQueryStrategyV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelationQueryStrategyV2.Unmarshal(m, b)
}
func (m *RelationQueryStrategyV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelationQueryStrategyV2.Marshal(b, m, deterministic)
}
func (m *RelationQueryStrategyV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationQueryStrategyV2.Merge(m, src)
}
func (m *RelationQueryStrategyV2) XXX_Size() int {
	return xxx_messageInfo_RelationQueryStrategyV2.Size(m)
}
func (m *RelationQueryStrategyV2) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationQueryStrategyV2.DiscardUnknown(m)
}

var xxx_messageInfo_RelationQueryStrategyV2 proto.InternalMessageInfo

func (m *RelationQueryStrategyV2) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RelationQueryStrategyV2) GetByPath() string {
	if m != nil {
		return m.ByPath
	}
	return ""
}

func (m *RelationQueryStrategyV2) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelationQueryStrategyV2) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RelationQueryStrategyV2) GetPathList() []*types.Struct {
	if m != nil {
		return m.PathList
	}
	return nil
}

func (m *RelationQueryStrategyV2) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *RelationQueryStrategyV2) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *RelationQueryStrategyV2) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*RelationQueryStrategyV2)(nil), "cmdb.RelationQueryStrategyV2")
}

func init() { proto.RegisterFile("relation_query_strategy_v2.proto", fileDescriptor_a88849e6e6687576) }

var fileDescriptor_a88849e6e6687576 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x51, 0x6b, 0xd4, 0x40,
	0x10, 0x80, 0xe9, 0xdd, 0xf5, 0x7a, 0xb7, 0xb5, 0x5a, 0x83, 0xd0, 0x50, 0x2c, 0x39, 0x56, 0x91,
	0x0a, 0x4d, 0x52, 0xaf, 0xa0, 0xe8, 0x83, 0xe8, 0xbd, 0x29, 0x3e, 0x68, 0x2a, 0x3e, 0xb4, 0x68,
	0xd8, 0x6c, 0xb6, 0xb9, 0xd5, 0xe4, 0x26, 0xee, 0xce, 0xb5, 0x44, 0xf1, 0xe7, 0xf8, 0xb7, 0x22,
	0xf8, 0x13, 0xf2, 0x0b, 0x24, 0xbb, 0xb9, 0xab, 0xf4, 0x6d, 0x66, 0xbe, 0x6f, 0x26, 0x33, 0x6c,
	0xc8, 0x44, 0x89, 0x9c, 0xa1, 0x84, 0x45, 0xfc, 0x7d, 0x29, 0x54, 0x15, 0x6b, 0x54, 0x0c, 0x45,
	0x56, 0xc5, 0x97, 0xd3, 0xa0, 0x54, 0x80, 0xe0, 0x0c, 0x78, 0x91, 0x26, 0xfb, 0x7e, 0x26, 0x71,
	0xbe, 0x4c, 0x02, 0x0e, 0x45, 0x98, 0x41, 0x06, 0xa1, 0x81, 0xc9, 0xf2, 0xc2, 0x64, 0x26, 0x31,
	0x91, 0x6d, 0xda, 0x7f, 0xfa, 0x9f, 0x5e, 0x5c, 0x49, 0xfc, 0x06, 0x57, 0x61, 0x06, 0xbe, 0x81,
	0xfe, 0x25, 0xcb, 0x65, 0xca, 0x10, 0x94, 0x0e, 0xd7, 0x61, 0xd7, 0x77, 0x3f, 0x03, 0xc8, 0x72,
	0x71, 0x3d, 0x5d, 0xa3, 0x5a, 0x72, 0xb4, 0x94, 0xfe, 0xee, 0x93, 0xbd, 0xa8, 0xdb, 0xf7, 0x43,
	0xbb, 0xee, 0x69, 0xb7, 0xed, 0xa7, 0xa9, 0x73, 0x40, 0x7a, 0x32, 0x75, 0x37, 0x26, 0x1b, 0x87,
	0xe3, 0xd9, 0x4e, 0x53, 0x7b, 0xe3, 0x0b, 0x50, 0xc5, 0x0b, 0x2a, 0x53, 0x1a, 0xf5, 0x64, 0xea,
	0x3c, 0x26, 0xc3, 0xa4, 0x7a, 0xcf, 0x70, 0xee, 0xf6, 0x8c, 0x72, 0xb7, 0xa9, 0xbd, 0x1d, 0xab,
	0xd8, 0x3a, 0x8d, 0x3a, 0xc1, 0x79, 0x40, 0x06, 0x0b, 0x56, 0x08, 0xb7, 0x6f, 0xc4, 0x3b, 0x4d,
	0xed, 0x6d, 0x5b, 0xb1, 0xad, 0xd2, 0xc8, 0xc0, 0x56, 0xc2, 0xaa, 0x14, 0xee, 0xe0, 0xa6, 0xd4,
	0x56, 0x69, 0x64, 0xa0, 0xf3, 0x96, 0x8c, 0x4b, 0x86, 0xf3, 0x38, 0x97, 0x1a, 0xdd, 0xcd, 0x49,
	0xff, 0x70, 0x7b, 0xba, 0x17, 0xd8, 0x0b, 0x83, 0xd5, 0x85, 0xc1, 0xa9, 0xb9, 0x70, 0x76, 0xaf,
	0xa9, 0xbd, 0x5d, 0x3b, 0x62, 0xdd, 0x43, 0xa3, 0x51, 0x1b, 0xbf, 0x93, 0x1a, 0x9d, 0x8f, 0x64,
	0x0c, 0xc9, 0x57, 0xc1, 0x31, 0x96, 0xa9, 0x3b, 0x34, 0x5f, 0x7d, 0x76, 0xdd, 0xb2, 0x46, 0xf4,
	0xef, 0x1f, 0xcf, 0x23, 0x07, 0x5f, 0xce, 0x99, 0xff, 0xe3, 0xb5, 0x7f, 0x16, 0x7f, 0x3e, 0x3f,
	0xf6, 0x9f, 0xaf, 0xe2, 0x9f, 0xc7, 0x47, 0x27, 0x4f, 0x7e, 0x3d, 0x8c, 0x46, 0x56, 0x7f, 0x93,
	0x3a, 0x8f, 0xc8, 0x26, 0x47, 0x59, 0x08, 0x77, 0xcb, 0x4c, 0xdc, 0x6d, 0x6a, 0xef, 0x96, 0x9d,
	0x68, 0xca, 0x34, 0xb2, 0xd8, 0x39, 0x22, 0x5b, 0x5c, 0x89, 0xf6, 0xa1, 0xdc, 0x91, 0x31, 0x9d,
	0xa6, 0xf6, 0x6e, 0x77, 0xa6, 0x05, 0x34, 0x5a, 0x29, 0xb3, 0x57, 0x67, 0x2f, 0x33, 0x08, 0x04,
	0xd3, 0x15, 0x94, 0x3a, 0xc8, 0x81, 0xb3, 0x3c, 0xe4, 0xb0, 0x40, 0xc5, 0x38, 0x6a, 0xfb, 0xb6,
	0x4a, 0x94, 0xe0, 0x17, 0x90, 0x8a, 0x5c, 0x87, 0x9d, 0x18, 0x9a, 0x34, 0x6c, 0x7f, 0xb7, 0x64,
	0x68, 0xa4, 0x93, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x1a, 0xd4, 0x6f, 0x9f, 0x02, 0x00,
	0x00,
}
