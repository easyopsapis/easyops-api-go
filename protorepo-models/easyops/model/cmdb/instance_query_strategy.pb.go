// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: instance_query_strategy.proto

package cmdb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//实例查询策略
type InstanceQueryStrategy struct {
	//
	//策略ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id"`
	//
	//策略名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//策略所属模型id
	ObjectId string `protobuf:"bytes,3,opt,name=objectId,proto3" json:"objectId" form:"objectId"`
	//
	//策略类型(org 或者 user)
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type" form:"type"`
	//
	//策略对应的实例类型(instance 或者 relation)
	InstanceType string `protobuf:"bytes,5,opt,name=instance_type,json=instanceType,proto3" json:"instance_type" form:"instance_type"`
	//
	//策略内容(包含查询条件和返回的字段,供前端使用，后台逻辑暂时不做校验)
	Query *types.Struct `protobuf:"bytes,6,opt,name=query,proto3" json:"query" form:"query"`
	//
	//创建时间
	Ctime string `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime" form:"ctime"`
	//
	//创建用户
	Creator              string   `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator" form:"creator"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceQueryStrategy) Reset()         { *m = InstanceQueryStrategy{} }
func (m *InstanceQueryStrategy) String() string { return proto.CompactTextString(m) }
func (*InstanceQueryStrategy) ProtoMessage()    {}
func (*InstanceQueryStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a490d69ba0d104d, []int{0}
}
func (m *InstanceQueryStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceQueryStrategy.Unmarshal(m, b)
}
func (m *InstanceQueryStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceQueryStrategy.Marshal(b, m, deterministic)
}
func (m *InstanceQueryStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceQueryStrategy.Merge(m, src)
}
func (m *InstanceQueryStrategy) XXX_Size() int {
	return xxx_messageInfo_InstanceQueryStrategy.Size(m)
}
func (m *InstanceQueryStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceQueryStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceQueryStrategy proto.InternalMessageInfo

func (m *InstanceQueryStrategy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InstanceQueryStrategy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceQueryStrategy) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *InstanceQueryStrategy) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InstanceQueryStrategy) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *InstanceQueryStrategy) GetQuery() *types.Struct {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *InstanceQueryStrategy) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *InstanceQueryStrategy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*InstanceQueryStrategy)(nil), "cmdb.InstanceQueryStrategy")
}

func init() { proto.RegisterFile("instance_query_strategy.proto", fileDescriptor_2a490d69ba0d104d) }

var fileDescriptor_2a490d69ba0d104d = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0xc7, 0xb5, 0xdb, 0xdd, 0x7e, 0xb8, 0x2d, 0x45, 0x11, 0x88, 0xa8, 0x62, 0x95, 0xca, 0x20,
	0xd4, 0x43, 0x93, 0x14, 0x2a, 0x55, 0x02, 0x89, 0xaf, 0xbd, 0xf5, 0x88, 0xcb, 0xa9, 0x15, 0xac,
	0x1c, 0xc7, 0x35, 0x86, 0x64, 0x67, 0xb1, 0xbd, 0x54, 0x01, 0xf1, 0x42, 0x3c, 0x54, 0x90, 0x78,
	0x84, 0x3c, 0x01, 0xca, 0x38, 0x59, 0x56, 0xdc, 0x66, 0xe6, 0xff, 0x9b, 0x0f, 0xcf, 0x98, 0x4c,
	0xf4, 0xdc, 0x3a, 0x3e, 0x17, 0x72, 0xf6, 0x75, 0x29, 0x4d, 0x35, 0xb3, 0xce, 0x70, 0x27, 0x55,
	0x95, 0x2c, 0x0c, 0x38, 0x08, 0x46, 0xa2, 0xcc, 0xb3, 0xc3, 0x58, 0x69, 0xf7, 0x69, 0x99, 0x25,
	0x02, 0xca, 0x54, 0x81, 0x82, 0x14, 0xc5, 0x6c, 0x79, 0x83, 0x1e, 0x3a, 0x68, 0xf9, 0xa4, 0xc3,
	0xf3, 0x35, 0xbc, 0xbc, 0xd5, 0xee, 0x0b, 0xdc, 0xa6, 0x0a, 0x62, 0x14, 0xe3, 0x6f, 0xbc, 0xd0,
	0x39, 0x77, 0x60, 0x6c, 0xba, 0x32, 0xbb, 0xbc, 0x87, 0x0a, 0x40, 0x15, 0xf2, 0x5f, 0x75, 0xeb,
	0xcc, 0x52, 0x38, 0xaf, 0xd2, 0x5f, 0x1b, 0xe4, 0xfe, 0x45, 0x37, 0xec, 0xbb, 0x76, 0xd6, 0xcb,
	0x6e, 0xd4, 0x60, 0x42, 0x86, 0x3a, 0x0f, 0x07, 0x47, 0x83, 0xe3, 0x9d, 0xe9, 0x7e, 0x53, 0x47,
	0x3b, 0x37, 0x60, 0xca, 0x17, 0x54, 0xe7, 0x94, 0x0d, 0x75, 0x1e, 0x3c, 0x22, 0xa3, 0x39, 0x2f,
	0x65, 0x38, 0x44, 0xe0, 0xa0, 0xa9, 0xa3, 0x5d, 0x0f, 0xb4, 0x51, 0xca, 0x50, 0x0c, 0x18, 0xd9,
	0x86, 0xec, 0xb3, 0x14, 0xee, 0x22, 0x0f, 0x37, 0x10, 0x3c, 0x6f, 0xea, 0xe8, 0xc0, 0x83, 0xbd,
	0x42, 0xff, 0xfc, 0x8e, 0x22, 0x32, 0xf9, 0x78, 0xcd, 0xe3, 0xef, 0x6f, 0xe3, 0xab, 0xd9, 0x87,
	0xeb, 0xd3, 0xf8, 0x79, 0x6f, 0xff, 0x38, 0x3d, 0x39, 0x7b, 0xfa, 0xf3, 0x31, 0x5b, 0xd5, 0x69,
	0x1b, 0xbb, 0x6a, 0x21, 0xc3, 0xd1, 0xff, 0x8d, 0xdb, 0x28, 0x65, 0x28, 0x06, 0x2f, 0xc9, 0xfe,
	0xea, 0x04, 0x48, 0x8f, 0x91, 0x0e, 0x9b, 0x3a, 0xba, 0xd7, 0xbd, 0x63, 0x5d, 0xa6, 0x6c, 0xaf,
	0xf7, 0xdf, 0xb7, 0xe9, 0xaf, 0xc9, 0x18, 0x0f, 0x17, 0x6e, 0x1e, 0x0d, 0x8e, 0x77, 0x9f, 0x3d,
	0x48, 0xfc, 0x0e, 0x93, 0x7e, 0x87, 0xc9, 0x25, 0xee, 0x70, 0x7a, 0xb7, 0xa9, 0xa3, 0x3d, 0x5f,
	0x0f, 0x79, 0xca, 0x7c, 0x5e, 0xf0, 0x84, 0x8c, 0x85, 0xd3, 0xa5, 0x0c, 0xb7, 0xb0, 0xef, 0x1a,
	0x87, 0x61, 0xca, 0xbc, 0x1c, 0x9c, 0x90, 0x2d, 0x61, 0x64, 0x7b, 0xad, 0x70, 0x1b, 0xc9, 0xa0,
	0xa9, 0xa3, 0x3b, 0x1d, 0xe9, 0x05, 0xca, 0x7a, 0x64, 0xfa, 0xe6, 0xea, 0x95, 0x82, 0x44, 0x72,
	0x5b, 0xc1, 0xc2, 0x26, 0x05, 0x08, 0x5e, 0xa4, 0x02, 0xe6, 0xce, 0x70, 0xe1, 0xac, 0x3f, 0xb0,
	0x91, 0x0b, 0x88, 0x4b, 0xc8, 0x65, 0x61, 0xd3, 0x0e, 0x4c, 0xd1, 0x4d, 0xdb, 0x3f, 0x97, 0x6d,
	0x22, 0x74, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x97, 0x0f, 0xf9, 0xdf, 0xa1, 0x02, 0x00, 0x00,
}
