// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tf_lock_info.proto

package cmdb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//terrafrom锁信息
type TFLockInfo struct {
	//
	//锁Id,随机生成
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID" form:"ID"`
	//
	//Terraform operation, provided by the caller.
	Operation string `protobuf:"bytes,2,opt,name=Operation,proto3" json:"Operation" form:"Operation"`
	//
	//Extra information to store with the lock, provided by the caller.
	Info string `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info" form:"Info"`
	//
	//user@hostname when available
	Who string `protobuf:"bytes,4,opt,name=Who,proto3" json:"Who" form:"Who"`
	//
	//Terraform version
	Version string `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version" form:"Version"`
	//
	//Time that the lock was taken.
	Created string `protobuf:"bytes,6,opt,name=Created,proto3" json:"Created" form:"Created"`
	//
	//Path to the state file when applicable. Set by the Lock implementation.
	Path                 string   `protobuf:"bytes,7,opt,name=Path,proto3" json:"Path" form:"Path"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFLockInfo) Reset()         { *m = TFLockInfo{} }
func (m *TFLockInfo) String() string { return proto.CompactTextString(m) }
func (*TFLockInfo) ProtoMessage()    {}
func (*TFLockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f17e386adac0ef0a, []int{0}
}
func (m *TFLockInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFLockInfo.Unmarshal(m, b)
}
func (m *TFLockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFLockInfo.Marshal(b, m, deterministic)
}
func (m *TFLockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFLockInfo.Merge(m, src)
}
func (m *TFLockInfo) XXX_Size() int {
	return xxx_messageInfo_TFLockInfo.Size(m)
}
func (m *TFLockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TFLockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TFLockInfo proto.InternalMessageInfo

func (m *TFLockInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *TFLockInfo) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *TFLockInfo) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *TFLockInfo) GetWho() string {
	if m != nil {
		return m.Who
	}
	return ""
}

func (m *TFLockInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TFLockInfo) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *TFLockInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*TFLockInfo)(nil), "cmdb.TFLockInfo")
}

func init() { proto.RegisterFile("tf_lock_info.proto", fileDescriptor_f17e386adac0ef0a) }

var fileDescriptor_f17e386adac0ef0a = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd1, 0xd1, 0x4a, 0xf3, 0x30,
	0x14, 0x07, 0x70, 0xd6, 0xed, 0xdb, 0x58, 0x3e, 0x9c, 0x12, 0xbc, 0x28, 0x82, 0x74, 0xc4, 0x1b,
	0x2f, 0x5c, 0x0b, 0x7a, 0xe7, 0x85, 0xc8, 0x1c, 0x42, 0x41, 0x50, 0x82, 0x38, 0xf0, 0x66, 0xb4,
	0x59, 0xd2, 0x96, 0xb5, 0x3d, 0x25, 0xcd, 0x2e, 0x7c, 0x22, 0xdf, 0xaa, 0x0f, 0xd1, 0x27, 0x90,
	0x9c, 0x76, 0x0a, 0xbb, 0xcb, 0xc9, 0xff, 0x97, 0x93, 0x43, 0x42, 0xa8, 0x51, 0x9b, 0x1c, 0xc4,
	0x6e, 0x93, 0x95, 0x0a, 0xfc, 0x4a, 0x83, 0x01, 0x3a, 0x12, 0xc5, 0x36, 0xbe, 0x58, 0x24, 0x99,
	0x49, 0xf7, 0xb1, 0x2f, 0xa0, 0x08, 0x12, 0x48, 0x20, 0xc0, 0x30, 0xde, 0x2b, 0xac, 0xb0, 0xc0,
	0x55, 0x77, 0x88, 0x7d, 0x3b, 0x84, 0xbc, 0x3f, 0xbf, 0x80, 0xd8, 0x85, 0xa5, 0x02, 0x7a, 0x49,
	0x9c, 0x70, 0xe5, 0x0e, 0xe6, 0x83, 0xeb, 0xe9, 0xf2, 0xa4, 0x6d, 0xbc, 0xa9, 0x02, 0x5d, 0xdc,
	0xb3, 0x70, 0xc5, 0xb8, 0x13, 0xae, 0xe8, 0x2d, 0x99, 0xbe, 0x56, 0x52, 0x47, 0x26, 0x83, 0xd2,
	0x75, 0x50, 0x9d, 0xb7, 0x8d, 0x77, 0xd6, 0xa9, 0xdf, 0x88, 0xf1, 0x3f, 0x46, 0xaf, 0xc8, 0xc8,
	0xb6, 0x76, 0x87, 0xc8, 0x4f, 0xdb, 0xc6, 0xfb, 0xdf, 0x37, 0x2d, 0x15, 0x30, 0x8e, 0x21, 0x9d,
	0x93, 0xe1, 0x3a, 0x05, 0x77, 0x84, 0x66, 0xd6, 0x36, 0x1e, 0xe9, 0xcc, 0x3a, 0x05, 0xc6, 0x6d,
	0x44, 0x6f, 0xc8, 0xe4, 0x43, 0xea, 0xda, 0x5e, 0xfc, 0x0f, 0x15, 0x6d, 0x1b, 0x6f, 0xd6, 0xa9,
	0x3e, 0x60, 0xfc, 0x40, 0xac, 0x7e, 0xd2, 0x32, 0x32, 0x72, 0xeb, 0x8e, 0x8f, 0x75, 0x1f, 0x30,
	0x7e, 0x20, 0x76, 0xc4, 0xb7, 0xc8, 0xa4, 0xee, 0xe4, 0x78, 0x44, 0xbb, 0xcb, 0x38, 0x86, 0xcb,
	0xc7, 0xcf, 0x87, 0x04, 0x7c, 0x19, 0xd5, 0x5f, 0x50, 0xd5, 0x7e, 0x0e, 0x22, 0xca, 0x03, 0x01,
	0xa5, 0xd1, 0x91, 0x30, 0x75, 0xf7, 0xca, 0x5a, 0x56, 0xb0, 0x28, 0x60, 0x2b, 0xf3, 0x3a, 0xe8,
	0x61, 0x80, 0x65, 0x60, 0xbf, 0x26, 0x1e, 0x23, 0xba, 0xfb, 0x09, 0x00, 0x00, 0xff, 0xff, 0x3f,
	0xd4, 0xff, 0x5d, 0xbd, 0x01, 0x00, 0x00,
}
