// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: patch_task.proto

package patch_manager

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//补丁安装汇总任务
type PatchTask struct {
	//
	//任务ID，objectId形式的
	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId" form:"taskId"`
	//
	//补丁安装请求
	Request []*PatchTask_Request `protobuf:"bytes,2,rep,name=request,proto3" json:"request" form:"request"`
	//
	//创建人
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator" form:"creator"`
	//
	//创建时间
	Ctime int32 `protobuf:"varint,4,opt,name=ctime,proto3" json:"ctime" form:"ctime"`
	//
	//结束时间
	Etime int32 `protobuf:"varint,5,opt,name=etime,proto3" json:"etime" form:"etime"`
	//
	//任务状态
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status" form:"status"`
	//
	//分批大小
	GroupSize int32 `protobuf:"varint,7,opt,name=groupSize,proto3" json:"groupSize" form:"groupSize"`
	//
	//当前已处理的任务数
	ProcessedCount       int32    `protobuf:"varint,8,opt,name=processedCount,proto3" json:"processedCount" form:"processedCount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PatchTask) Reset()         { *m = PatchTask{} }
func (m *PatchTask) String() string { return proto.CompactTextString(m) }
func (*PatchTask) ProtoMessage()    {}
func (*PatchTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_f658ba008455f669, []int{0}
}
func (m *PatchTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchTask.Unmarshal(m, b)
}
func (m *PatchTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchTask.Marshal(b, m, deterministic)
}
func (m *PatchTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchTask.Merge(m, src)
}
func (m *PatchTask) XXX_Size() int {
	return xxx_messageInfo_PatchTask.Size(m)
}
func (m *PatchTask) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchTask.DiscardUnknown(m)
}

var xxx_messageInfo_PatchTask proto.InternalMessageInfo

func (m *PatchTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *PatchTask) GetRequest() []*PatchTask_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PatchTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PatchTask) GetCtime() int32 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *PatchTask) GetEtime() int32 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *PatchTask) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PatchTask) GetGroupSize() int32 {
	if m != nil {
		return m.GroupSize
	}
	return 0
}

func (m *PatchTask) GetProcessedCount() int32 {
	if m != nil {
		return m.ProcessedCount
	}
	return 0
}

type PatchTask_Request struct {
	//
	//主机ID
	HostId string `protobuf:"bytes,1,opt,name=hostId,proto3" json:"hostId" form:"hostId"`
	//
	//主机ip
	HostIp string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp" form:"hostIp"`
	//
	//安装的补丁实例ID列表
	PatchIdList          []string `protobuf:"bytes,3,rep,name=patchIdList,proto3" json:"patchIdList" form:"patchIdList"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PatchTask_Request) Reset()         { *m = PatchTask_Request{} }
func (m *PatchTask_Request) String() string { return proto.CompactTextString(m) }
func (*PatchTask_Request) ProtoMessage()    {}
func (*PatchTask_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f658ba008455f669, []int{0, 0}
}
func (m *PatchTask_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchTask_Request.Unmarshal(m, b)
}
func (m *PatchTask_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchTask_Request.Marshal(b, m, deterministic)
}
func (m *PatchTask_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchTask_Request.Merge(m, src)
}
func (m *PatchTask_Request) XXX_Size() int {
	return xxx_messageInfo_PatchTask_Request.Size(m)
}
func (m *PatchTask_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchTask_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PatchTask_Request proto.InternalMessageInfo

func (m *PatchTask_Request) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *PatchTask_Request) GetHostIp() string {
	if m != nil {
		return m.HostIp
	}
	return ""
}

func (m *PatchTask_Request) GetPatchIdList() []string {
	if m != nil {
		return m.PatchIdList
	}
	return nil
}

func init() {
	proto.RegisterType((*PatchTask)(nil), "patch_manager.PatchTask")
	proto.RegisterType((*PatchTask_Request)(nil), "patch_manager.PatchTask.Request")
}

func init() { proto.RegisterFile("patch_task.proto", fileDescriptor_f658ba008455f669) }

var fileDescriptor_f658ba008455f669 = []byte{
	// 686 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xdf, 0x6e, 0x93, 0x50,
	0x1c, 0xc7, 0xb3, 0xd5, 0xb5, 0x72, 0xe6, 0x96, 0x0d, 0xff, 0x04, 0x77, 0x43, 0x43, 0xa6, 0x39,
	0xcc, 0x02, 0x85, 0xb6, 0x9b, 0xeb, 0xcd, 0x5c, 0x4d, 0x66, 0x96, 0x18, 0x63, 0xd0, 0x2b, 0xdb,
	0xce, 0x30, 0xa0, 0xac, 0x59, 0xbb, 0x83, 0x9c, 0x53, 0x17, 0x05, 0x9e, 0xc1, 0xc4, 0xa7, 0xf0,
	0xda, 0x37, 0xf0, 0x45, 0x6a, 0xe2, 0x23, 0xf0, 0x04, 0x86, 0x73, 0x58, 0xd7, 0xfd, 0x41, 0xbd,
	0x98, 0xbd, 0xea, 0x39, 0xbf, 0xdf, 0xe7, 0xcb, 0xef, 0x03, 0x34, 0x1c, 0xb0, 0xe2, 0x5b, 0xc4,
	0x3e, 0x7a, 0x4f, 0x2c, 0x7c, 0xac, 0xfa, 0x01, 0x22, 0x88, 0x5f, 0x62, 0x95, 0xa1, 0x75, 0x62,
	0x79, 0x6e, 0xb0, 0xa6, 0x78, 0x7d, 0x72, 0x34, 0x3a, 0x54, 0x6d, 0x34, 0xd4, 0x3c, 0xe4, 0x21,
	0x8d, 0x52, 0x87, 0xa3, 0x1e, 0xdd, 0xd1, 0x0d, 0x5d, 0xb1, 0xf4, 0xda, 0xe6, 0x14, 0x3e, 0x3c,
	0xed, 0x93, 0x63, 0x74, 0xaa, 0x79, 0x48, 0xa1, 0x4d, 0xe5, 0xa3, 0x35, 0xe8, 0x3b, 0x16, 0x41,
	0x01, 0xd6, 0x26, 0x4b, 0x96, 0x93, 0x92, 0x25, 0xc0, 0xbd, 0x4e, 0x07, 0xbf, 0xb5, 0xf0, 0x31,
	0xff, 0x0c, 0x14, 0x53, 0xa3, 0x7d, 0x47, 0x98, 0x2b, 0xcf, 0x41, 0xae, 0x05, 0x93, 0xb1, 0xb8,
	0xd4, 0x43, 0xc1, 0xb0, 0x29, 0xb1, 0xba, 0xf4, 0xeb, 0xa7, 0x78, 0x17, 0xac, 0x1e, 0xb4, 0xab,
	0xca, 0xb6, 0xa5, 0xf4, 0x76, 0x95, 0xbd, 0x6e, 0x68, 0xd4, 0xe3, 0x75, 0x33, 0xcb, 0xf1, 0xaf,
	0x40, 0x29, 0x70, 0x3f, 0x8c, 0x5c, 0x4c, 0x84, 0xf9, 0x72, 0x01, 0x2e, 0x1a, 0x65, 0xf5, 0xc2,
	0x7d, 0xa9, 0x93, 0x61, 0xaa, 0xc9, 0xb8, 0x16, 0x9f, 0x8c, 0xc5, 0x65, 0x36, 0x24, 0x8b, 0x4a,
	0xe6, 0xd9, 0x45, 0xf8, 0x0a, 0x28, 0xd9, 0x81, 0x9b, 0x0a, 0x0b, 0x05, 0xaa, 0x34, 0x45, 0x67,
	0x0d, 0xc9, 0x3c, 0x43, 0xf8, 0xc7, 0x60, 0xc1, 0x26, 0xfd, 0xa1, 0x2b, 0xdc, 0x2a, 0xcf, 0xc1,
	0x85, 0xd6, 0x4a, 0x32, 0x16, 0xef, 0x64, 0x6c, 0x5a, 0x96, 0x4c, 0xd6, 0x4e, 0x39, 0x97, 0x72,
	0x0b, 0x97, 0x39, 0x37, 0xe3, 0xe8, 0x2f, 0x2f, 0x83, 0x22, 0x26, 0x16, 0x19, 0x61, 0xa1, 0x48,
	0x87, 0xaf, 0x9e, 0x3f, 0x0f, 0x56, 0x97, 0xcc, 0x0c, 0xe0, 0x0d, 0xc0, 0x79, 0x01, 0x1a, 0xf9,
	0x6f, 0xfa, 0x9f, 0x5d, 0xa1, 0x44, 0x2f, 0x7b, 0x2f, 0x19, 0x8b, 0x2b, 0x8c, 0x9e, 0xb4, 0x24,
	0xf3, 0x1c, 0xe3, 0x77, 0xc1, 0xb2, 0x1f, 0x20, 0xdb, 0xc5, 0xd8, 0x75, 0x9e, 0xa3, 0xd1, 0x09,
	0x11, 0x6e, 0xd3, 0xe0, 0xc3, 0x64, 0x2c, 0xde, 0x67, 0xc1, 0x8b, 0x7d, 0xc9, 0xbc, 0x14, 0x58,
	0xfb, 0x0e, 0x40, 0x29, 0x7b, 0x90, 0xa9, 0xed, 0x11, 0xc2, 0x64, 0xf2, 0xf6, 0xa6, 0x6c, 0x59,
	0x5d, 0x32, 0x33, 0x80, 0xff, 0xc1, 0x65, 0xac, 0x2f, 0xcc, 0x53, 0xf6, 0x1b, 0x77, 0x09, 0xf6,
	0xd3, 0x57, 0xfd, 0x95, 0x03, 0x5f, 0xb8, 0x03, 0x08, 0x0d, 0xd8, 0x68, 0x57, 0x95, 0x46, 0x37,
	0xd4, 0xe3, 0xa8, 0x5d, 0x55, 0xea, 0xdd, 0x8e, 0x13, 0xea, 0xb1, 0x9c, 0xae, 0xf5, 0xee, 0x4e,
	0xba, 0xa9, 0x18, 0xb1, 0x0c, 0x3b, 0xea, 0x3f, 0x92, 0x72, 0x58, 0x8b, 0xe5, 0xa8, 0x83, 0x37,
	0x20, 0x84, 0xe9, 0x5f, 0x69, 0x57, 0xd9, 0xb3, 0x94, 0x5e, 0x37, 0xd4, 0x2b, 0xf5, 0xb8, 0x29,
	0x87, 0x5b, 0xf1, 0x95, 0x6a, 0xd4, 0x94, 0xe5, 0xe8, 0x5a, 0x78, 0x33, 0x86, 0xcd, 0x2b, 0x34,
	0x84, 0x06, 0xf3, 0x88, 0x8c, 0xcc, 0x22, 0xd2, 0x3b, 0x4e, 0xc7, 0x89, 0xda, 0xba, 0xb2, 0x9d,
	0x7a, 0x30, 0xd9, 0xbf, 0x30, 0x4c, 0x33, 0x77, 0x72, 0x23, 0x86, 0xf0, 0xea, 0x6c, 0x99, 0xdd,
	0x62, 0xd4, 0x9c, 0x89, 0x43, 0x3d, 0xd7, 0x21, 0x8d, 0x5d, 0xd7, 0xda, 0xb9, 0x49, 0xb1, 0x3f,
	0x98, 0xd5, 0x72, 0xcd, 0xea, 0x39, 0x66, 0x61, 0xb5, 0x62, 0xc4, 0x33, 0xb2, 0x33, 0x72, 0xed,
	0x1a, 0xf9, 0x76, 0xb5, 0x59, 0xd9, 0xe9, 0xb9, 0x76, 0x9b, 0xf9, 0x76, 0xf5, 0xff, 0x61, 0xd7,
	0xcc, 0x13, 0xd9, 0xca, 0x17, 0x69, 0xdc, 0xbc, 0x88, 0x0c, 0x1f, 0xa9, 0x4f, 0xe4, 0x9d, 0x0e,
	0xde, 0x58, 0xcf, 0xbe, 0x61, 0x3e, 0xff, 0x14, 0x2c, 0xd2, 0xa3, 0x65, 0xdf, 0x79, 0xd9, 0xc7,
	0x44, 0x28, 0x94, 0x0b, 0x90, 0x6b, 0x3d, 0x48, 0xc6, 0x22, 0x9f, 0x7d, 0x3a, 0xcf, 0x9b, 0x92,
	0x39, 0x8d, 0xb6, 0xf6, 0xdf, 0xbd, 0xf0, 0x90, 0xea, 0x5a, 0xf8, 0x13, 0xf2, 0xb1, 0x3a, 0x40,
	0xb6, 0x35, 0xd0, 0x6c, 0x74, 0x42, 0x02, 0xcb, 0x26, 0x98, 0x1d, 0xb4, 0x81, 0xeb, 0x23, 0x65,
	0x88, 0x1c, 0x77, 0x80, 0xb5, 0x0c, 0xd4, 0xe8, 0x56, 0xbb, 0x70, 0x9c, 0x1d, 0x16, 0x29, 0x5d,
	0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x15, 0x43, 0x12, 0xd0, 0x07, 0x00, 0x00,
}
