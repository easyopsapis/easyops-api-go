// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messsage_data.proto

package msgsender

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//消息的内容
type MessageData struct {
	//
	//通知的内容(正文)
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content" form:"content"`
	//
	//通知标题(邮件通知方式用)
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject" form:"subject"`
	//
	//抄送的邮箱地址
	CcAddr []string `protobuf:"bytes,3,rep,name=cc_addr,json=ccAddr,proto3" json:"cc_addr" form:"cc_addr"`
	//
	//抄送的用户列表(带:前缀则按实例ID处理)
	CcUser []string `protobuf:"bytes,4,rep,name=cc_user,json=ccUser,proto3" json:"cc_user" form:"cc_user"`
	//
	//抄送的用户组列表(带:前缀则按实例ID处理)
	CcGroup []string `protobuf:"bytes,5,rep,name=cc_group,json=ccGroup,proto3" json:"cc_group" form:"cc_group"`
	//
	//邮件发送者的名称
	FromName string `protobuf:"bytes,6,opt,name=from_name,json=fromName,proto3" json:"from_name" form:"from_name"`
	//
	//邮件发送者的邮箱地址
	FromAddr string `protobuf:"bytes,7,opt,name=from_addr,json=fromAddr,proto3" json:"from_addr" form:"from_addr"`
	//
	//邮件内容类型
	MsgType              string   `protobuf:"bytes,8,opt,name=msg_type,json=msgType,proto3" json:"msg_type" form:"msg_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageData) Reset()         { *m = MessageData{} }
func (m *MessageData) String() string { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()    {}
func (*MessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8835abb4c797bc44, []int{0}
}
func (m *MessageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageData.Unmarshal(m, b)
}
func (m *MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageData.Marshal(b, m, deterministic)
}
func (m *MessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageData.Merge(m, src)
}
func (m *MessageData) XXX_Size() int {
	return xxx_messageInfo_MessageData.Size(m)
}
func (m *MessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageData.DiscardUnknown(m)
}

var xxx_messageInfo_MessageData proto.InternalMessageInfo

func (m *MessageData) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *MessageData) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *MessageData) GetCcAddr() []string {
	if m != nil {
		return m.CcAddr
	}
	return nil
}

func (m *MessageData) GetCcUser() []string {
	if m != nil {
		return m.CcUser
	}
	return nil
}

func (m *MessageData) GetCcGroup() []string {
	if m != nil {
		return m.CcGroup
	}
	return nil
}

func (m *MessageData) GetFromName() string {
	if m != nil {
		return m.FromName
	}
	return ""
}

func (m *MessageData) GetFromAddr() string {
	if m != nil {
		return m.FromAddr
	}
	return ""
}

func (m *MessageData) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func init() {
	proto.RegisterType((*MessageData)(nil), "msgsender.MessageData")
}

func init() { proto.RegisterFile("messsage_data.proto", fileDescriptor_8835abb4c797bc44) }

var fileDescriptor_8835abb4c797bc44 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc7, 0x55, 0x5a, 0xf2, 0xb1, 0x48, 0x80, 0x5c, 0x0e, 0xab, 0x5e, 0x52, 0xad, 0x38, 0xa4,
	0x6a, 0xd7, 0xe6, 0x43, 0x42, 0x7c, 0x08, 0x89, 0x06, 0x10, 0x27, 0x38, 0x2c, 0xf4, 0x52, 0x52,
	0x56, 0x8e, 0x3d, 0x31, 0x81, 0x75, 0x66, 0x65, 0x7b, 0xa9, 0x02, 0xe2, 0x09, 0x78, 0xc7, 0x20,
	0xf1, 0x08, 0x79, 0x02, 0xb4, 0xb3, 0x49, 0x14, 0x22, 0x8e, 0xbd, 0xcd, 0xf8, 0xff, 0xfb, 0xef,
	0x7f, 0xc7, 0x9e, 0x68, 0xdf, 0x82, 0xf7, 0x5e, 0x1a, 0xc8, 0xb5, 0x0c, 0x92, 0x97, 0x0e, 0x03,
	0xb2, 0xae, 0xf5, 0xc6, 0xc3, 0x54, 0x83, 0x3b, 0x48, 0xcd, 0x24, 0x7c, 0xae, 0x46, 0x5c, 0xa1,
	0x15, 0x06, 0x0d, 0x0a, 0x22, 0x46, 0xd5, 0x98, 0x3a, 0x6a, 0xa8, 0x6a, 0x9c, 0x07, 0x8f, 0x36,
	0x70, 0x7b, 0x39, 0x09, 0x5f, 0xf1, 0x52, 0x18, 0x4c, 0x49, 0x4c, 0xbf, 0xc9, 0x62, 0xa2, 0x65,
	0x40, 0xe7, 0xc5, 0xba, 0x6c, 0x7c, 0xc9, 0xaf, 0xbd, 0xe8, 0xc6, 0x5b, 0xa0, 0x1f, 0x79, 0x25,
	0x83, 0x64, 0x27, 0x51, 0x5b, 0xe1, 0x34, 0xc0, 0x34, 0xc4, 0x3b, 0x87, 0x3b, 0xfd, 0xee, 0x80,
	0x2d, 0xe6, 0xbd, 0x9b, 0x63, 0x74, 0xf6, 0x69, 0xb2, 0x14, 0x92, 0x6c, 0x85, 0xd4, 0xb4, 0xaf,
	0x46, 0x5f, 0x40, 0x85, 0xf8, 0xda, 0x36, 0xbd, 0x14, 0x92, 0x6c, 0x85, 0xb0, 0x22, 0x6a, 0x2b,
	0x95, 0x4b, 0xad, 0x5d, 0xbc, 0x7b, 0xb8, 0xdb, 0xef, 0x0e, 0xde, 0x6f, 0x7c, 0xbb, 0x11, 0x92,
	0x3f, 0xbf, 0x7b, 0xcf, 0xa3, 0x67, 0x9f, 0xfa, 0x1f, 0x4f, 0xd3, 0x73, 0x99, 0x7e, 0xbf, 0x97,
	0x3e, 0xc9, 0x87, 0xe9, 0x90, 0x5f, 0x1c, 0x1d, 0x0f, 0x5f, 0xfc, 0xef, 0x90, 0xaf, 0x0e, 0x2f,
	0x7e, 0x3c, 0x38, 0x79, 0xfc, 0xf3, 0xe8, 0x6e, 0xd6, 0x52, 0xea, 0x54, 0x6b, 0xc7, 0x8e, 0x29,
	0xad, 0xf2, 0xe0, 0xe2, 0x3d, 0x4a, 0x63, 0xff, 0xa4, 0xd5, 0x42, 0x52, 0xc3, 0x67, 0x1e, 0x1c,
	0xe3, 0x51, 0x47, 0xa9, 0xdc, 0x38, 0xac, 0xca, 0xf8, 0x3a, 0xd1, 0xfb, 0x8b, 0x79, 0xef, 0xd6,
	0x9a, 0x26, 0xa5, 0x1e, 0x5c, 0xbd, 0xa9, 0x2b, 0x76, 0x3f, 0xea, 0x8e, 0x1d, 0xda, 0x7c, 0x2a,
	0x2d, 0xc4, 0x2d, 0x1a, 0xfd, 0xce, 0x62, 0xde, 0xbb, 0xdd, 0x18, 0xd6, 0x52, 0x92, 0x75, 0xea,
	0xfa, 0x9d, 0xb4, 0xc0, 0xdc, 0xd2, 0x42, 0xf3, 0xb7, 0xc9, 0x72, 0xb6, 0x65, 0xb9, 0xa2, 0x1b,
	0xa0, 0x4c, 0xba, 0x03, 0x1e, 0x75, 0xac, 0x37, 0x79, 0x98, 0x95, 0x10, 0x77, 0x28, 0x72, 0x63,
	0xac, 0x95, 0x92, 0x64, 0x6d, 0xeb, 0xcd, 0x87, 0x59, 0x09, 0x83, 0xd7, 0xe7, 0x2f, 0x0d, 0x72,
	0x90, 0x7e, 0x86, 0xa5, 0xe7, 0x05, 0x2a, 0x59, 0x88, 0xfa, 0xad, 0x9d, 0x54, 0xc1, 0x37, 0x1b,
	0xe8, 0xa0, 0xc4, 0xd4, 0xa2, 0x86, 0xc2, 0x8b, 0x25, 0x28, 0xa8, 0x15, 0xeb, 0xdd, 0x1d, 0xb5,
	0x88, 0x7c, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x02, 0x10, 0x58, 0xe4, 0x02, 0x00, 0x00,
}
