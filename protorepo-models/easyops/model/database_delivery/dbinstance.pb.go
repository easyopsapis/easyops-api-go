// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dbinstance.proto

package database_delivery

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//数据库实例
type DBInstance struct {
	//
	//数据库实例ID,自动生成
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId" form:"instanceId"`
	//
	//名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//数据库名/服务名
	DbName string `protobuf:"bytes,3,opt,name=dbName,proto3" json:"dbName" form:"dbName"`
	//
	//ip
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip" form:"ip"`
	//
	//端口
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port" form:"port"`
	//
	//连接串
	ConnURL string `protobuf:"bytes,6,opt,name=connURL,proto3" json:"connURL" form:"connURL"`
	//
	//默认用户
	UserName string `protobuf:"bytes,7,opt,name=userName,proto3" json:"userName" form:"userName"`
	//
	//默认密码
	Password string `protobuf:"bytes,8,opt,name=password,proto3" json:"password" form:"password"`
	//
	//是否有效
	IsValid              string   `protobuf:"bytes,9,opt,name=isValid,proto3" json:"isValid" form:"isValid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBInstance) Reset()         { *m = DBInstance{} }
func (m *DBInstance) String() string { return proto.CompactTextString(m) }
func (*DBInstance) ProtoMessage()    {}
func (*DBInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb1ce7688a241888, []int{0}
}
func (m *DBInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DBInstance.Unmarshal(m, b)
}
func (m *DBInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DBInstance.Marshal(b, m, deterministic)
}
func (m *DBInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBInstance.Merge(m, src)
}
func (m *DBInstance) XXX_Size() int {
	return xxx_messageInfo_DBInstance.Size(m)
}
func (m *DBInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_DBInstance.DiscardUnknown(m)
}

var xxx_messageInfo_DBInstance proto.InternalMessageInfo

func (m *DBInstance) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *DBInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DBInstance) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *DBInstance) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DBInstance) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DBInstance) GetConnURL() string {
	if m != nil {
		return m.ConnURL
	}
	return ""
}

func (m *DBInstance) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *DBInstance) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DBInstance) GetIsValid() string {
	if m != nil {
		return m.IsValid
	}
	return ""
}

func init() {
	proto.RegisterType((*DBInstance)(nil), "database_delivery.DBInstance")
}

func init() { proto.RegisterFile("dbinstance.proto", fileDescriptor_bb1ce7688a241888) }

var fileDescriptor_bb1ce7688a241888 = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0x95, 0x7e, 0xe9, 0xc5, 0xf3, 0x41, 0x2f, 0x66, 0x63, 0x75, 0xe3, 0xd6, 0x4d, 0xd1,
	0xb8, 0x64, 0xec, 0x38, 0xb7, 0xd2, 0x6c, 0x42, 0x23, 0x84, 0x54, 0x71, 0x59, 0x58, 0xc0, 0xa2,
	0xb9, 0xa0, 0x49, 0xec, 0x06, 0x8b, 0x24, 0x63, 0x79, 0xdc, 0x56, 0xad, 0x6d, 0xa9, 0x6f, 0x80,
	0xc4, 0x33, 0xf0, 0x0a, 0xbc, 0x4e, 0x90, 0x78, 0x84, 0x2c, 0xd9, 0x80, 0x66, 0xec, 0xb4, 0x15,
	0xa9, 0x81, 0x45, 0xa9, 0x57, 0x33, 0xf3, 0xff, 0x9d, 0xe3, 0xdf, 0x6c, 0xce, 0x80, 0x55, 0xab,
	0xeb, 0x8c, 0xa8, 0x8f, 0x47, 0x3d, 0x5b, 0x73, 0x3d, 0xe2, 0x13, 0x71, 0xcd, 0xc2, 0x3e, 0xee,
	0x62, 0x6a, 0xbf, 0xb3, 0xec, 0x81, 0x73, 0x62, 0x7b, 0x67, 0xeb, 0xa8, 0xef, 0xf8, 0xef, 0x8f,
	0xbb, 0x5a, 0x8f, 0x0c, 0xf5, 0x3e, 0xe9, 0x13, 0x9d, 0x93, 0xdd, 0xe3, 0x23, 0xbe, 0xe3, 0x1b,
	0xbe, 0x8a, 0x3b, 0xac, 0x57, 0xaf, 0xe1, 0xc3, 0x53, 0xc7, 0xff, 0x40, 0x4e, 0xf5, 0x3e, 0x41,
	0x3c, 0x44, 0x27, 0x78, 0xe0, 0x58, 0xd8, 0x27, 0x1e, 0xd5, 0x2f, 0x97, 0x71, 0x9d, 0xf2, 0xfd,
	0x1e, 0x00, 0x4f, 0x1b, 0x07, 0x89, 0x8e, 0x78, 0x00, 0xc0, 0x54, 0xed, 0xc0, 0x92, 0x32, 0x1b,
	0x19, 0x28, 0x34, 0xd4, 0xc9, 0x58, 0x5e, 0x3b, 0x22, 0xde, 0xb0, 0xa6, 0x5c, 0x65, 0xca, 0xb7,
	0xaf, 0xf2, 0x2a, 0x58, 0xee, 0x34, 0x0b, 0x68, 0x0f, 0xa3, 0xf3, 0x76, 0x60, 0x94, 0xa2, 0x9c,
	0x79, 0xad, 0x58, 0xdc, 0x02, 0xd9, 0x11, 0x1e, 0xda, 0xd2, 0x1c, 0x6f, 0xb2, 0x32, 0x19, 0xcb,
	0xff, 0xc7, 0x4d, 0xd8, 0xa9, 0x62, 0xf2, 0x50, 0x54, 0xc1, 0x82, 0xd5, 0x7d, 0xc5, 0xb0, 0xff,
	0x38, 0xb6, 0x36, 0x19, 0xcb, 0xf7, 0x63, 0x2c, 0x3e, 0x57, 0xcc, 0x04, 0x10, 0xbf, 0x08, 0x60,
	0xce, 0x71, 0xa5, 0x2c, 0xe7, 0x3e, 0x0b, 0x93, 0xb1, 0x2c, 0x24, 0x52, 0x2e, 0x93, 0xf9, 0x24,
	0x80, 0x8f, 0x42, 0x07, 0xc2, 0x22, 0xac, 0x34, 0x0b, 0xa8, 0xd2, 0x0e, 0x8c, 0x28, 0x6c, 0x16,
	0x50, 0xb9, 0xdd, 0xb2, 0x02, 0x23, 0x52, 0xd9, 0xda, 0x68, 0xd7, 0xd9, 0x26, 0x5f, 0x8c, 0x54,
	0xd8, 0xd2, 0xfe, 0x92, 0x54, 0x83, 0x52, 0xa4, 0x86, 0x2d, 0xba, 0x03, 0x21, 0x64, 0x97, 0xdd,
	0x47, 0xcf, 0x30, 0x3a, 0x6a, 0x07, 0x46, 0xbe, 0x1c, 0xd5, 0xd4, 0x60, 0x37, 0x9a, 0x39, 0x0d,
	0x6b, 0xaa, 0x1a, 0xde, 0x08, 0x57, 0x23, 0x58, 0x9b, 0xa1, 0x21, 0x2c, 0xc6, 0x1e, 0x61, 0x31,
	0xb1, 0x08, 0x8d, 0x96, 0xd5, 0xb2, 0xc2, 0xa6, 0x81, 0xf6, 0x98, 0x47, 0x2c, 0xfb, 0x07, 0x26,
	0xd6, 0x4c, 0xfd, 0x73, 0x25, 0x82, 0x70, 0xf6, 0xdf, 0x6a, 0x7c, 0xc5, 0xb0, 0x76, 0x27, 0x0e,
	0xe5, 0x54, 0x07, 0x56, 0x76, 0x53, 0x54, 0xbf, 0x4d, 0xb1, 0xdf, 0x98, 0x95, 0x52, 0xcd, 0xca,
	0x29, 0x66, 0x41, 0x21, 0x5f, 0x8c, 0xee, 0xc8, 0xae, 0x98, 0x6a, 0x57, 0x49, 0xb7, 0x2b, 0xdd,
	0x95, 0x9d, 0x91, 0x6a, 0x57, 0x4d, 0xb7, 0x2b, 0xff, 0x0b, 0xbb, 0x5a, 0x9a, 0xc8, 0x6e, 0xba,
	0x48, 0xe5, 0xf6, 0x45, 0x54, 0xb8, 0xad, 0x3d, 0x52, 0xeb, 0x2d, 0xba, 0x93, 0x33, 0xe7, 0x1c,
	0x57, 0xac, 0x82, 0xac, 0x4b, 0x3c, 0x5f, 0x9a, 0xdf, 0xc8, 0xc0, 0xf9, 0x86, 0x72, 0x35, 0x07,
	0xd9, 0x29, 0x9b, 0x5c, 0x2b, 0xab, 0x3f, 0xa6, 0x5f, 0x46, 0xba, 0xb8, 0xc8, 0x9a, 0x9c, 0x17,
	0xf3, 0x60, 0xb1, 0x47, 0x46, 0xa3, 0x37, 0xe6, 0x0b, 0x69, 0x81, 0xcf, 0x3c, 0x71, 0x32, 0x96,
	0x97, 0xe3, 0xd2, 0x24, 0x50, 0xcc, 0x29, 0x22, 0xea, 0x60, 0xe9, 0x98, 0xda, 0x1e, 0x1f, 0xa5,
	0x8b, 0x1c, 0x7f, 0x30, 0x19, 0xcb, 0x2b, 0x31, 0x3e, 0x4d, 0x14, 0xf3, 0x12, 0x12, 0x5f, 0x83,
	0x25, 0x17, 0x53, 0x7a, 0x4a, 0x3c, 0x4b, 0x5a, 0xe2, 0x05, 0x8f, 0xaf, 0x0a, 0xa6, 0x09, 0xd3,
	0xdb, 0x04, 0x72, 0x07, 0x36, 0x31, 0x3a, 0xdf, 0x47, 0x87, 0x05, 0xb4, 0xb7, 0xf9, 0x64, 0x2b,
	0xb7, 0xdd, 0x79, 0xa8, 0xd5, 0xf5, 0xb6, 0x1a, 0x54, 0xf3, 0x95, 0x42, 0x94, 0x33, 0x2f, 0x3b,
	0x31, 0x69, 0x87, 0xbe, 0x65, 0x6f, 0x8c, 0x24, 0xfc, 0x2a, 0x9d, 0x04, 0x8a, 0x39, 0x45, 0x1a,
	0x2f, 0x0f, 0x9f, 0xf7, 0x89, 0x66, 0x63, 0x7a, 0x46, 0x5c, 0xaa, 0x0d, 0x48, 0x0f, 0x0f, 0xf4,
	0x1e, 0x19, 0xf9, 0x1e, 0xee, 0xf9, 0x34, 0x7e, 0xf0, 0x3c, 0xdb, 0x25, 0x68, 0x48, 0x2c, 0x7b,
	0x40, 0xf5, 0x04, 0xd4, 0xf9, 0x56, 0x9f, 0x79, 0x32, 0xbb, 0x0b, 0xbc, 0xa2, 0xf4, 0x33, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0xb2, 0xb3, 0x48, 0x60, 0x07, 0x00, 0x00,
}
