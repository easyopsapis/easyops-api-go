// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: subscriber.proto

package notify

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
//订阅者
type Subscriber struct {
	//
	//订阅名称，为数据库主键
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name"`
	//
	//订阅负责人。如 linus
	Admin string `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin" form:"admin"`
	//
	//回调url
	Callback string `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback" form:"callback"`
	//
	//回调名字服务名。字段非空时，callback的域名在执行时会替换成 ensName 对应的 ip 端口，这种情况目前未传 HOST Header
	EnsName string `protobuf:"bytes,4,opt,name=ensName,proto3" json:"ensName" form:"ensName"`
	//
	//订阅者的进程数，默认1
	ProcNum int32 `protobuf:"varint,5,opt,name=procNum,proto3" json:"procNum" form:"procNum"`
	//
	//消息类型，1为单条消息，2为批量接收
	MsgType int32 `protobuf:"varint,6,opt,name=msgType,proto3" json:"msgType" form:"msgType"`
	//
	//retry 为 0 时调用 callback 出错不会重试，否则会无限重试。
	Retry int32 `protobuf:"varint,7,opt,name=retry,proto3" json:"retry" form:"retry"`
	//
	//订阅信息
	SubscribeInfo        []*SubscribeInfo `protobuf:"bytes,8,rep,name=subscribeInfo,proto3" json:"subscribeInfo" form:"subscribeInfo"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Subscriber) Reset()         { *m = Subscriber{} }
func (m *Subscriber) String() string { return proto.CompactTextString(m) }
func (*Subscriber) ProtoMessage()    {}
func (*Subscriber) Descriptor() ([]byte, []int) {
	return fileDescriptor_a004d881b890f1e0, []int{0}
}
func (m *Subscriber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscriber.Unmarshal(m, b)
}
func (m *Subscriber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscriber.Marshal(b, m, deterministic)
}
func (m *Subscriber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscriber.Merge(m, src)
}
func (m *Subscriber) XXX_Size() int {
	return xxx_messageInfo_Subscriber.Size(m)
}
func (m *Subscriber) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscriber.DiscardUnknown(m)
}

var xxx_messageInfo_Subscriber proto.InternalMessageInfo

func (m *Subscriber) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subscriber) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *Subscriber) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *Subscriber) GetEnsName() string {
	if m != nil {
		return m.EnsName
	}
	return ""
}

func (m *Subscriber) GetProcNum() int32 {
	if m != nil {
		return m.ProcNum
	}
	return 0
}

func (m *Subscriber) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *Subscriber) GetRetry() int32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *Subscriber) GetSubscribeInfo() []*SubscribeInfo {
	if m != nil {
		return m.SubscribeInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Subscriber)(nil), "notify.Subscriber")
}

func init() { proto.RegisterFile("subscriber.proto", fileDescriptor_a004d881b890f1e0) }

var fileDescriptor_a004d881b890f1e0 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x55, 0xba, 0x76, 0x23, 0x03, 0x36, 0x45, 0x20, 0x45, 0xbb, 0xa4, 0x72, 0x61, 0xca,
	0xd8, 0x6c, 0xa3, 0x22, 0x2a, 0x51, 0x69, 0xea, 0xe8, 0x8d, 0xcb, 0x0e, 0x19, 0xbb, 0x6c, 0x29,
	0x95, 0x93, 0x26, 0x59, 0xb4, 0x24, 0x8e, 0x6c, 0x77, 0x51, 0x87, 0xd6, 0x87, 0xe0, 0x01, 0x83,
	0xc4, 0x23, 0xe4, 0xc2, 0x15, 0xc5, 0x6e, 0xa2, 0x96, 0x2b, 0x37, 0x7f, 0xfe, 0xfd, 0xbe, 0x2f,
	0x7f, 0x3b, 0xd6, 0x0e, 0xf9, 0xc2, 0xe5, 0x1e, 0x8b, 0x5c, 0x9f, 0xa1, 0x8c, 0x51, 0x41, 0xf5,
	0x6e, 0x4a, 0x45, 0x14, 0x2c, 0x8f, 0x60, 0x18, 0x89, 0xbb, 0x85, 0x8b, 0x3c, 0x9a, 0xe0, 0x90,
	0x86, 0x14, 0x4b, 0xec, 0x2e, 0x02, 0x59, 0xc9, 0x42, 0xae, 0x54, 0xdb, 0xd1, 0x75, 0x48, 0x91,
	0x4f, 0xf8, 0x92, 0x66, 0x1c, 0xc5, 0xd4, 0x23, 0x31, 0xf6, 0x68, 0x2a, 0x18, 0xf1, 0x04, 0x57,
	0x9d, 0xcc, 0xcf, 0x28, 0x4c, 0xe8, 0xdc, 0x8f, 0x39, 0x5e, 0x8b, 0x58, 0x96, 0x58, 0x7d, 0x10,
	0x37, 0x49, 0x66, 0x51, 0x1a, 0xd4, 0x63, 0x87, 0x1b, 0x29, 0x92, 0x3c, 0x12, 0xf7, 0x34, 0xc7,
	0x21, 0x85, 0x12, 0xc2, 0x07, 0x12, 0x47, 0x73, 0x22, 0x28, 0xe3, 0xb8, 0x59, 0xaa, 0x3e, 0xf0,
	0xa7, 0xad, 0x69, 0x57, 0xcd, 0xd1, 0xf4, 0xbe, 0xb6, 0x93, 0x92, 0xc4, 0x37, 0x5a, 0xbd, 0x96,
	0xf5, 0x7c, 0x72, 0x50, 0x16, 0xe6, 0x7e, 0x40, 0x59, 0x32, 0x02, 0xd5, 0x2e, 0xb0, 0x25, 0xd4,
	0x8f, 0xb5, 0x0e, 0x99, 0x27, 0x51, 0x6a, 0x3c, 0x93, 0xd6, 0x61, 0x59, 0x98, 0x2f, 0x94, 0x25,
	0xb7, 0x81, 0xad, 0xb0, 0xfe, 0xb3, 0xa5, 0xed, 0x79, 0x24, 0x8e, 0x5d, 0xe2, 0xdd, 0x1b, 0x6d,
	0xe9, 0x3e, 0x94, 0x85, 0x79, 0xa0, 0xdc, 0x9a, 0x80, 0xdf, 0xbf, 0xcc, 0x99, 0x36, 0xfd, 0x7e,
	0x27, 0x44, 0xc6, 0xc7, 0x23, 0x07, 0x3b, 0xd8, 0xca, 0xf3, 0xdc, 0x41, 0x27, 0xe3, 0x5b, 0x48,
	0xe0, 0xe3, 0x17, 0x78, 0xf3, 0x01, 0x7e, 0xbe, 0x18, 0xbd, 0x43, 0x33, 0xe7, 0x74, 0xd5, 0x3f,
	0x9f, 0xfe, 0x18, 0x9c, 0x0d, 0x3e, 0x0d, 0x9f, 0x1c, 0x74, 0x4b, 0xe0, 0x63, 0x55, 0x0d, 0x9f,
	0x1c, 0xd7, 0xda, 0x76, 0x67, 0xce, 0x29, 0x5a, 0xf5, 0xc7, 0xc7, 0x18, 0x9f, 0x4f, 0xdf, 0x9f,
	0xbc, 0xb5, 0x9b, 0x1c, 0xfa, 0x99, 0xb6, 0xeb, 0xa7, 0xfc, 0xb2, 0x3a, 0xe4, 0x8e, 0x8c, 0xa4,
	0x97, 0x85, 0xf9, 0x4a, 0x45, 0x5a, 0x03, 0x60, 0xd7, 0x4a, 0x65, 0x67, 0x8c, 0x7a, 0x97, 0x8b,
	0xc4, 0xe8, 0xf4, 0x5a, 0x56, 0x67, 0xd3, 0x5e, 0x03, 0x60, 0xd7, 0x4a, 0x65, 0x27, 0x3c, 0xfc,
	0xb6, 0xcc, 0x7c, 0xa3, 0xfb, 0xaf, 0xbd, 0x06, 0xc0, 0xae, 0x95, 0xea, 0x1a, 0x99, 0x2f, 0xd8,
	0xd2, 0xd8, 0x95, 0xee, 0xc6, 0x35, 0xca, 0x6d, 0x60, 0x2b, 0xac, 0x5f, 0x6b, 0x2f, 0x9b, 0x5f,
	0xfe, 0x35, 0x0d, 0xa8, 0xb1, 0xd7, 0x6b, 0x5b, 0xfb, 0x83, 0x37, 0x48, 0xbd, 0x07, 0x74, 0xb5,
	0x09, 0x27, 0x46, 0x59, 0x98, 0xaf, 0xd5, 0x98, 0xad, 0x2e, 0x60, 0x6f, 0x4f, 0x99, 0x4c, 0x6e,
	0x2e, 0xfe, 0xf7, 0x29, 0xba, 0x5d, 0xa9, 0x7d, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x24,
	0xb0, 0x19, 0x1e, 0x03, 0x00, 0x00,
}
