// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: execute_tool.proto

package execute

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/tool"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_ExecuteToolRequest_Name = regexp.MustCompile(`^[a-zA-Z0-9][.a-zA-Z0-9_-]{2,31}$`)
var _regex_ExecuteToolRequest_ToolId = regexp.MustCompile(`^[a-fA-F0-9]{32}$`)
var _regex_ExecuteToolRequest_VId = regexp.MustCompile(`^[a-fA-F0-9]{32}$`)
var _regex_ExecuteToolRequest_ExecUser = regexp.MustCompile(`^[a-zA-Z0-9][.a-zA-Z0-9_-]{2,31}$`)
var _regex_ExecuteToolRequest_AnsibleNodeExecUser = regexp.MustCompile(`^[a-zA-Z0-9][.a-zA-Z0-9_-]{2,31}$`)

func (this *ExecuteToolRequest) Validate() error {
	if this.Inputs != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Inputs); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Inputs", err)
		}
	}
	if this.Callback != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Callback); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Callback", err)
		}
	}
	if !_regex_ExecuteToolRequest_Name.MatchString(this.Name) {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9][.a-zA-Z0-9_-]{2,31}$"`, this.Name))
	}
	if this.Metadata != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Metadata); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Metadata", err)
		}
	}
	if !_regex_ExecuteToolRequest_ToolId.MatchString(this.ToolId) {
		return github_com_mwitkow_go_proto_validators.FieldError("ToolId", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-fA-F0-9]{32}$"`, this.ToolId))
	}
	if !_regex_ExecuteToolRequest_VId.MatchString(this.VId) {
		return github_com_mwitkow_go_proto_validators.FieldError("VId", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-fA-F0-9]{32}$"`, this.VId))
	}
	if !_regex_ExecuteToolRequest_ExecUser.MatchString(this.ExecUser) {
		return github_com_mwitkow_go_proto_validators.FieldError("ExecUser", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9][.a-zA-Z0-9_-]{2,31}$"`, this.ExecUser))
	}
	if this.Log != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Log); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Log", err)
		}
	}
	if !_regex_ExecuteToolRequest_AnsibleNodeExecUser.MatchString(this.AnsibleNodeExecUser) {
		return github_com_mwitkow_go_proto_validators.FieldError("AnsibleNodeExecUser", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9][.a-zA-Z0-9_-]{2,31}$"`, this.AnsibleNodeExecUser))
	}
	return nil
}

var _regex_ExecuteToolRequest_Metadata_Origin = regexp.MustCompile(`(\b(https?|ftp|file)://)?[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`)

func (this *ExecuteToolRequest_Metadata) Validate() error {
	if !_regex_ExecuteToolRequest_Metadata_Origin.MatchString(this.Origin) {
		return github_com_mwitkow_go_proto_validators.FieldError("Origin", fmt.Errorf(`value '%v' must be a string conforming to regex "(\\b(https?|ftp|file)://)?[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]"`, this.Origin))
	}
	return nil
}
func (this *ExecuteToolRequest_Log) Validate() error {
	return nil
}
func (this *ExecuteToolResponse) Validate() error {
	return nil
}
func (this *ExecuteToolResponseWrapper) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
