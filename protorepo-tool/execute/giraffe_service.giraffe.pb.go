// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package execute

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	tool "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/tool"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for execute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	ExecuteDebugTool(ctx context.Context, in *ExecuteDebugToolRequest) (*ExecuteDebugToolResponse, error)
	ExecuteTool(ctx context.Context, in *ExecuteToolRequest) (*ExecuteToolResponse, error)
	GetExecuteResult(ctx context.Context, in *GetExecuteResultRequest) (*tool.ToolTask, error)
	ListToolExecutionLogs(ctx context.Context, in *ListToolExecutionLogsRequest) (*ListToolExecutionLogsResponse, error)
	GetToolExecutionTableResult(ctx context.Context, in *GetToolExecutionTableResultRequest) (*GetToolExecutionTableResultResponse, error)
	ListToolExecutionResult(ctx context.Context, in *ListToolExecutionResultRequest) (*ListToolExecutionResultResponse, error)
	TerminateTask(ctx context.Context, in *TerminateTaskRequest) (*tool.ToolTask, error)
	ToolDebugSnapshot(ctx context.Context, in *ToolDebugSnapshotRequest) (*tool.ExecutionSnapshot, error)
	ToolExecutionSnapshot(ctx context.Context, in *ToolExecutionSnapshotRequest) (*tool.ExecutionSnapshot, error)
	ToolExecutionCallback(ctx context.Context, in *ToolExecutionCallbackRequest) (*ToolExecutionCallbackResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) ExecuteDebugTool(ctx context.Context, in *ExecuteDebugToolRequest) (*ExecuteDebugToolResponse, error) {
	out := new(ExecuteDebugToolResponse)
	err := c.c.Invoke(ctx, _ExecuteDebugToolMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ExecuteTool(ctx context.Context, in *ExecuteToolRequest) (*ExecuteToolResponse, error) {
	out := new(ExecuteToolResponse)
	err := c.c.Invoke(ctx, _ExecuteToolMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetExecuteResult(ctx context.Context, in *GetExecuteResultRequest) (*tool.ToolTask, error) {
	out := new(tool.ToolTask)
	err := c.c.Invoke(ctx, _GetExecuteResultMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListToolExecutionLogs(ctx context.Context, in *ListToolExecutionLogsRequest) (*ListToolExecutionLogsResponse, error) {
	out := new(ListToolExecutionLogsResponse)
	err := c.c.Invoke(ctx, _ListToolExecutionLogsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetToolExecutionTableResult(ctx context.Context, in *GetToolExecutionTableResultRequest) (*GetToolExecutionTableResultResponse, error) {
	out := new(GetToolExecutionTableResultResponse)
	err := c.c.Invoke(ctx, _GetToolExecutionTableResultMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListToolExecutionResult(ctx context.Context, in *ListToolExecutionResultRequest) (*ListToolExecutionResultResponse, error) {
	out := new(ListToolExecutionResultResponse)
	err := c.c.Invoke(ctx, _ListToolExecutionResultMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) TerminateTask(ctx context.Context, in *TerminateTaskRequest) (*tool.ToolTask, error) {
	out := new(tool.ToolTask)
	err := c.c.Invoke(ctx, _TerminateTaskMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ToolDebugSnapshot(ctx context.Context, in *ToolDebugSnapshotRequest) (*tool.ExecutionSnapshot, error) {
	out := new(tool.ExecutionSnapshot)
	err := c.c.Invoke(ctx, _ToolDebugSnapshotMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ToolExecutionSnapshot(ctx context.Context, in *ToolExecutionSnapshotRequest) (*tool.ExecutionSnapshot, error) {
	out := new(tool.ExecutionSnapshot)
	err := c.c.Invoke(ctx, _ToolExecutionSnapshotMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ToolExecutionCallback(ctx context.Context, in *ToolExecutionCallbackRequest) (*ToolExecutionCallbackResponse, error) {
	out := new(ToolExecutionCallbackResponse)
	err := c.c.Invoke(ctx, _ToolExecutionCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for execute service.
type Service interface {
	ExecuteDebugTool(context.Context, *ExecuteDebugToolRequest) (*ExecuteDebugToolResponse, error)
	ExecuteTool(context.Context, *ExecuteToolRequest) (*ExecuteToolResponse, error)
	GetExecuteResult(context.Context, *GetExecuteResultRequest) (*tool.ToolTask, error)
	ListToolExecutionLogs(context.Context, *ListToolExecutionLogsRequest) (*ListToolExecutionLogsResponse, error)
	GetToolExecutionTableResult(context.Context, *GetToolExecutionTableResultRequest) (*GetToolExecutionTableResultResponse, error)
	ListToolExecutionResult(context.Context, *ListToolExecutionResultRequest) (*ListToolExecutionResultResponse, error)
	TerminateTask(context.Context, *TerminateTaskRequest) (*tool.ToolTask, error)
	ToolDebugSnapshot(context.Context, *ToolDebugSnapshotRequest) (*tool.ExecutionSnapshot, error)
	ToolExecutionSnapshot(context.Context, *ToolExecutionSnapshotRequest) (*tool.ExecutionSnapshot, error)
	ToolExecutionCallback(context.Context, *ToolExecutionCallbackRequest) (*ToolExecutionCallbackResponse, error)
}

func _ExecuteDebugToolEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ExecuteDebugTool(ctx, req.(*ExecuteDebugToolRequest))
	}
}

func _ExecuteToolEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ExecuteTool(ctx, req.(*ExecuteToolRequest))
	}
}

func _GetExecuteResultEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetExecuteResult(ctx, req.(*GetExecuteResultRequest))
	}
}

func _ListToolExecutionLogsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListToolExecutionLogs(ctx, req.(*ListToolExecutionLogsRequest))
	}
}

func _GetToolExecutionTableResultEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetToolExecutionTableResult(ctx, req.(*GetToolExecutionTableResultRequest))
	}
}

func _ListToolExecutionResultEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListToolExecutionResult(ctx, req.(*ListToolExecutionResultRequest))
	}
}

func _TerminateTaskEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.TerminateTask(ctx, req.(*TerminateTaskRequest))
	}
}

func _ToolDebugSnapshotEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ToolDebugSnapshot(ctx, req.(*ToolDebugSnapshotRequest))
	}
}

func _ToolExecutionSnapshotEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ToolExecutionSnapshot(ctx, req.(*ToolExecutionSnapshotRequest))
	}
}

func _ToolExecutionCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ToolExecutionCallback(ctx, req.(*ToolExecutionCallbackRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_ExecuteDebugToolMethodDesc, _ExecuteDebugToolEndpoint(srv))
	s.RegisterUnaryEndpoint(_ExecuteToolMethodDesc, _ExecuteToolEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetExecuteResultMethodDesc, _GetExecuteResultEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListToolExecutionLogsMethodDesc, _ListToolExecutionLogsEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetToolExecutionTableResultMethodDesc, _GetToolExecutionTableResultEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListToolExecutionResultMethodDesc, _ListToolExecutionResultEndpoint(srv))
	s.RegisterUnaryEndpoint(_TerminateTaskMethodDesc, _TerminateTaskEndpoint(srv))
	s.RegisterUnaryEndpoint(_ToolDebugSnapshotMethodDesc, _ToolDebugSnapshotEndpoint(srv))
	s.RegisterUnaryEndpoint(_ToolExecutionSnapshotMethodDesc, _ToolExecutionSnapshotEndpoint(srv))
	s.RegisterUnaryEndpoint(_ToolExecutionCallbackMethodDesc, _ToolExecutionCallbackEndpoint(srv))
}

// Method Description
var _ExecuteDebugToolMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.ExecuteDebugTool",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "ExecuteDebugTool",
	RequestType:  (*ExecuteDebugToolRequest)(nil),
	ResponseType: (*ExecuteDebugToolResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/tools/debug",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ExecuteToolMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.ExecuteTool",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "ExecuteTool",
	RequestType:  (*ExecuteToolRequest)(nil),
	ResponseType: (*ExecuteToolResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/tools/execution",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetExecuteResultMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.GetExecuteResult",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "GetExecuteResult",
	RequestType:  (*GetExecuteResultRequest)(nil),
	ResponseType: (*tool.ToolTask)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/tools/execution/:execId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListToolExecutionLogsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.ListToolExecutionLogs",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "ListToolExecutionLogs",
	RequestType:  (*ListToolExecutionLogsRequest)(nil),
	ResponseType: (*ListToolExecutionLogsResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/tools/execution/logs/:execIds",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _GetToolExecutionTableResultMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.GetToolExecutionTableResult",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "GetToolExecutionTableResult",
	RequestType:  (*GetToolExecutionTableResultRequest)(nil),
	ResponseType: (*GetToolExecutionTableResultResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/tools/execution/:execId/table",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListToolExecutionResultMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.ListToolExecutionResult",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "ListToolExecutionResult",
	RequestType:  (*ListToolExecutionResultRequest)(nil),
	ResponseType: (*ListToolExecutionResultResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/tools/result/list",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _TerminateTaskMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.TerminateTask",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "TerminateTask",
	RequestType:  (*TerminateTaskRequest)(nil),
	ResponseType: (*tool.ToolTask)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/tool/terminate/:taskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ToolDebugSnapshotMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.ToolDebugSnapshot",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "ToolDebugSnapshot",
	RequestType:  (*ToolDebugSnapshotRequest)(nil),
	ResponseType: (*tool.ExecutionSnapshot)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/tools/debug/snapshot",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ToolExecutionSnapshotMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.ToolExecutionSnapshot",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "ToolExecutionSnapshot",
	RequestType:  (*ToolExecutionSnapshotRequest)(nil),
	ResponseType: (*tool.ExecutionSnapshot)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/tools/execution/snapshot",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ToolExecutionCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.tool.execute.ToolExecutionCallback",
		Version: "1.0",
	},
	ServiceName:  "execute.rpc",
	MethodName:   "ToolExecutionCallback",
	RequestType:  (*ToolExecutionCallbackRequest)(nil),
	ResponseType: (*ToolExecutionCallbackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/tools/execution/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
