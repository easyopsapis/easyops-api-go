// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package build

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	pipeline "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/pipeline"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for build service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	AppendProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	Approval(ctx context.Context, in *ApprovalRequest) (*types.Empty, error)
	Cancel(ctx context.Context, in *CancelRequest) (*types.Empty, error)
	Create(ctx context.Context, in *CreateRequest) (*pipeline.Build, error)
	CreateProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	CreateStageStatus(ctx context.Context, in *CreateStageStatusRequest) (*pipeline.StageStatus, error)
	Get(ctx context.Context, in *GetRequest) (*GetResponse, error)
	GetProgressLog(ctx context.Context, in *GetProgressLogRequest) (*pipeline.ProgressLog, error)
	List(ctx context.Context, in *ListRequest) (*ListResponse, error)
	RecordEvents(ctx context.Context, in *RecordEventsRequest) (*pipeline.Build, error)
	Retry(ctx context.Context, in *RetryRequest) (*RetryResponse, error)
	UpdateArtifact(ctx context.Context, in *UpdateArtifactRequest) (*UpdateArtifactResponse, error)
	UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest) (*pipeline.Build, error)
	UpdateProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	UpdateStageStatus(ctx context.Context, in *pipeline.StageStatus) (*pipeline.StageStatus, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) AppendProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error) {
	out := new(pipeline.ProgressLog)
	err := c.c.Invoke(ctx, _AppendProgressLogMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Approval(ctx context.Context, in *ApprovalRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _ApprovalMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Cancel(ctx context.Context, in *CancelRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _CancelMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Create(ctx context.Context, in *CreateRequest) (*pipeline.Build, error) {
	out := new(pipeline.Build)
	err := c.c.Invoke(ctx, _CreateMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error) {
	out := new(pipeline.ProgressLog)
	err := c.c.Invoke(ctx, _CreateProgressLogMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateStageStatus(ctx context.Context, in *CreateStageStatusRequest) (*pipeline.StageStatus, error) {
	out := new(pipeline.StageStatus)
	err := c.c.Invoke(ctx, _CreateStageStatusMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Get(ctx context.Context, in *GetRequest) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.c.Invoke(ctx, _GetMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetProgressLog(ctx context.Context, in *GetProgressLogRequest) (*pipeline.ProgressLog, error) {
	out := new(pipeline.ProgressLog)
	err := c.c.Invoke(ctx, _GetProgressLogMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) List(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.c.Invoke(ctx, _ListMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RecordEvents(ctx context.Context, in *RecordEventsRequest) (*pipeline.Build, error) {
	out := new(pipeline.Build)
	err := c.c.Invoke(ctx, _RecordEventsMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Retry(ctx context.Context, in *RetryRequest) (*RetryResponse, error) {
	out := new(RetryResponse)
	err := c.c.Invoke(ctx, _RetryMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateArtifact(ctx context.Context, in *UpdateArtifactRequest) (*UpdateArtifactResponse, error) {
	out := new(UpdateArtifactResponse)
	err := c.c.Invoke(ctx, _UpdateArtifactMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest) (*pipeline.Build, error) {
	out := new(pipeline.Build)
	err := c.c.Invoke(ctx, _UpdateBuildStatusMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error) {
	out := new(pipeline.ProgressLog)
	err := c.c.Invoke(ctx, _UpdateProgressLogMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateStageStatus(ctx context.Context, in *pipeline.StageStatus) (*pipeline.StageStatus, error) {
	out := new(pipeline.StageStatus)
	err := c.c.Invoke(ctx, _UpdateStageStatusMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for build service.
type Service interface {
	AppendProgressLog(context.Context, *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	Approval(context.Context, *ApprovalRequest) (*types.Empty, error)
	Cancel(context.Context, *CancelRequest) (*types.Empty, error)
	Create(context.Context, *CreateRequest) (*pipeline.Build, error)
	CreateProgressLog(context.Context, *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	CreateStageStatus(context.Context, *CreateStageStatusRequest) (*pipeline.StageStatus, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetProgressLog(context.Context, *GetProgressLogRequest) (*pipeline.ProgressLog, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	RecordEvents(context.Context, *RecordEventsRequest) (*pipeline.Build, error)
	Retry(context.Context, *RetryRequest) (*RetryResponse, error)
	UpdateArtifact(context.Context, *UpdateArtifactRequest) (*UpdateArtifactResponse, error)
	UpdateBuildStatus(context.Context, *UpdateBuildStatusRequest) (*pipeline.Build, error)
	UpdateProgressLog(context.Context, *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	UpdateStageStatus(context.Context, *pipeline.StageStatus) (*pipeline.StageStatus, error)
}

func _AppendProgressLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AppendProgressLog(ctx, req.(*pipeline.ProgressLog))
	}
}

func _ApprovalEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Approval(ctx, req.(*ApprovalRequest))
	}
}

func _CancelEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Cancel(ctx, req.(*CancelRequest))
	}
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*CreateRequest))
	}
}

func _CreateProgressLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateProgressLog(ctx, req.(*pipeline.ProgressLog))
	}
}

func _CreateStageStatusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateStageStatus(ctx, req.(*CreateStageStatusRequest))
	}
}

func _GetEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Get(ctx, req.(*GetRequest))
	}
}

func _GetProgressLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetProgressLog(ctx, req.(*GetProgressLogRequest))
	}
}

func _ListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx, req.(*ListRequest))
	}
}

func _RecordEventsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RecordEvents(ctx, req.(*RecordEventsRequest))
	}
}

func _RetryEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Retry(ctx, req.(*RetryRequest))
	}
}

func _UpdateArtifactEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateArtifact(ctx, req.(*UpdateArtifactRequest))
	}
}

func _UpdateBuildStatusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateBuildStatus(ctx, req.(*UpdateBuildStatusRequest))
	}
}

func _UpdateProgressLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateProgressLog(ctx, req.(*pipeline.ProgressLog))
	}
}

func _UpdateStageStatusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateStageStatus(ctx, req.(*pipeline.StageStatus))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_AppendProgressLogMethodDesc, _AppendProgressLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_ApprovalMethodDesc, _ApprovalEndpoint(srv))
	s.RegisterUnaryEndpoint(_CancelMethodDesc, _CancelEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateMethodDesc, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateProgressLogMethodDesc, _CreateProgressLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateStageStatusMethodDesc, _CreateStageStatusEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetMethodDesc, _GetEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetProgressLogMethodDesc, _GetProgressLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListMethodDesc, _ListEndpoint(srv))
	s.RegisterUnaryEndpoint(_RecordEventsMethodDesc, _RecordEventsEndpoint(srv))
	s.RegisterUnaryEndpoint(_RetryMethodDesc, _RetryEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateArtifactMethodDesc, _UpdateArtifactEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateBuildStatusMethodDesc, _UpdateBuildStatusEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateProgressLogMethodDesc, _UpdateProgressLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateStageStatusMethodDesc, _UpdateStageStatusEndpoint(srv))
}

// Method Description
var _AppendProgressLogMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.AppendProgressLog",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "AppendProgressLog",
	RequestType:  (*pipeline.ProgressLog)(nil),
	ResponseType: (*pipeline.ProgressLog)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/pipeline/v1/progress_log/:id/append",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ApprovalMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.Approval",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "Approval",
	RequestType:  (*ApprovalRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/pipeline/v1/builds/:build_id/approval/:step_id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CancelMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.Cancel",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "Cancel",
	RequestType:  (*CancelRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/pipeline/v1/builds/:build_id/cancel",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.Create",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "Create",
	RequestType:  (*CreateRequest)(nil),
	ResponseType: (*pipeline.Build)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/pipeline/v1/builds",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateProgressLogMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.CreateProgressLog",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "CreateProgressLog",
	RequestType:  (*pipeline.ProgressLog)(nil),
	ResponseType: (*pipeline.ProgressLog)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/pipeline/v1/progress_log",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateStageStatusMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.CreateStageStatus",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "CreateStageStatus",
	RequestType:  (*CreateStageStatusRequest)(nil),
	ResponseType: (*pipeline.StageStatus)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/pipeline/v1/stage_status",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.Get",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "Get",
	RequestType:  (*GetRequest)(nil),
	ResponseType: (*GetResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/pipeline/v1/builds/:build_id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetProgressLogMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.GetProgressLog",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "GetProgressLog",
	RequestType:  (*GetProgressLogRequest)(nil),
	ResponseType: (*pipeline.ProgressLog)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/pipeline/v1/progress_log/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.List",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "List",
	RequestType:  (*ListRequest)(nil),
	ResponseType: (*ListResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/pipeline/v1/builds/list",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _RecordEventsMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.RecordEvents",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "RecordEvents",
	RequestType:  (*RecordEventsRequest)(nil),
	ResponseType: (*pipeline.Build)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/pipeline/v1/builds/:build_id/events",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _RetryMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.Retry",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "Retry",
	RequestType:  (*RetryRequest)(nil),
	ResponseType: (*RetryResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/pipeline/v1/builds/:build_id/retry",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateArtifactMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.UpdateArtifact",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "UpdateArtifact",
	RequestType:  (*UpdateArtifactRequest)(nil),
	ResponseType: (*UpdateArtifactResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/pipeline/v1/builds/:build_id/update_artifact",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateBuildStatusMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.UpdateBuildStatus",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "UpdateBuildStatus",
	RequestType:  (*UpdateBuildStatusRequest)(nil),
	ResponseType: (*pipeline.Build)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/pipeline/v1/builds/:build_id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateProgressLogMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.UpdateProgressLog",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "UpdateProgressLog",
	RequestType:  (*pipeline.ProgressLog)(nil),
	ResponseType: (*pipeline.ProgressLog)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/pipeline/v1/progress_log/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateStageStatusMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.pipeline.build.UpdateStageStatus",
		Version: "1.0",
	},
	ServiceName:  "build.rpc",
	MethodName:   "UpdateStageStatus",
	RequestType:  (*pipeline.StageStatus)(nil),
	ResponseType: (*pipeline.StageStatus)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/pipeline/v1/stage_status/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
