// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package build

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	pipeline "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/pipeline"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for build service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	AppendProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	Create(ctx context.Context, in *CreateRequest) (*pipeline.Build, error)
	CreateProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	CreateStageStatus(ctx context.Context, in *CreateStageStatusRequest) (*pipeline.StageStatus, error)
	Get(ctx context.Context, in *GetRequest) (*GetResponse, error)
	GetProgressLog(ctx context.Context, in *GetProgressLogRequest) (*pipeline.ProgressLog, error)
	POST(ctx context.Context, in *POSTRequest) (*POSTResponse, error)
	UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest) (*pipeline.Build, error)
	UpdateProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	UpdateStageStatus(ctx context.Context, in *pipeline.StageStatus) (*pipeline.StageStatus, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) AppendProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error) {
	out := new(pipeline.ProgressLog)
	err := c.c.Invoke(ctx, _AppendProgressLogContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Create(ctx context.Context, in *CreateRequest) (*pipeline.Build, error) {
	out := new(pipeline.Build)
	err := c.c.Invoke(ctx, _CreateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error) {
	out := new(pipeline.ProgressLog)
	err := c.c.Invoke(ctx, _CreateProgressLogContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateStageStatus(ctx context.Context, in *CreateStageStatusRequest) (*pipeline.StageStatus, error) {
	out := new(pipeline.StageStatus)
	err := c.c.Invoke(ctx, _CreateStageStatusContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Get(ctx context.Context, in *GetRequest) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.c.Invoke(ctx, _GetContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetProgressLog(ctx context.Context, in *GetProgressLogRequest) (*pipeline.ProgressLog, error) {
	out := new(pipeline.ProgressLog)
	err := c.c.Invoke(ctx, _GetProgressLogContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) POST(ctx context.Context, in *POSTRequest) (*POSTResponse, error) {
	out := new(POSTResponse)
	err := c.c.Invoke(ctx, _POSTContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest) (*pipeline.Build, error) {
	out := new(pipeline.Build)
	err := c.c.Invoke(ctx, _UpdateBuildStatusContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProgressLog(ctx context.Context, in *pipeline.ProgressLog) (*pipeline.ProgressLog, error) {
	out := new(pipeline.ProgressLog)
	err := c.c.Invoke(ctx, _UpdateProgressLogContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateStageStatus(ctx context.Context, in *pipeline.StageStatus) (*pipeline.StageStatus, error) {
	out := new(pipeline.StageStatus)
	err := c.c.Invoke(ctx, _UpdateStageStatusContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for build service.
type Service interface {
	AppendProgressLog(context.Context, *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	Create(context.Context, *CreateRequest) (*pipeline.Build, error)
	CreateProgressLog(context.Context, *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	CreateStageStatus(context.Context, *CreateStageStatusRequest) (*pipeline.StageStatus, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetProgressLog(context.Context, *GetProgressLogRequest) (*pipeline.ProgressLog, error)
	POST(context.Context, *POSTRequest) (*POSTResponse, error)
	UpdateBuildStatus(context.Context, *UpdateBuildStatusRequest) (*pipeline.Build, error)
	UpdateProgressLog(context.Context, *pipeline.ProgressLog) (*pipeline.ProgressLog, error)
	UpdateStageStatus(context.Context, *pipeline.StageStatus) (*pipeline.StageStatus, error)
}

func _AppendProgressLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AppendProgressLog(ctx, req.(*pipeline.ProgressLog))
	}
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*CreateRequest))
	}
}

func _CreateProgressLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateProgressLog(ctx, req.(*pipeline.ProgressLog))
	}
}

func _CreateStageStatusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateStageStatus(ctx, req.(*CreateStageStatusRequest))
	}
}

func _GetEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Get(ctx, req.(*GetRequest))
	}
}

func _GetProgressLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetProgressLog(ctx, req.(*GetProgressLogRequest))
	}
}

func _POSTEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.POST(ctx, req.(*POSTRequest))
	}
}

func _UpdateBuildStatusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateBuildStatus(ctx, req.(*UpdateBuildStatusRequest))
	}
}

func _UpdateProgressLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateProgressLog(ctx, req.(*pipeline.ProgressLog))
	}
}

func _UpdateStageStatusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateStageStatus(ctx, req.(*pipeline.StageStatus))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_AppendProgressLogContract, _AppendProgressLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateContract, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateProgressLogContract, _CreateProgressLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateStageStatusContract, _CreateStageStatusEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetContract, _GetEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetProgressLogContract, _GetProgressLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_POSTContract, _POSTEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateBuildStatusContract, _UpdateBuildStatusEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateProgressLogContract, _UpdateProgressLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateStageStatusContract, _UpdateStageStatusEndpoint(srv))
}

// API Contract
var _AppendProgressLogContract = &appendProgressLogContract{}

type appendProgressLogContract struct{}

func (*appendProgressLogContract) ServiceName() string          { return "build.rpc" }
func (*appendProgressLogContract) MethodName() string           { return "AppendProgressLog" }
func (*appendProgressLogContract) RequestMessage() interface{}  { return new(pipeline.ProgressLog) }
func (*appendProgressLogContract) ResponseMessage() interface{} { return new(pipeline.ProgressLog) }
func (*appendProgressLogContract) ContractName() string {
	return "easyops.api.pipeline.build.AppendProgressLog"
}
func (*appendProgressLogContract) ContractVersion() string { return "1.0" }
func (*appendProgressLogContract) Pattern() (string, string) {
	return "PUT", "/api/pipeline/v1/progress_log/:id/append"
}
func (*appendProgressLogContract) Body() string { return "" }

var _CreateContract = &createContract{}

type createContract struct{}

func (*createContract) ServiceName() string          { return "build.rpc" }
func (*createContract) MethodName() string           { return "Create" }
func (*createContract) RequestMessage() interface{}  { return new(CreateRequest) }
func (*createContract) ResponseMessage() interface{} { return new(CreateRequest) }
func (*createContract) ContractName() string         { return "easyops.api.pipeline.build.Create" }
func (*createContract) ContractVersion() string      { return "1.0" }
func (*createContract) Pattern() (string, string)    { return "POST", "/api/pipeline/v1/builds" }
func (*createContract) Body() string                 { return "" }

var _CreateProgressLogContract = &createProgressLogContract{}

type createProgressLogContract struct{}

func (*createProgressLogContract) ServiceName() string          { return "build.rpc" }
func (*createProgressLogContract) MethodName() string           { return "CreateProgressLog" }
func (*createProgressLogContract) RequestMessage() interface{}  { return new(pipeline.ProgressLog) }
func (*createProgressLogContract) ResponseMessage() interface{} { return new(pipeline.ProgressLog) }
func (*createProgressLogContract) ContractName() string {
	return "easyops.api.pipeline.build.CreateProgressLog"
}
func (*createProgressLogContract) ContractVersion() string { return "1.0" }
func (*createProgressLogContract) Pattern() (string, string) {
	return "POST", "/api/pipeline/v1/progress_log"
}
func (*createProgressLogContract) Body() string { return "" }

var _CreateStageStatusContract = &createStageStatusContract{}

type createStageStatusContract struct{}

func (*createStageStatusContract) ServiceName() string          { return "build.rpc" }
func (*createStageStatusContract) MethodName() string           { return "CreateStageStatus" }
func (*createStageStatusContract) RequestMessage() interface{}  { return new(CreateStageStatusRequest) }
func (*createStageStatusContract) ResponseMessage() interface{} { return new(CreateStageStatusRequest) }
func (*createStageStatusContract) ContractName() string {
	return "easyops.api.pipeline.build.CreateStageStatus"
}
func (*createStageStatusContract) ContractVersion() string { return "1.0" }
func (*createStageStatusContract) Pattern() (string, string) {
	return "POST", "/api/pipeline/v1/stage_status"
}
func (*createStageStatusContract) Body() string { return "" }

var _GetContract = &getContract{}

type getContract struct{}

func (*getContract) ServiceName() string          { return "build.rpc" }
func (*getContract) MethodName() string           { return "Get" }
func (*getContract) RequestMessage() interface{}  { return new(GetRequest) }
func (*getContract) ResponseMessage() interface{} { return new(GetRequest) }
func (*getContract) ContractName() string         { return "easyops.api.pipeline.build.Get" }
func (*getContract) ContractVersion() string      { return "1.0" }
func (*getContract) Pattern() (string, string)    { return "GET", "/api/pipeline/v1/builds/:build_id" }
func (*getContract) Body() string                 { return "" }

var _GetProgressLogContract = &getProgressLogContract{}

type getProgressLogContract struct{}

func (*getProgressLogContract) ServiceName() string          { return "build.rpc" }
func (*getProgressLogContract) MethodName() string           { return "GetProgressLog" }
func (*getProgressLogContract) RequestMessage() interface{}  { return new(GetProgressLogRequest) }
func (*getProgressLogContract) ResponseMessage() interface{} { return new(GetProgressLogRequest) }
func (*getProgressLogContract) ContractName() string {
	return "easyops.api.pipeline.build.GetProgressLog"
}
func (*getProgressLogContract) ContractVersion() string { return "1.0" }
func (*getProgressLogContract) Pattern() (string, string) {
	return "GET", "/api/pipeline/v1/progress_log/:id"
}
func (*getProgressLogContract) Body() string { return "" }

var _POSTContract = &pOSTContract{}

type pOSTContract struct{}

func (*pOSTContract) ServiceName() string          { return "build.rpc" }
func (*pOSTContract) MethodName() string           { return "POST" }
func (*pOSTContract) RequestMessage() interface{}  { return new(POSTRequest) }
func (*pOSTContract) ResponseMessage() interface{} { return new(POSTRequest) }
func (*pOSTContract) ContractName() string         { return "easyops.api.pipeline.build.POST" }
func (*pOSTContract) ContractVersion() string      { return "1.0" }
func (*pOSTContract) Pattern() (string, string)    { return "POST", "/api/pipeline/v1/builds/list" }
func (*pOSTContract) Body() string                 { return "" }

var _UpdateBuildStatusContract = &updateBuildStatusContract{}

type updateBuildStatusContract struct{}

func (*updateBuildStatusContract) ServiceName() string          { return "build.rpc" }
func (*updateBuildStatusContract) MethodName() string           { return "UpdateBuildStatus" }
func (*updateBuildStatusContract) RequestMessage() interface{}  { return new(UpdateBuildStatusRequest) }
func (*updateBuildStatusContract) ResponseMessage() interface{} { return new(UpdateBuildStatusRequest) }
func (*updateBuildStatusContract) ContractName() string {
	return "easyops.api.pipeline.build.UpdateBuildStatus"
}
func (*updateBuildStatusContract) ContractVersion() string { return "1.0" }
func (*updateBuildStatusContract) Pattern() (string, string) {
	return "PUT", "/api/pipeline/v1/builds/:build_id"
}
func (*updateBuildStatusContract) Body() string { return "" }

var _UpdateProgressLogContract = &updateProgressLogContract{}

type updateProgressLogContract struct{}

func (*updateProgressLogContract) ServiceName() string          { return "build.rpc" }
func (*updateProgressLogContract) MethodName() string           { return "UpdateProgressLog" }
func (*updateProgressLogContract) RequestMessage() interface{}  { return new(pipeline.ProgressLog) }
func (*updateProgressLogContract) ResponseMessage() interface{} { return new(pipeline.ProgressLog) }
func (*updateProgressLogContract) ContractName() string {
	return "easyops.api.pipeline.build.UpdateProgressLog"
}
func (*updateProgressLogContract) ContractVersion() string { return "1.0" }
func (*updateProgressLogContract) Pattern() (string, string) {
	return "PUT", "/api/pipeline/v1/progress_log/:id"
}
func (*updateProgressLogContract) Body() string { return "" }

var _UpdateStageStatusContract = &updateStageStatusContract{}

type updateStageStatusContract struct{}

func (*updateStageStatusContract) ServiceName() string          { return "build.rpc" }
func (*updateStageStatusContract) MethodName() string           { return "UpdateStageStatus" }
func (*updateStageStatusContract) RequestMessage() interface{}  { return new(pipeline.StageStatus) }
func (*updateStageStatusContract) ResponseMessage() interface{} { return new(pipeline.StageStatus) }
func (*updateStageStatusContract) ContractName() string {
	return "easyops.api.pipeline.build.UpdateStageStatus"
}
func (*updateStageStatusContract) ContractVersion() string { return "1.0" }
func (*updateStageStatusContract) Pattern() (string, string) {
	return "PUT", "/api/pipeline/v1/stage_status/:id"
}
func (*updateStageStatusContract) Body() string { return "" }
