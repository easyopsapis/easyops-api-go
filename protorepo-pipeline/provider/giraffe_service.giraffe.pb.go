// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package provider

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	pipeline "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/pipeline"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Create(ctx context.Context, in *pipeline.Provider) (*pipeline.Provider, error)
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest) (*types.Empty, error)
	Get(ctx context.Context, in *GetRequest) (*pipeline.Provider, error)
	List(ctx context.Context, in *types.Empty) (*ListResponse, error)
	ListRepository(ctx context.Context, in *ListRepositoryRequest) (*ListRepositoryResponse, error)
	SetDefaultProvider(ctx context.Context, in *SetDefaultProviderRequest) (*types.Empty, error)
	Update(ctx context.Context, in *pipeline.Provider) (*pipeline.Provider, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Create(ctx context.Context, in *pipeline.Provider) (*pipeline.Provider, error) {
	out := new(pipeline.Provider)
	err := c.c.Invoke(ctx, _CreateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProvider(ctx context.Context, in *DeleteProviderRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteProviderContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Get(ctx context.Context, in *GetRequest) (*pipeline.Provider, error) {
	out := new(pipeline.Provider)
	err := c.c.Invoke(ctx, _GetContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) List(ctx context.Context, in *types.Empty) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.c.Invoke(ctx, _ListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListRepository(ctx context.Context, in *ListRepositoryRequest) (*ListRepositoryResponse, error) {
	out := new(ListRepositoryResponse)
	err := c.c.Invoke(ctx, _ListRepositoryContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SetDefaultProvider(ctx context.Context, in *SetDefaultProviderRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _SetDefaultProviderContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Update(ctx context.Context, in *pipeline.Provider) (*pipeline.Provider, error) {
	out := new(pipeline.Provider)
	err := c.c.Invoke(ctx, _UpdateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for provider service.
type Service interface {
	Create(context.Context, *pipeline.Provider) (*pipeline.Provider, error)
	DeleteProvider(context.Context, *DeleteProviderRequest) (*types.Empty, error)
	Get(context.Context, *GetRequest) (*pipeline.Provider, error)
	List(context.Context, *types.Empty) (*ListResponse, error)
	ListRepository(context.Context, *ListRepositoryRequest) (*ListRepositoryResponse, error)
	SetDefaultProvider(context.Context, *SetDefaultProviderRequest) (*types.Empty, error)
	Update(context.Context, *pipeline.Provider) (*pipeline.Provider, error)
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*pipeline.Provider))
	}
}

func _DeleteProviderEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
}

func _GetEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Get(ctx, req.(*GetRequest))
	}
}

func _ListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx, req.(*types.Empty))
	}
}

func _ListRepositoryEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListRepository(ctx, req.(*ListRepositoryRequest))
	}
}

func _SetDefaultProviderEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SetDefaultProvider(ctx, req.(*SetDefaultProviderRequest))
	}
}

func _UpdateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*pipeline.Provider))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateContract, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteProviderContract, _DeleteProviderEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetContract, _GetEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListContract, _ListEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListRepositoryContract, _ListRepositoryEndpoint(srv))
	s.RegisterUnaryEndpoint(_SetDefaultProviderContract, _SetDefaultProviderEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateContract, _UpdateEndpoint(srv))
}

// API Contract
var _CreateContract = &createContract{}

type createContract struct{}

func (*createContract) ServiceName() string          { return "provider.rpc" }
func (*createContract) MethodName() string           { return "Create" }
func (*createContract) RequestMessage() interface{}  { return new(pipeline.Provider) }
func (*createContract) ResponseMessage() interface{} { return new(pipeline.Provider) }
func (*createContract) ContractName() string         { return "easyops.api.pipeline.provider.Create" }
func (*createContract) ContractVersion() string      { return "1.0" }
func (*createContract) Pattern() (string, string)    { return "POST", "/api/pipeline/v1/providers" }
func (*createContract) Body() string                 { return "" }

var _DeleteProviderContract = &deleteProviderContract{}

type deleteProviderContract struct{}

func (*deleteProviderContract) ServiceName() string          { return "provider.rpc" }
func (*deleteProviderContract) MethodName() string           { return "DeleteProvider" }
func (*deleteProviderContract) RequestMessage() interface{}  { return new(DeleteProviderRequest) }
func (*deleteProviderContract) ResponseMessage() interface{} { return new(DeleteProviderRequest) }
func (*deleteProviderContract) ContractName() string {
	return "easyops.api.pipeline.provider.DeleteProvider"
}
func (*deleteProviderContract) ContractVersion() string { return "1.0" }
func (*deleteProviderContract) Pattern() (string, string) {
	return "DELETE", "/api/pipeline/v1/providers/:id"
}
func (*deleteProviderContract) Body() string { return "" }

var _GetContract = &getContract{}

type getContract struct{}

func (*getContract) ServiceName() string          { return "provider.rpc" }
func (*getContract) MethodName() string           { return "Get" }
func (*getContract) RequestMessage() interface{}  { return new(GetRequest) }
func (*getContract) ResponseMessage() interface{} { return new(GetRequest) }
func (*getContract) ContractName() string         { return "easyops.api.pipeline.provider.Get" }
func (*getContract) ContractVersion() string      { return "1.0" }
func (*getContract) Pattern() (string, string)    { return "GET", "/api/pipeline/v1/providers/:id" }
func (*getContract) Body() string                 { return "" }

var _ListContract = &listContract{}

type listContract struct{}

func (*listContract) ServiceName() string          { return "provider.rpc" }
func (*listContract) MethodName() string           { return "List" }
func (*listContract) RequestMessage() interface{}  { return new(types.Empty) }
func (*listContract) ResponseMessage() interface{} { return new(types.Empty) }
func (*listContract) ContractName() string         { return "easyops.api.pipeline.provider.List" }
func (*listContract) ContractVersion() string      { return "1.0" }
func (*listContract) Pattern() (string, string)    { return "GET", "/api/pipeline/v1/providers" }
func (*listContract) Body() string                 { return "" }

var _ListRepositoryContract = &listRepositoryContract{}

type listRepositoryContract struct{}

func (*listRepositoryContract) ServiceName() string          { return "provider.rpc" }
func (*listRepositoryContract) MethodName() string           { return "ListRepository" }
func (*listRepositoryContract) RequestMessage() interface{}  { return new(ListRepositoryRequest) }
func (*listRepositoryContract) ResponseMessage() interface{} { return new(ListRepositoryRequest) }
func (*listRepositoryContract) ContractName() string {
	return "easyops.api.pipeline.provider.ListRepository"
}
func (*listRepositoryContract) ContractVersion() string { return "1.0" }
func (*listRepositoryContract) Pattern() (string, string) {
	return "GET", "/api/pipeline/v1/provider/:provider_id/repositories"
}
func (*listRepositoryContract) Body() string { return "" }

var _SetDefaultProviderContract = &setDefaultProviderContract{}

type setDefaultProviderContract struct{}

func (*setDefaultProviderContract) ServiceName() string         { return "provider.rpc" }
func (*setDefaultProviderContract) MethodName() string          { return "SetDefaultProvider" }
func (*setDefaultProviderContract) RequestMessage() interface{} { return new(SetDefaultProviderRequest) }
func (*setDefaultProviderContract) ResponseMessage() interface{} {
	return new(SetDefaultProviderRequest)
}
func (*setDefaultProviderContract) ContractName() string {
	return "easyops.api.pipeline.provider.SetDefaultProvider"
}
func (*setDefaultProviderContract) ContractVersion() string { return "1.0" }
func (*setDefaultProviderContract) Pattern() (string, string) {
	return "PUT", "/api/pipeline/v1/providers/:id/default"
}
func (*setDefaultProviderContract) Body() string { return "" }

var _UpdateContract = &updateContract{}

type updateContract struct{}

func (*updateContract) ServiceName() string          { return "provider.rpc" }
func (*updateContract) MethodName() string           { return "Update" }
func (*updateContract) RequestMessage() interface{}  { return new(pipeline.Provider) }
func (*updateContract) ResponseMessage() interface{} { return new(pipeline.Provider) }
func (*updateContract) ContractName() string         { return "easyops.api.pipeline.provider.Update" }
func (*updateContract) ContractVersion() string      { return "1.0" }
func (*updateContract) Pattern() (string, string)    { return "PUT", "/api/pipeline/v1/providers/:id" }
func (*updateContract) Body() string                 { return "" }
