// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package project

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	pipeline "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/pipeline"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Create(ctx context.Context, in *CreateRequest) (*CreateResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest) (*types.Empty, error)
	Get(ctx context.Context, in *GetRequest) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest) (*ListResponse, error)
	ListBranch(ctx context.Context, in *ListBranchRequest) (*ListBranchResponse, error)
	Update(ctx context.Context, in *UpdateRequest) (*pipeline.Project, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Create(ctx context.Context, in *CreateRequest) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.c.Invoke(ctx, _CreateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProject(ctx context.Context, in *DeleteProjectRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteProjectContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Get(ctx context.Context, in *GetRequest) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.c.Invoke(ctx, _GetContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) List(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.c.Invoke(ctx, _ListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListBranch(ctx context.Context, in *ListBranchRequest) (*ListBranchResponse, error) {
	out := new(ListBranchResponse)
	err := c.c.Invoke(ctx, _ListBranchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Update(ctx context.Context, in *UpdateRequest) (*pipeline.Project, error) {
	out := new(pipeline.Project)
	err := c.c.Invoke(ctx, _UpdateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for project service.
type Service interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*types.Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListBranch(context.Context, *ListBranchRequest) (*ListBranchResponse, error)
	Update(context.Context, *UpdateRequest) (*pipeline.Project, error)
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*CreateRequest))
	}
}

func _DeleteProjectEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
}

func _GetEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Get(ctx, req.(*GetRequest))
	}
}

func _ListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx, req.(*ListRequest))
	}
}

func _ListBranchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListBranch(ctx, req.(*ListBranchRequest))
	}
}

func _UpdateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*UpdateRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateContract, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteProjectContract, _DeleteProjectEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetContract, _GetEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListContract, _ListEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListBranchContract, _ListBranchEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateContract, _UpdateEndpoint(srv))
}

// API Contract
var _CreateContract = &createContract{}

type createContract struct{}

func (*createContract) ServiceName() string          { return "project.rpc" }
func (*createContract) MethodName() string           { return "Create" }
func (*createContract) RequestMessage() interface{}  { return new(CreateRequest) }
func (*createContract) ResponseMessage() interface{} { return new(CreateRequest) }
func (*createContract) ContractName() string         { return "easyops.api.pipeline.project.Create" }
func (*createContract) ContractVersion() string      { return "1.0" }
func (*createContract) Pattern() (string, string)    { return "POST", "/api/pipeline/v1/projects" }
func (*createContract) Body() string                 { return "" }

var _DeleteProjectContract = &deleteProjectContract{}

type deleteProjectContract struct{}

func (*deleteProjectContract) ServiceName() string          { return "project.rpc" }
func (*deleteProjectContract) MethodName() string           { return "DeleteProject" }
func (*deleteProjectContract) RequestMessage() interface{}  { return new(DeleteProjectRequest) }
func (*deleteProjectContract) ResponseMessage() interface{} { return new(DeleteProjectRequest) }
func (*deleteProjectContract) ContractName() string {
	return "easyops.api.pipeline.project.DeleteProject"
}
func (*deleteProjectContract) ContractVersion() string { return "1.0" }
func (*deleteProjectContract) Pattern() (string, string) {
	return "DELETE", "/api/pipeline/v1/projects/:project_id"
}
func (*deleteProjectContract) Body() string { return "" }

var _GetContract = &getContract{}

type getContract struct{}

func (*getContract) ServiceName() string          { return "project.rpc" }
func (*getContract) MethodName() string           { return "Get" }
func (*getContract) RequestMessage() interface{}  { return new(GetRequest) }
func (*getContract) ResponseMessage() interface{} { return new(GetRequest) }
func (*getContract) ContractName() string         { return "easyops.api.pipeline.project.Get" }
func (*getContract) ContractVersion() string      { return "1.0" }
func (*getContract) Pattern() (string, string)    { return "GET", "/api/pipeline/v1/projects/:project_id" }
func (*getContract) Body() string                 { return "" }

var _ListContract = &listContract{}

type listContract struct{}

func (*listContract) ServiceName() string          { return "project.rpc" }
func (*listContract) MethodName() string           { return "List" }
func (*listContract) RequestMessage() interface{}  { return new(ListRequest) }
func (*listContract) ResponseMessage() interface{} { return new(ListRequest) }
func (*listContract) ContractName() string         { return "easyops.api.pipeline.project.List" }
func (*listContract) ContractVersion() string      { return "1.0" }
func (*listContract) Pattern() (string, string)    { return "GET", "/api/pipeline/v1/projects" }
func (*listContract) Body() string                 { return "" }

var _ListBranchContract = &listBranchContract{}

type listBranchContract struct{}

func (*listBranchContract) ServiceName() string          { return "project.rpc" }
func (*listBranchContract) MethodName() string           { return "ListBranch" }
func (*listBranchContract) RequestMessage() interface{}  { return new(ListBranchRequest) }
func (*listBranchContract) ResponseMessage() interface{} { return new(ListBranchRequest) }
func (*listBranchContract) ContractName() string         { return "easyops.api.pipeline.project.ListBranch" }
func (*listBranchContract) ContractVersion() string      { return "1.0" }
func (*listBranchContract) Pattern() (string, string) {
	return "GET", "/api/pipeline/v1/projects/:project_id/branches"
}
func (*listBranchContract) Body() string { return "" }

var _UpdateContract = &updateContract{}

type updateContract struct{}

func (*updateContract) ServiceName() string          { return "project.rpc" }
func (*updateContract) MethodName() string           { return "Update" }
func (*updateContract) RequestMessage() interface{}  { return new(UpdateRequest) }
func (*updateContract) ResponseMessage() interface{} { return new(UpdateRequest) }
func (*updateContract) ContractName() string         { return "easyops.api.pipeline.project.Update" }
func (*updateContract) ContractVersion() string      { return "1.0" }
func (*updateContract) Pattern() (string, string) {
	return "PUT", "/api/pipeline/v1/projects/:project_id"
}
func (*updateContract) Body() string { return "project" }
