// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package pipeline

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	pipeline "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/pipeline"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for pipeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Create(ctx context.Context, in *CreateRequest) (*pipeline.Pipeline, error)
	CreateTrigger(ctx context.Context, in *CreateTriggerRequest) (*pipeline.Trigger, error)
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest) (*types.Empty, error)
	DeleteTrigger(ctx context.Context, in *DeleteTriggerRequest) (*types.Empty, error)
	Execute(ctx context.Context, in *ExecuteRequest) (*ExecuteResponse, error)
	Get(ctx context.Context, in *GetRequest) (*pipeline.Pipeline, error)
	GetTrigger(ctx context.Context, in *GetTriggerRequest) (*pipeline.Trigger, error)
	GetTriggerDetail(ctx context.Context, in *GetTriggerDetailRequest) (*GetTriggerDetailResponse, error)
	List(ctx context.Context, in *ListRequest) (*ListResponse, error)
	ListTrigger(ctx context.Context, in *ListTriggerRequest) (*ListTriggerResponse, error)
	Update(ctx context.Context, in *UpdateRequest) (*pipeline.Pipeline, error)
	UpdateTrigger(ctx context.Context, in *UpdateTriggerRequest) (*pipeline.Trigger, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Create(ctx context.Context, in *CreateRequest) (*pipeline.Pipeline, error) {
	out := new(pipeline.Pipeline)
	err := c.c.Invoke(ctx, _CreateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateTrigger(ctx context.Context, in *CreateTriggerRequest) (*pipeline.Trigger, error) {
	out := new(pipeline.Trigger)
	err := c.c.Invoke(ctx, _CreateTriggerContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePipeline(ctx context.Context, in *DeletePipelineRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeletePipelineContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTrigger(ctx context.Context, in *DeleteTriggerRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteTriggerContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Execute(ctx context.Context, in *ExecuteRequest) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.c.Invoke(ctx, _ExecuteContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Get(ctx context.Context, in *GetRequest) (*pipeline.Pipeline, error) {
	out := new(pipeline.Pipeline)
	err := c.c.Invoke(ctx, _GetContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetTrigger(ctx context.Context, in *GetTriggerRequest) (*pipeline.Trigger, error) {
	out := new(pipeline.Trigger)
	err := c.c.Invoke(ctx, _GetTriggerContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetTriggerDetail(ctx context.Context, in *GetTriggerDetailRequest) (*GetTriggerDetailResponse, error) {
	out := new(GetTriggerDetailResponse)
	err := c.c.Invoke(ctx, _GetTriggerDetailContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) List(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.c.Invoke(ctx, _ListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTrigger(ctx context.Context, in *ListTriggerRequest) (*ListTriggerResponse, error) {
	out := new(ListTriggerResponse)
	err := c.c.Invoke(ctx, _ListTriggerContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Update(ctx context.Context, in *UpdateRequest) (*pipeline.Pipeline, error) {
	out := new(pipeline.Pipeline)
	err := c.c.Invoke(ctx, _UpdateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTrigger(ctx context.Context, in *UpdateTriggerRequest) (*pipeline.Trigger, error) {
	out := new(pipeline.Trigger)
	err := c.c.Invoke(ctx, _UpdateTriggerContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for pipeline service.
type Service interface {
	Create(context.Context, *CreateRequest) (*pipeline.Pipeline, error)
	CreateTrigger(context.Context, *CreateTriggerRequest) (*pipeline.Trigger, error)
	DeletePipeline(context.Context, *DeletePipelineRequest) (*types.Empty, error)
	DeleteTrigger(context.Context, *DeleteTriggerRequest) (*types.Empty, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	Get(context.Context, *GetRequest) (*pipeline.Pipeline, error)
	GetTrigger(context.Context, *GetTriggerRequest) (*pipeline.Trigger, error)
	GetTriggerDetail(context.Context, *GetTriggerDetailRequest) (*GetTriggerDetailResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListTrigger(context.Context, *ListTriggerRequest) (*ListTriggerResponse, error)
	Update(context.Context, *UpdateRequest) (*pipeline.Pipeline, error)
	UpdateTrigger(context.Context, *UpdateTriggerRequest) (*pipeline.Trigger, error)
}

func _CreateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*CreateRequest))
	}
}

func _CreateTriggerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTrigger(ctx, req.(*CreateTriggerRequest))
	}
}

func _DeletePipelineEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
}

func _DeleteTriggerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteTrigger(ctx, req.(*DeleteTriggerRequest))
	}
}

func _ExecuteEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Execute(ctx, req.(*ExecuteRequest))
	}
}

func _GetEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Get(ctx, req.(*GetRequest))
	}
}

func _GetTriggerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTrigger(ctx, req.(*GetTriggerRequest))
	}
}

func _GetTriggerDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTriggerDetail(ctx, req.(*GetTriggerDetailRequest))
	}
}

func _ListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx, req.(*ListRequest))
	}
}

func _ListTriggerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListTrigger(ctx, req.(*ListTriggerRequest))
	}
}

func _UpdateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*UpdateRequest))
	}
}

func _UpdateTriggerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateTrigger(ctx, req.(*UpdateTriggerRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateContract, _CreateEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateTriggerContract, _CreateTriggerEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeletePipelineContract, _DeletePipelineEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteTriggerContract, _DeleteTriggerEndpoint(srv))
	s.RegisterUnaryEndpoint(_ExecuteContract, _ExecuteEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetContract, _GetEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetTriggerContract, _GetTriggerEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetTriggerDetailContract, _GetTriggerDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListContract, _ListEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListTriggerContract, _ListTriggerEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateContract, _UpdateEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateTriggerContract, _UpdateTriggerEndpoint(srv))
}

// API Contract
var _CreateContract = &createContract{}

type createContract struct{}

func (*createContract) ServiceName() string          { return "pipeline.rpc" }
func (*createContract) MethodName() string           { return "Create" }
func (*createContract) RequestMessage() interface{}  { return new(CreateRequest) }
func (*createContract) ResponseMessage() interface{} { return new(CreateRequest) }
func (*createContract) ContractName() string         { return "easyops.api.pipeline.pipeline.Create" }
func (*createContract) ContractVersion() string      { return "1.0" }
func (*createContract) Pattern() (string, string) {
	return "POST", "/api/pipeline/v1/projects/:project_id/pipelines"
}
func (*createContract) Body() string { return "" }

var _CreateTriggerContract = &createTriggerContract{}

type createTriggerContract struct{}

func (*createTriggerContract) ServiceName() string          { return "pipeline.rpc" }
func (*createTriggerContract) MethodName() string           { return "CreateTrigger" }
func (*createTriggerContract) RequestMessage() interface{}  { return new(CreateTriggerRequest) }
func (*createTriggerContract) ResponseMessage() interface{} { return new(CreateTriggerRequest) }
func (*createTriggerContract) ContractName() string {
	return "easyops.api.pipeline.pipeline.CreateTrigger"
}
func (*createTriggerContract) ContractVersion() string   { return "1.0" }
func (*createTriggerContract) Pattern() (string, string) { return "POST", "/api/pipeline/v1/triggers" }
func (*createTriggerContract) Body() string              { return "" }

var _DeletePipelineContract = &deletePipelineContract{}

type deletePipelineContract struct{}

func (*deletePipelineContract) ServiceName() string          { return "pipeline.rpc" }
func (*deletePipelineContract) MethodName() string           { return "DeletePipeline" }
func (*deletePipelineContract) RequestMessage() interface{}  { return new(DeletePipelineRequest) }
func (*deletePipelineContract) ResponseMessage() interface{} { return new(DeletePipelineRequest) }
func (*deletePipelineContract) ContractName() string {
	return "easyops.api.pipeline.pipeline.DeletePipeline"
}
func (*deletePipelineContract) ContractVersion() string { return "1.0" }
func (*deletePipelineContract) Pattern() (string, string) {
	return "DELETE", "/api/pipeline/v1/projects/:project_id/pipelines/:pipeline_id"
}
func (*deletePipelineContract) Body() string { return "" }

var _DeleteTriggerContract = &deleteTriggerContract{}

type deleteTriggerContract struct{}

func (*deleteTriggerContract) ServiceName() string          { return "pipeline.rpc" }
func (*deleteTriggerContract) MethodName() string           { return "DeleteTrigger" }
func (*deleteTriggerContract) RequestMessage() interface{}  { return new(DeleteTriggerRequest) }
func (*deleteTriggerContract) ResponseMessage() interface{} { return new(DeleteTriggerRequest) }
func (*deleteTriggerContract) ContractName() string {
	return "easyops.api.pipeline.pipeline.DeleteTrigger"
}
func (*deleteTriggerContract) ContractVersion() string { return "1.0" }
func (*deleteTriggerContract) Pattern() (string, string) {
	return "DELETE", "/api/pipeline/v1/triggers/:id"
}
func (*deleteTriggerContract) Body() string { return "" }

var _ExecuteContract = &executeContract{}

type executeContract struct{}

func (*executeContract) ServiceName() string          { return "pipeline.rpc" }
func (*executeContract) MethodName() string           { return "Execute" }
func (*executeContract) RequestMessage() interface{}  { return new(ExecuteRequest) }
func (*executeContract) ResponseMessage() interface{} { return new(ExecuteRequest) }
func (*executeContract) ContractName() string         { return "easyops.api.pipeline.pipeline.Execute" }
func (*executeContract) ContractVersion() string      { return "1.0" }
func (*executeContract) Pattern() (string, string) {
	return "POST", "/api/pipeline/v1/projects/:project_id/pipelines/:pipeline_id/execute"
}
func (*executeContract) Body() string { return "" }

var _GetContract = &getContract{}

type getContract struct{}

func (*getContract) ServiceName() string          { return "pipeline.rpc" }
func (*getContract) MethodName() string           { return "Get" }
func (*getContract) RequestMessage() interface{}  { return new(GetRequest) }
func (*getContract) ResponseMessage() interface{} { return new(GetRequest) }
func (*getContract) ContractName() string         { return "easyops.api.pipeline.pipeline.Get" }
func (*getContract) ContractVersion() string      { return "1.0" }
func (*getContract) Pattern() (string, string) {
	return "GET", "/api/pipeline/v1/projects/:project_id/pipelines/:pipeline_id"
}
func (*getContract) Body() string { return "" }

var _GetTriggerContract = &getTriggerContract{}

type getTriggerContract struct{}

func (*getTriggerContract) ServiceName() string          { return "pipeline.rpc" }
func (*getTriggerContract) MethodName() string           { return "GetTrigger" }
func (*getTriggerContract) RequestMessage() interface{}  { return new(GetTriggerRequest) }
func (*getTriggerContract) ResponseMessage() interface{} { return new(GetTriggerRequest) }
func (*getTriggerContract) ContractName() string         { return "easyops.api.pipeline.pipeline.GetTrigger" }
func (*getTriggerContract) ContractVersion() string      { return "1.0" }
func (*getTriggerContract) Pattern() (string, string)    { return "GET", "/api/pipeline/v1/triggers/:id" }
func (*getTriggerContract) Body() string                 { return "" }

var _GetTriggerDetailContract = &getTriggerDetailContract{}

type getTriggerDetailContract struct{}

func (*getTriggerDetailContract) ServiceName() string          { return "pipeline.rpc" }
func (*getTriggerDetailContract) MethodName() string           { return "GetTriggerDetail" }
func (*getTriggerDetailContract) RequestMessage() interface{}  { return new(GetTriggerDetailRequest) }
func (*getTriggerDetailContract) ResponseMessage() interface{} { return new(GetTriggerDetailRequest) }
func (*getTriggerDetailContract) ContractName() string {
	return "easyops.api.pipeline.pipeline.GetTriggerDetail"
}
func (*getTriggerDetailContract) ContractVersion() string { return "1.0" }
func (*getTriggerDetailContract) Pattern() (string, string) {
	return "GET", "/api/pipeline/v1/triggers/:id/detail"
}
func (*getTriggerDetailContract) Body() string { return "" }

var _ListContract = &listContract{}

type listContract struct{}

func (*listContract) ServiceName() string          { return "pipeline.rpc" }
func (*listContract) MethodName() string           { return "List" }
func (*listContract) RequestMessage() interface{}  { return new(ListRequest) }
func (*listContract) ResponseMessage() interface{} { return new(ListRequest) }
func (*listContract) ContractName() string         { return "easyops.api.pipeline.pipeline.List" }
func (*listContract) ContractVersion() string      { return "1.0" }
func (*listContract) Pattern() (string, string) {
	return "GET", "/api/pipeline/v1/projects/:project_id/pipelines"
}
func (*listContract) Body() string { return "" }

var _ListTriggerContract = &listTriggerContract{}

type listTriggerContract struct{}

func (*listTriggerContract) ServiceName() string          { return "pipeline.rpc" }
func (*listTriggerContract) MethodName() string           { return "ListTrigger" }
func (*listTriggerContract) RequestMessage() interface{}  { return new(ListTriggerRequest) }
func (*listTriggerContract) ResponseMessage() interface{} { return new(ListTriggerRequest) }
func (*listTriggerContract) ContractName() string         { return "easyops.api.pipeline.pipeline.ListTrigger" }
func (*listTriggerContract) ContractVersion() string      { return "1.0" }
func (*listTriggerContract) Pattern() (string, string)    { return "GET", "/api/pipeline/v1/triggers" }
func (*listTriggerContract) Body() string                 { return "" }

var _UpdateContract = &updateContract{}

type updateContract struct{}

func (*updateContract) ServiceName() string          { return "pipeline.rpc" }
func (*updateContract) MethodName() string           { return "Update" }
func (*updateContract) RequestMessage() interface{}  { return new(UpdateRequest) }
func (*updateContract) ResponseMessage() interface{} { return new(UpdateRequest) }
func (*updateContract) ContractName() string         { return "easyops.api.pipeline.pipeline.Update" }
func (*updateContract) ContractVersion() string      { return "1.0" }
func (*updateContract) Pattern() (string, string) {
	return "PUT", "/api/pipeline/v1/projects/:project_id/pipelines/:pipeline_id"
}
func (*updateContract) Body() string { return "pipeline" }

var _UpdateTriggerContract = &updateTriggerContract{}

type updateTriggerContract struct{}

func (*updateTriggerContract) ServiceName() string          { return "pipeline.rpc" }
func (*updateTriggerContract) MethodName() string           { return "UpdateTrigger" }
func (*updateTriggerContract) RequestMessage() interface{}  { return new(UpdateTriggerRequest) }
func (*updateTriggerContract) ResponseMessage() interface{} { return new(UpdateTriggerRequest) }
func (*updateTriggerContract) ContractName() string {
	return "easyops.api.pipeline.pipeline.UpdateTrigger"
}
func (*updateTriggerContract) ContractVersion() string { return "1.0" }
func (*updateTriggerContract) Pattern() (string, string) {
	return "PUT", "/api/pipeline/v1/triggers/:id"
}
func (*updateTriggerContract) Body() string { return "trigger" }
