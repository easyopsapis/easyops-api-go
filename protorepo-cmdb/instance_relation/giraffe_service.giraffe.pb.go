// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package instance_relation

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for instance_relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Append(ctx context.Context, in *AppendRequest) (*types.Empty, error)
	CountRelationInstance(ctx context.Context, in *CountRelationInstanceRequest) (*CountRelationInstanceResponse, error)
	Remove(ctx context.Context, in *RemoveRequest) (*types.Empty, error)
	Set(ctx context.Context, in *SetRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Append(ctx context.Context, in *AppendRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _AppendContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CountRelationInstance(ctx context.Context, in *CountRelationInstanceRequest) (*CountRelationInstanceResponse, error) {
	out := new(CountRelationInstanceResponse)
	err := c.c.Invoke(ctx, _CountRelationInstanceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Remove(ctx context.Context, in *RemoveRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _RemoveContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Set(ctx context.Context, in *SetRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _SetContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for instance_relation service.
type Service interface {
	Append(context.Context, *AppendRequest) (*types.Empty, error)
	CountRelationInstance(context.Context, *CountRelationInstanceRequest) (*CountRelationInstanceResponse, error)
	Remove(context.Context, *RemoveRequest) (*types.Empty, error)
	Set(context.Context, *SetRequest) (*types.Empty, error)
}

func _AppendEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Append(ctx, req.(*AppendRequest))
	}
}

func _CountRelationInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CountRelationInstance(ctx, req.(*CountRelationInstanceRequest))
	}
}

func _RemoveEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Remove(ctx, req.(*RemoveRequest))
	}
}

func _SetEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Set(ctx, req.(*SetRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_AppendContract, _AppendEndpoint(srv))
	s.RegisterUnaryEndpoint(_CountRelationInstanceContract, _CountRelationInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_RemoveContract, _RemoveEndpoint(srv))
	s.RegisterUnaryEndpoint(_SetContract, _SetEndpoint(srv))
}

// API Contract
var _AppendContract = &appendContract{}

type appendContract struct{}

func (*appendContract) ServiceName() string          { return "instance_relation.rpc" }
func (*appendContract) MethodName() string           { return "Append" }
func (*appendContract) RequestMessage() interface{}  { return new(AppendRequest) }
func (*appendContract) ResponseMessage() interface{} { return new(AppendRequest) }
func (*appendContract) ContractName() string         { return "easyops.api.cmdb.instance_relation.Append" }
func (*appendContract) ContractVersion() string      { return "1.0" }
func (*appendContract) Pattern() (string, string) {
	return "POST", "/object/:objectId/relation/:relationSideId/append"
}
func (*appendContract) Body() string { return "" }

var _CountRelationInstanceContract = &countRelationInstanceContract{}

type countRelationInstanceContract struct{}

func (*countRelationInstanceContract) ServiceName() string { return "instance_relation.rpc" }
func (*countRelationInstanceContract) MethodName() string  { return "CountRelationInstance" }
func (*countRelationInstanceContract) RequestMessage() interface{} {
	return new(CountRelationInstanceRequest)
}
func (*countRelationInstanceContract) ResponseMessage() interface{} {
	return new(CountRelationInstanceRequest)
}
func (*countRelationInstanceContract) ContractName() string {
	return "easyops.api.cmdb.instance_relation.CountRelationInstance"
}
func (*countRelationInstanceContract) ContractVersion() string { return "1.0" }
func (*countRelationInstanceContract) Pattern() (string, string) {
	return "GET", "/object_relation/:relationId/relation_instance/_count_relation_instance"
}
func (*countRelationInstanceContract) Body() string { return "" }

var _RemoveContract = &removeContract{}

type removeContract struct{}

func (*removeContract) ServiceName() string          { return "instance_relation.rpc" }
func (*removeContract) MethodName() string           { return "Remove" }
func (*removeContract) RequestMessage() interface{}  { return new(RemoveRequest) }
func (*removeContract) ResponseMessage() interface{} { return new(RemoveRequest) }
func (*removeContract) ContractName() string         { return "easyops.api.cmdb.instance_relation.Remove" }
func (*removeContract) ContractVersion() string      { return "1.0" }
func (*removeContract) Pattern() (string, string) {
	return "POST", "/object/:objectId/relation/:relationSideId/remove"
}
func (*removeContract) Body() string { return "" }

var _SetContract = &setContract{}

type setContract struct{}

func (*setContract) ServiceName() string          { return "instance_relation.rpc" }
func (*setContract) MethodName() string           { return "Set" }
func (*setContract) RequestMessage() interface{}  { return new(SetRequest) }
func (*setContract) ResponseMessage() interface{} { return new(SetRequest) }
func (*setContract) ContractName() string         { return "easyops.api.cmdb.instance_relation.Set" }
func (*setContract) ContractVersion() string      { return "1.0" }
func (*setContract) Pattern() (string, string) {
	return "POST", "/object/:objectId/relation/:relationSideId/set"
}
func (*setContract) Body() string { return "" }
