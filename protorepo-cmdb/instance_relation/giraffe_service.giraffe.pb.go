// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package instance_relation

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for instance_relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	Append(ctx context.Context, in *AppendRequest) (*types.Empty, error)
	CountRelationInstance(ctx context.Context, in *CountRelationInstanceRequest) (*CountRelationInstanceResponse, error)
	DiscoveryV2(ctx context.Context, in *DiscoveryV2Request) (*DiscoveryV2Response, error)
	InstanceRelationSnapshot(ctx context.Context, in *InstanceRelationSnapshotRequest) (*InstanceRelationSnapshotResponse, error)
	Remove(ctx context.Context, in *RemoveRequest) (*types.Empty, error)
	Set(ctx context.Context, in *SetRequest) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) Append(ctx context.Context, in *AppendRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _AppendMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CountRelationInstance(ctx context.Context, in *CountRelationInstanceRequest) (*CountRelationInstanceResponse, error) {
	out := new(CountRelationInstanceResponse)
	err := c.c.Invoke(ctx, _CountRelationInstanceMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DiscoveryV2(ctx context.Context, in *DiscoveryV2Request) (*DiscoveryV2Response, error) {
	out := new(DiscoveryV2Response)
	err := c.c.Invoke(ctx, _DiscoveryV2MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InstanceRelationSnapshot(ctx context.Context, in *InstanceRelationSnapshotRequest) (*InstanceRelationSnapshotResponse, error) {
	out := new(InstanceRelationSnapshotResponse)
	err := c.c.Invoke(ctx, _InstanceRelationSnapshotMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Remove(ctx context.Context, in *RemoveRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _RemoveMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Set(ctx context.Context, in *SetRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _SetMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for instance_relation service.
type Service interface {
	Append(context.Context, *AppendRequest) (*types.Empty, error)
	CountRelationInstance(context.Context, *CountRelationInstanceRequest) (*CountRelationInstanceResponse, error)
	DiscoveryV2(context.Context, *DiscoveryV2Request) (*DiscoveryV2Response, error)
	InstanceRelationSnapshot(context.Context, *InstanceRelationSnapshotRequest) (*InstanceRelationSnapshotResponse, error)
	Remove(context.Context, *RemoveRequest) (*types.Empty, error)
	Set(context.Context, *SetRequest) (*types.Empty, error)
}

func _AppendEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Append(ctx, req.(*AppendRequest))
	}
}

func _CountRelationInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CountRelationInstance(ctx, req.(*CountRelationInstanceRequest))
	}
}

func _DiscoveryV2Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DiscoveryV2(ctx, req.(*DiscoveryV2Request))
	}
}

func _InstanceRelationSnapshotEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceRelationSnapshot(ctx, req.(*InstanceRelationSnapshotRequest))
	}
}

func _RemoveEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Remove(ctx, req.(*RemoveRequest))
	}
}

func _SetEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Set(ctx, req.(*SetRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_AppendMethodDesc, _AppendEndpoint(srv))
	s.RegisterUnaryEndpoint(_CountRelationInstanceMethodDesc, _CountRelationInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_DiscoveryV2MethodDesc, _DiscoveryV2Endpoint(srv))
	s.RegisterUnaryEndpoint(_InstanceRelationSnapshotMethodDesc, _InstanceRelationSnapshotEndpoint(srv))
	s.RegisterUnaryEndpoint(_RemoveMethodDesc, _RemoveEndpoint(srv))
	s.RegisterUnaryEndpoint(_SetMethodDesc, _SetEndpoint(srv))
}

// Method Description
var _AppendMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_relation.Append",
		Version: "1.0",
	},
	ServiceName:  "instance_relation.rpc",
	MethodName:   "Append",
	RequestType:  (*AppendRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/object/:objectId/relation/:relationSideId/append",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CountRelationInstanceMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_relation.CountRelationInstance",
		Version: "1.0",
	},
	ServiceName:  "instance_relation.rpc",
	MethodName:   "CountRelationInstance",
	RequestType:  (*CountRelationInstanceRequest)(nil),
	ResponseType: (*CountRelationInstanceResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/object_relation/:relationId/relation_instance/_count_relation_instance",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _DiscoveryV2MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_relation.DiscoveryV2",
		Version: "1.0",
	},
	ServiceName:  "instance_relation.rpc",
	MethodName:   "DiscoveryV2",
	RequestType:  (*DiscoveryV2Request)(nil),
	ResponseType: (*DiscoveryV2Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/v2/object_relation/:relationId/_autodiscovery/multi",
		},
		Body:         "",
		ResponseBody: "",
	},
}

var _InstanceRelationSnapshotMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_relation.InstanceRelationSnapshot",
		Version: "1.0",
	},
	ServiceName:  "instance_relation.rpc",
	MethodName:   "InstanceRelationSnapshot",
	RequestType:  (*InstanceRelationSnapshotRequest)(nil),
	ResponseType: (*InstanceRelationSnapshotResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/history/object_relation/:relation_id/relation_instance/:relation_instance_id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _RemoveMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_relation.Remove",
		Version: "1.0",
	},
	ServiceName:  "instance_relation.rpc",
	MethodName:   "Remove",
	RequestType:  (*RemoveRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/object/:objectId/relation/:relationSideId/remove",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _SetMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_relation.Set",
		Version: "1.0",
	},
	ServiceName:  "instance_relation.rpc",
	MethodName:   "Set",
	RequestType:  (*SetRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/object/:objectId/relation/:relationSideId/set",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
