// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package instance_tree

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for instance_tree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	InstanceTree(ctx context.Context, in *InstanceTreeRequest) (*types.Struct, error)
	InstanceTreeAnchor(ctx context.Context, in *InstanceTreeAnchorRequest) (*types.Struct, error)
	InstanceTreeExpand(ctx context.Context, in *InstanceTreeExpandRequest) (*types.Struct, error)
	InstanceTreeSearch(ctx context.Context, in *InstanceTreeSearchRequest) (*types.Struct, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) InstanceTree(ctx context.Context, in *InstanceTreeRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _InstanceTreeContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InstanceTreeAnchor(ctx context.Context, in *InstanceTreeAnchorRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _InstanceTreeAnchorContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InstanceTreeExpand(ctx context.Context, in *InstanceTreeExpandRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _InstanceTreeExpandContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InstanceTreeSearch(ctx context.Context, in *InstanceTreeSearchRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _InstanceTreeSearchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for instance_tree service.
type Service interface {
	InstanceTree(context.Context, *InstanceTreeRequest) (*types.Struct, error)
	InstanceTreeAnchor(context.Context, *InstanceTreeAnchorRequest) (*types.Struct, error)
	InstanceTreeExpand(context.Context, *InstanceTreeExpandRequest) (*types.Struct, error)
	InstanceTreeSearch(context.Context, *InstanceTreeSearchRequest) (*types.Struct, error)
}

func _InstanceTreeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceTree(ctx, req.(*InstanceTreeRequest))
	}
}

func _InstanceTreeAnchorEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceTreeAnchor(ctx, req.(*InstanceTreeAnchorRequest))
	}
}

func _InstanceTreeExpandEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceTreeExpand(ctx, req.(*InstanceTreeExpandRequest))
	}
}

func _InstanceTreeSearchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceTreeSearch(ctx, req.(*InstanceTreeSearchRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_InstanceTreeContract, _InstanceTreeEndpoint(srv))
	s.RegisterUnaryEndpoint(_InstanceTreeAnchorContract, _InstanceTreeAnchorEndpoint(srv))
	s.RegisterUnaryEndpoint(_InstanceTreeExpandContract, _InstanceTreeExpandEndpoint(srv))
	s.RegisterUnaryEndpoint(_InstanceTreeSearchContract, _InstanceTreeSearchEndpoint(srv))
}

// API Contract
var _InstanceTreeContract = &instanceTreeContract{}

type instanceTreeContract struct{}

func (*instanceTreeContract) ServiceName() string          { return "instance_tree.rpc" }
func (*instanceTreeContract) MethodName() string           { return "InstanceTree" }
func (*instanceTreeContract) RequestMessage() interface{}  { return new(InstanceTreeRequest) }
func (*instanceTreeContract) ResponseMessage() interface{} { return new(InstanceTreeRequest) }
func (*instanceTreeContract) ContractName() string {
	return "easyops.api.cmdb.instance_tree.InstanceTree"
}
func (*instanceTreeContract) ContractVersion() string   { return "1.0" }
func (*instanceTreeContract) Pattern() (string, string) { return "POST", "/instance_tree/full" }
func (*instanceTreeContract) Body() string              { return "" }

var _InstanceTreeAnchorContract = &instanceTreeAnchorContract{}

type instanceTreeAnchorContract struct{}

func (*instanceTreeAnchorContract) ServiceName() string         { return "instance_tree.rpc" }
func (*instanceTreeAnchorContract) MethodName() string          { return "InstanceTreeAnchor" }
func (*instanceTreeAnchorContract) RequestMessage() interface{} { return new(InstanceTreeAnchorRequest) }
func (*instanceTreeAnchorContract) ResponseMessage() interface{} {
	return new(InstanceTreeAnchorRequest)
}
func (*instanceTreeAnchorContract) ContractName() string {
	return "easyops.api.cmdb.instance_tree.InstanceTreeAnchor"
}
func (*instanceTreeAnchorContract) ContractVersion() string   { return "1.0" }
func (*instanceTreeAnchorContract) Pattern() (string, string) { return "POST", "/instance_tree/anchor" }
func (*instanceTreeAnchorContract) Body() string              { return "" }

var _InstanceTreeExpandContract = &instanceTreeExpandContract{}

type instanceTreeExpandContract struct{}

func (*instanceTreeExpandContract) ServiceName() string         { return "instance_tree.rpc" }
func (*instanceTreeExpandContract) MethodName() string          { return "InstanceTreeExpand" }
func (*instanceTreeExpandContract) RequestMessage() interface{} { return new(InstanceTreeExpandRequest) }
func (*instanceTreeExpandContract) ResponseMessage() interface{} {
	return new(InstanceTreeExpandRequest)
}
func (*instanceTreeExpandContract) ContractName() string {
	return "easyops.api.cmdb.instance_tree.InstanceTreeExpand"
}
func (*instanceTreeExpandContract) ContractVersion() string   { return "1.0" }
func (*instanceTreeExpandContract) Pattern() (string, string) { return "POST", "/instance_tree/expand" }
func (*instanceTreeExpandContract) Body() string              { return "" }

var _InstanceTreeSearchContract = &instanceTreeSearchContract{}

type instanceTreeSearchContract struct{}

func (*instanceTreeSearchContract) ServiceName() string         { return "instance_tree.rpc" }
func (*instanceTreeSearchContract) MethodName() string          { return "InstanceTreeSearch" }
func (*instanceTreeSearchContract) RequestMessage() interface{} { return new(InstanceTreeSearchRequest) }
func (*instanceTreeSearchContract) ResponseMessage() interface{} {
	return new(InstanceTreeSearchRequest)
}
func (*instanceTreeSearchContract) ContractName() string {
	return "easyops.api.cmdb.instance_tree.InstanceTreeSearch"
}
func (*instanceTreeSearchContract) ContractVersion() string   { return "1.0" }
func (*instanceTreeSearchContract) Pattern() (string, string) { return "POST", "/instance_tree/search" }
func (*instanceTreeSearchContract) Body() string              { return "" }
