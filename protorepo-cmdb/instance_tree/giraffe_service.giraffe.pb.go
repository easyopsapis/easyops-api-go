// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package instance_tree

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for instance_tree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	InstanceTree(ctx context.Context, in *InstanceTreeRequest) (*types.Struct, error)
	InstanceTreeAnchor(ctx context.Context, in *InstanceTreeAnchorRequest) (*types.Struct, error)
	InstanceTreeExpand(ctx context.Context, in *InstanceTreeExpandRequest) (*types.Struct, error)
	InstanceTreeSearch(ctx context.Context, in *InstanceTreeSearchRequest) (*types.Struct, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) InstanceTree(ctx context.Context, in *InstanceTreeRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _InstanceTreeMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InstanceTreeAnchor(ctx context.Context, in *InstanceTreeAnchorRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _InstanceTreeAnchorMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InstanceTreeExpand(ctx context.Context, in *InstanceTreeExpandRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _InstanceTreeExpandMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) InstanceTreeSearch(ctx context.Context, in *InstanceTreeSearchRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _InstanceTreeSearchMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for instance_tree service.
type Service interface {
	InstanceTree(context.Context, *InstanceTreeRequest) (*types.Struct, error)
	InstanceTreeAnchor(context.Context, *InstanceTreeAnchorRequest) (*types.Struct, error)
	InstanceTreeExpand(context.Context, *InstanceTreeExpandRequest) (*types.Struct, error)
	InstanceTreeSearch(context.Context, *InstanceTreeSearchRequest) (*types.Struct, error)
}

func _InstanceTreeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceTree(ctx, req.(*InstanceTreeRequest))
	}
}

func _InstanceTreeAnchorEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceTreeAnchor(ctx, req.(*InstanceTreeAnchorRequest))
	}
}

func _InstanceTreeExpandEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceTreeExpand(ctx, req.(*InstanceTreeExpandRequest))
	}
}

func _InstanceTreeSearchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InstanceTreeSearch(ctx, req.(*InstanceTreeSearchRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_InstanceTreeMethodDesc, _InstanceTreeEndpoint(srv))
	s.RegisterUnaryEndpoint(_InstanceTreeAnchorMethodDesc, _InstanceTreeAnchorEndpoint(srv))
	s.RegisterUnaryEndpoint(_InstanceTreeExpandMethodDesc, _InstanceTreeExpandEndpoint(srv))
	s.RegisterUnaryEndpoint(_InstanceTreeSearchMethodDesc, _InstanceTreeSearchEndpoint(srv))
}

// Method Description
var _InstanceTreeMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_tree.InstanceTree",
		Version: "1.0",
	},
	ServiceName:  "instance_tree.rpc",
	MethodName:   "InstanceTree",
	RequestType:  (*InstanceTreeRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/instance_tree/full",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _InstanceTreeAnchorMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_tree.InstanceTreeAnchor",
		Version: "1.0",
	},
	ServiceName:  "instance_tree.rpc",
	MethodName:   "InstanceTreeAnchor",
	RequestType:  (*InstanceTreeAnchorRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/instance_tree/anchor",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _InstanceTreeExpandMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_tree.InstanceTreeExpand",
		Version: "1.0",
	},
	ServiceName:  "instance_tree.rpc",
	MethodName:   "InstanceTreeExpand",
	RequestType:  (*InstanceTreeExpandRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/instance_tree/expand",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _InstanceTreeSearchMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.cmdb.instance_tree.InstanceTreeSearch",
		Version: "1.0",
	},
	ServiceName:  "instance_tree.rpc",
	MethodName:   "InstanceTreeSearch",
	RequestType:  (*InstanceTreeSearchRequest)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/instance_tree/search",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
