// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: instance_tree_anchor.proto

package instance_tree

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	cmdb "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/cmdb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
//InstanceTreeAnchor请求
type InstanceTreeAnchorRequest struct {
	//
	//树定义
	Tree *cmdb.InstanceTreeRootNode `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree" form:"tree"`
	//
	//全局忽略与父级无关联实例,默认false
	IgnoreSingle bool `protobuf:"varint,2,opt,name=ignore_single,json=ignoreSingle,proto3" json:"ignore_single" form:"ignore_single"`
	//
	//模型Id
	ObjectId string `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id" form:"object_id"`
	//
	//实例Id
	InstanceId           string   `protobuf:"bytes,4,opt,name=instanceId,proto3" json:"instanceId" form:"instanceId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceTreeAnchorRequest) Reset()         { *m = InstanceTreeAnchorRequest{} }
func (m *InstanceTreeAnchorRequest) String() string { return proto.CompactTextString(m) }
func (*InstanceTreeAnchorRequest) ProtoMessage()    {}
func (*InstanceTreeAnchorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc9ed0a5358c30bc, []int{0}
}
func (m *InstanceTreeAnchorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceTreeAnchorRequest.Unmarshal(m, b)
}
func (m *InstanceTreeAnchorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceTreeAnchorRequest.Marshal(b, m, deterministic)
}
func (m *InstanceTreeAnchorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceTreeAnchorRequest.Merge(m, src)
}
func (m *InstanceTreeAnchorRequest) XXX_Size() int {
	return xxx_messageInfo_InstanceTreeAnchorRequest.Size(m)
}
func (m *InstanceTreeAnchorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceTreeAnchorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceTreeAnchorRequest proto.InternalMessageInfo

func (m *InstanceTreeAnchorRequest) GetTree() *cmdb.InstanceTreeRootNode {
	if m != nil {
		return m.Tree
	}
	return nil
}

func (m *InstanceTreeAnchorRequest) GetIgnoreSingle() bool {
	if m != nil {
		return m.IgnoreSingle
	}
	return false
}

func (m *InstanceTreeAnchorRequest) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *InstanceTreeAnchorRequest) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

//
//InstanceTreeAnchorApi返回
type InstanceTreeAnchorResponseWrapper struct {
	//
	//返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code" form:"code"`
	//
	//返回码解释
	CodeExplain string `protobuf:"bytes,2,opt,name=codeExplain,proto3" json:"codeExplain" form:"codeExplain"`
	//
	//错误详情
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error" form:"error"`
	//
	//返回数据
	Data                 *types.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data" form:"data"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InstanceTreeAnchorResponseWrapper) Reset()         { *m = InstanceTreeAnchorResponseWrapper{} }
func (m *InstanceTreeAnchorResponseWrapper) String() string { return proto.CompactTextString(m) }
func (*InstanceTreeAnchorResponseWrapper) ProtoMessage()    {}
func (*InstanceTreeAnchorResponseWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc9ed0a5358c30bc, []int{1}
}
func (m *InstanceTreeAnchorResponseWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceTreeAnchorResponseWrapper.Unmarshal(m, b)
}
func (m *InstanceTreeAnchorResponseWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceTreeAnchorResponseWrapper.Marshal(b, m, deterministic)
}
func (m *InstanceTreeAnchorResponseWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceTreeAnchorResponseWrapper.Merge(m, src)
}
func (m *InstanceTreeAnchorResponseWrapper) XXX_Size() int {
	return xxx_messageInfo_InstanceTreeAnchorResponseWrapper.Size(m)
}
func (m *InstanceTreeAnchorResponseWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceTreeAnchorResponseWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceTreeAnchorResponseWrapper proto.InternalMessageInfo

func (m *InstanceTreeAnchorResponseWrapper) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *InstanceTreeAnchorResponseWrapper) GetCodeExplain() string {
	if m != nil {
		return m.CodeExplain
	}
	return ""
}

func (m *InstanceTreeAnchorResponseWrapper) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *InstanceTreeAnchorResponseWrapper) GetData() *types.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*InstanceTreeAnchorRequest)(nil), "instance_tree.InstanceTreeAnchorRequest")
	proto.RegisterType((*InstanceTreeAnchorResponseWrapper)(nil), "instance_tree.InstanceTreeAnchorResponseWrapper")
}

func init() { proto.RegisterFile("instance_tree_anchor.proto", fileDescriptor_fc9ed0a5358c30bc) }

var fileDescriptor_fc9ed0a5358c30bc = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xd1, 0x6e, 0xd3, 0x3c,
	0x18, 0x55, 0xf7, 0x77, 0xbf, 0x56, 0x77, 0x83, 0x2e, 0x20, 0x28, 0x15, 0x52, 0x8a, 0x99, 0x50,
	0x11, 0x24, 0x61, 0xad, 0x84, 0x00, 0x81, 0xd0, 0x2a, 0x21, 0xd1, 0x1b, 0x2e, 0x3c, 0x24, 0x24,
	0xc6, 0x16, 0xb9, 0xb6, 0x97, 0x05, 0x92, 0x7c, 0xc1, 0x76, 0x19, 0x6c, 0xda, 0x3b, 0xf1, 0x44,
	0x41, 0xe2, 0x8a, 0xeb, 0x3c, 0x01, 0x8a, 0x9d, 0x75, 0xa9, 0xc4, 0x55, 0x7c, 0x7c, 0xce, 0xf9,
	0x72, 0x7c, 0xf4, 0xa1, 0x41, 0x9c, 0x29, 0x4d, 0x33, 0x26, 0x42, 0x2d, 0x85, 0x08, 0x69, 0xc6,
	0x4e, 0x40, 0xfa, 0xb9, 0x04, 0x0d, 0xce, 0xd6, 0x0a, 0x37, 0xf0, 0xa2, 0x58, 0x9f, 0x2c, 0xe6,
	0x3e, 0x83, 0x34, 0x88, 0x20, 0x82, 0xc0, 0xa8, 0xe6, 0x8b, 0x63, 0x83, 0x0c, 0x30, 0x27, 0xeb,
	0x1e, 0x7c, 0x8a, 0xc0, 0x17, 0x54, 0xfd, 0x80, 0x5c, 0xf9, 0x09, 0x30, 0x9a, 0x04, 0x0c, 0x32,
	0x2d, 0x29, 0xd3, 0xca, 0x3a, 0xa5, 0xc8, 0xc1, 0x4b, 0x81, 0x8b, 0x44, 0x05, 0xb5, 0x30, 0x30,
	0x30, 0x60, 0x29, 0x9f, 0x07, 0xab, 0xc1, 0x24, 0x80, 0x0e, 0x33, 0xe0, 0xa2, 0x9e, 0xfe, 0xb4,
	0x11, 0x26, 0x3d, 0x8d, 0xf5, 0x17, 0x38, 0x0d, 0x22, 0xf0, 0x0c, 0xe9, 0x7d, 0xa3, 0x49, 0xcc,
	0xa9, 0x06, 0xa9, 0x82, 0xe5, 0xb1, 0xf6, 0xdd, 0x8d, 0x00, 0xa2, 0x44, 0x5c, 0x65, 0x57, 0x5a,
	0x2e, 0x98, 0xb6, 0x2c, 0xfe, 0xb9, 0x86, 0xee, 0xcc, 0xea, 0xff, 0xbe, 0x97, 0x42, 0xec, 0x99,
	0x3a, 0x88, 0xf8, 0xba, 0x10, 0x4a, 0x3b, 0xaf, 0x51, 0xbb, 0xca, 0xd2, 0x6f, 0x0d, 0x5b, 0xa3,
	0xee, 0x78, 0xe0, 0x57, 0x31, 0xfd, 0xa6, 0x9c, 0x00, 0xe8, 0x77, 0xc0, 0xc5, 0xf4, 0x7a, 0x59,
	0xb8, 0xdd, 0x63, 0x90, 0xe9, 0x0b, 0x5c, 0x39, 0x30, 0x31, 0x46, 0xe7, 0x15, 0xda, 0x8a, 0xa3,
	0x0c, 0xa4, 0x08, 0x55, 0x9c, 0x45, 0x89, 0xe8, 0xaf, 0x0d, 0x5b, 0xa3, 0x8d, 0x69, 0xbf, 0x2c,
	0xdc, 0x9b, 0x56, 0xbd, 0x42, 0x63, 0xb2, 0x69, 0xf1, 0xbe, 0x81, 0xce, 0x5b, 0xd4, 0x81, 0xf9,
	0x67, 0xc1, 0x74, 0x18, 0xf3, 0xfe, 0x7f, 0xc3, 0xd6, 0xa8, 0x33, 0x7d, 0x54, 0x16, 0x6e, 0xcf,
	0x5a, 0x97, 0x14, 0xfe, 0xfd, 0xcb, 0xbd, 0x81, 0xb6, 0x8f, 0x0e, 0xa8, 0x77, 0xb6, 0xe7, 0x7d,
	0x0c, 0x0f, 0xcf, 0x77, 0x1f, 0x4f, 0xc6, 0x17, 0x3b, 0x64, 0xc3, 0x4a, 0x66, 0xdc, 0x99, 0x21,
	0x74, 0x59, 0xef, 0x8c, 0xf7, 0xdb, 0x66, 0xd4, 0xc3, 0xb2, 0x70, 0xb7, 0xeb, 0x14, 0x4b, 0xae,
	0x9a, 0xd5, 0x43, 0xd7, 0x8e, 0x0e, 0x9e, 0x78, 0xcf, 0xa9, 0x77, 0x76, 0x78, 0xbe, 0x3b, 0xb9,
	0xd8, 0x21, 0x0d, 0x33, 0xfe, 0xd3, 0x42, 0xf7, 0xfe, 0x55, 0x99, 0xca, 0x21, 0x53, 0xe2, 0x83,
	0xa4, 0x79, 0x2e, 0xa4, 0x73, 0x1f, 0xb5, 0x19, 0x70, 0x5b, 0xdd, 0x7a, 0xb3, 0x9e, 0xea, 0x16,
	0x13, 0x43, 0x3a, 0xcf, 0x50, 0xb7, 0xfa, 0xbe, 0xf9, 0x9e, 0x27, 0x34, 0xce, 0x4c, 0x39, 0x9d,
	0xe9, 0xad, 0xb2, 0x70, 0x9d, 0x2b, 0x6d, 0x4d, 0x62, 0xd2, 0x94, 0x3a, 0x0f, 0xd0, 0xba, 0x90,
	0x12, 0x64, 0xdd, 0x4a, 0xaf, 0x2c, 0xdc, 0x4d, 0xeb, 0x31, 0xd7, 0x98, 0x58, 0xda, 0x79, 0x89,
	0xda, 0x9c, 0x6a, 0x6a, 0x5e, 0xdc, 0x1d, 0xdf, 0xf6, 0xed, 0x32, 0xf8, 0x97, 0xcb, 0xe0, 0xef,
	0x9b, 0x65, 0x68, 0xe6, 0xab, 0xe4, 0x98, 0x18, 0xd7, 0xfc, 0x7f, 0xa3, 0x9b, 0xfc, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0xac, 0xf2, 0x91, 0x41, 0x34, 0x03, 0x00, 0x00,
}
