// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package instance

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for instance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	AggregateCount(ctx context.Context, in *AggregateCountRequest) (*AggregateCountResponse, error)
	CreateInstance(ctx context.Context, in *CreateInstanceRequest) (*types.Struct, error)
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest) (*types.Struct, error)
	DeleteInstanceBatch(ctx context.Context, in *DeleteInstanceBatchRequest) (*DeleteInstanceBatchResponse, error)
	GetDefaultValueTemplate(ctx context.Context, in *GetDefaultValueTemplateRequest) (*types.Struct, error)
	GetDetail(ctx context.Context, in *GetDetailRequest) (*types.Struct, error)
	ImportInstance(ctx context.Context, in *ImportInstanceRequest) (*ImportInstanceResponse, error)
	PostSearch(ctx context.Context, in *PostSearchRequest) (*PostSearchResponse, error)
	SearchTotal(ctx context.Context, in *SearchTotalRequest) (*SearchTotalResponse, error)
	UpdateInstance(ctx context.Context, in *UpdateInstanceRequest) (*types.Struct, error)
	UpdatePermissionBatch(ctx context.Context, in *UpdatePermissionBatchRequest) (*UpdatePermissionBatchResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) AggregateCount(ctx context.Context, in *AggregateCountRequest) (*AggregateCountResponse, error) {
	out := new(AggregateCountResponse)
	err := c.c.Invoke(ctx, _AggregateCountContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateInstance(ctx context.Context, in *CreateInstanceRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _CreateInstanceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _DeleteInstanceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteInstanceBatch(ctx context.Context, in *DeleteInstanceBatchRequest) (*DeleteInstanceBatchResponse, error) {
	out := new(DeleteInstanceBatchResponse)
	err := c.c.Invoke(ctx, _DeleteInstanceBatchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetDefaultValueTemplate(ctx context.Context, in *GetDefaultValueTemplateRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _GetDefaultValueTemplateContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetDetail(ctx context.Context, in *GetDetailRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _GetDetailContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ImportInstance(ctx context.Context, in *ImportInstanceRequest) (*ImportInstanceResponse, error) {
	out := new(ImportInstanceResponse)
	err := c.c.Invoke(ctx, _ImportInstanceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) PostSearch(ctx context.Context, in *PostSearchRequest) (*PostSearchResponse, error) {
	out := new(PostSearchResponse)
	err := c.c.Invoke(ctx, _PostSearchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) SearchTotal(ctx context.Context, in *SearchTotalRequest) (*SearchTotalResponse, error) {
	out := new(SearchTotalResponse)
	err := c.c.Invoke(ctx, _SearchTotalContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateInstance(ctx context.Context, in *UpdateInstanceRequest) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _UpdateInstanceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePermissionBatch(ctx context.Context, in *UpdatePermissionBatchRequest) (*UpdatePermissionBatchResponse, error) {
	out := new(UpdatePermissionBatchResponse)
	err := c.c.Invoke(ctx, _UpdatePermissionBatchContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for instance service.
type Service interface {
	AggregateCount(context.Context, *AggregateCountRequest) (*AggregateCountResponse, error)
	CreateInstance(context.Context, *CreateInstanceRequest) (*types.Struct, error)
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*types.Struct, error)
	DeleteInstanceBatch(context.Context, *DeleteInstanceBatchRequest) (*DeleteInstanceBatchResponse, error)
	GetDefaultValueTemplate(context.Context, *GetDefaultValueTemplateRequest) (*types.Struct, error)
	GetDetail(context.Context, *GetDetailRequest) (*types.Struct, error)
	ImportInstance(context.Context, *ImportInstanceRequest) (*ImportInstanceResponse, error)
	PostSearch(context.Context, *PostSearchRequest) (*PostSearchResponse, error)
	SearchTotal(context.Context, *SearchTotalRequest) (*SearchTotalResponse, error)
	UpdateInstance(context.Context, *UpdateInstanceRequest) (*types.Struct, error)
	UpdatePermissionBatch(context.Context, *UpdatePermissionBatchRequest) (*UpdatePermissionBatchResponse, error)
}

func _AggregateCountEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AggregateCount(ctx, req.(*AggregateCountRequest))
	}
}

func _CreateInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
}

func _DeleteInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
}

func _DeleteInstanceBatchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteInstanceBatch(ctx, req.(*DeleteInstanceBatchRequest))
	}
}

func _GetDefaultValueTemplateEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetDefaultValueTemplate(ctx, req.(*GetDefaultValueTemplateRequest))
	}
}

func _GetDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetDetail(ctx, req.(*GetDetailRequest))
	}
}

func _ImportInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ImportInstance(ctx, req.(*ImportInstanceRequest))
	}
}

func _PostSearchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.PostSearch(ctx, req.(*PostSearchRequest))
	}
}

func _SearchTotalEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SearchTotal(ctx, req.(*SearchTotalRequest))
	}
}

func _UpdateInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateInstance(ctx, req.(*UpdateInstanceRequest))
	}
}

func _UpdatePermissionBatchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePermissionBatch(ctx, req.(*UpdatePermissionBatchRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_AggregateCountContract, _AggregateCountEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateInstanceContract, _CreateInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteInstanceContract, _DeleteInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteInstanceBatchContract, _DeleteInstanceBatchEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetDefaultValueTemplateContract, _GetDefaultValueTemplateEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetDetailContract, _GetDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_ImportInstanceContract, _ImportInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_PostSearchContract, _PostSearchEndpoint(srv))
	s.RegisterUnaryEndpoint(_SearchTotalContract, _SearchTotalEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateInstanceContract, _UpdateInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdatePermissionBatchContract, _UpdatePermissionBatchEndpoint(srv))
}

// API Contract
var _AggregateCountContract = &aggregateCountContract{}

type aggregateCountContract struct{}

func (*aggregateCountContract) ServiceName() string          { return "instance.rpc" }
func (*aggregateCountContract) MethodName() string           { return "AggregateCount" }
func (*aggregateCountContract) RequestMessage() interface{}  { return new(AggregateCountRequest) }
func (*aggregateCountContract) ResponseMessage() interface{} { return new(AggregateCountRequest) }
func (*aggregateCountContract) ContractName() string {
	return "easyops.api.cmdb.instance.AggregateCount"
}
func (*aggregateCountContract) ContractVersion() string { return "1.0" }
func (*aggregateCountContract) Pattern() (string, string) {
	return "GET", "/object/:objectId/instance/aggregate/count/:attrId"
}
func (*aggregateCountContract) Body() string { return "" }

var _CreateInstanceContract = &createInstanceContract{}

type createInstanceContract struct{}

func (*createInstanceContract) ServiceName() string          { return "instance.rpc" }
func (*createInstanceContract) MethodName() string           { return "CreateInstance" }
func (*createInstanceContract) RequestMessage() interface{}  { return new(CreateInstanceRequest) }
func (*createInstanceContract) ResponseMessage() interface{} { return new(CreateInstanceRequest) }
func (*createInstanceContract) ContractName() string {
	return "easyops.api.cmdb.instance.CreateInstance"
}
func (*createInstanceContract) ContractVersion() string { return "1.0" }
func (*createInstanceContract) Pattern() (string, string) {
	return "POST", "/v2/object/:objectId/instance"
}
func (*createInstanceContract) Body() string { return "instance" }

var _DeleteInstanceContract = &deleteInstanceContract{}

type deleteInstanceContract struct{}

func (*deleteInstanceContract) ServiceName() string          { return "instance.rpc" }
func (*deleteInstanceContract) MethodName() string           { return "DeleteInstance" }
func (*deleteInstanceContract) RequestMessage() interface{}  { return new(DeleteInstanceRequest) }
func (*deleteInstanceContract) ResponseMessage() interface{} { return new(DeleteInstanceRequest) }
func (*deleteInstanceContract) ContractName() string {
	return "easyops.api.cmdb.instance.DeleteInstance"
}
func (*deleteInstanceContract) ContractVersion() string { return "1.0" }
func (*deleteInstanceContract) Pattern() (string, string) {
	return "DELETE", "/object/:objectId/instance/:instanceId"
}
func (*deleteInstanceContract) Body() string { return "" }

var _DeleteInstanceBatchContract = &deleteInstanceBatchContract{}

type deleteInstanceBatchContract struct{}

func (*deleteInstanceBatchContract) ServiceName() string { return "instance.rpc" }
func (*deleteInstanceBatchContract) MethodName() string  { return "DeleteInstanceBatch" }
func (*deleteInstanceBatchContract) RequestMessage() interface{} {
	return new(DeleteInstanceBatchRequest)
}
func (*deleteInstanceBatchContract) ResponseMessage() interface{} {
	return new(DeleteInstanceBatchRequest)
}
func (*deleteInstanceBatchContract) ContractName() string {
	return "easyops.api.cmdb.instance.DeleteInstanceBatch"
}
func (*deleteInstanceBatchContract) ContractVersion() string { return "1.0" }
func (*deleteInstanceBatchContract) Pattern() (string, string) {
	return "DELETE", "/object/:objectId/instance/_batch"
}
func (*deleteInstanceBatchContract) Body() string { return "" }

var _GetDefaultValueTemplateContract = &getDefaultValueTemplateContract{}

type getDefaultValueTemplateContract struct{}

func (*getDefaultValueTemplateContract) ServiceName() string { return "instance.rpc" }
func (*getDefaultValueTemplateContract) MethodName() string  { return "GetDefaultValueTemplate" }
func (*getDefaultValueTemplateContract) RequestMessage() interface{} {
	return new(GetDefaultValueTemplateRequest)
}
func (*getDefaultValueTemplateContract) ResponseMessage() interface{} {
	return new(GetDefaultValueTemplateRequest)
}
func (*getDefaultValueTemplateContract) ContractName() string {
	return "easyops.api.cmdb.instance.GetDefaultValueTemplate"
}
func (*getDefaultValueTemplateContract) ContractVersion() string { return "1.0" }
func (*getDefaultValueTemplateContract) Pattern() (string, string) {
	return "GET", "/object/:objectId/instance_default_value_template"
}
func (*getDefaultValueTemplateContract) Body() string { return "" }

var _GetDetailContract = &getDetailContract{}

type getDetailContract struct{}

func (*getDetailContract) ServiceName() string          { return "instance.rpc" }
func (*getDetailContract) MethodName() string           { return "GetDetail" }
func (*getDetailContract) RequestMessage() interface{}  { return new(GetDetailRequest) }
func (*getDetailContract) ResponseMessage() interface{} { return new(GetDetailRequest) }
func (*getDetailContract) ContractName() string         { return "easyops.api.cmdb.instance.GetDetail" }
func (*getDetailContract) ContractVersion() string      { return "1.0" }
func (*getDetailContract) Pattern() (string, string) {
	return "GET", "/object/:objectId/instance/:instanceId"
}
func (*getDetailContract) Body() string { return "" }

var _ImportInstanceContract = &importInstanceContract{}

type importInstanceContract struct{}

func (*importInstanceContract) ServiceName() string          { return "instance.rpc" }
func (*importInstanceContract) MethodName() string           { return "ImportInstance" }
func (*importInstanceContract) RequestMessage() interface{}  { return new(ImportInstanceRequest) }
func (*importInstanceContract) ResponseMessage() interface{} { return new(ImportInstanceRequest) }
func (*importInstanceContract) ContractName() string {
	return "easyops.api.cmdb.instance.ImportInstance"
}
func (*importInstanceContract) ContractVersion() string { return "1.0" }
func (*importInstanceContract) Pattern() (string, string) {
	return "POST", "/object/:objectId/instance/_import"
}
func (*importInstanceContract) Body() string { return "" }

var _PostSearchContract = &postSearchContract{}

type postSearchContract struct{}

func (*postSearchContract) ServiceName() string          { return "instance.rpc" }
func (*postSearchContract) MethodName() string           { return "PostSearch" }
func (*postSearchContract) RequestMessage() interface{}  { return new(PostSearchRequest) }
func (*postSearchContract) ResponseMessage() interface{} { return new(PostSearchRequest) }
func (*postSearchContract) ContractName() string         { return "easyops.api.cmdb.instance.PostSearch" }
func (*postSearchContract) ContractVersion() string      { return "1.0" }
func (*postSearchContract) Pattern() (string, string) {
	return "POST", "/object/:objectId/instance/_search"
}
func (*postSearchContract) Body() string { return "" }

var _SearchTotalContract = &searchTotalContract{}

type searchTotalContract struct{}

func (*searchTotalContract) ServiceName() string          { return "instance.rpc" }
func (*searchTotalContract) MethodName() string           { return "SearchTotal" }
func (*searchTotalContract) RequestMessage() interface{}  { return new(SearchTotalRequest) }
func (*searchTotalContract) ResponseMessage() interface{} { return new(SearchTotalRequest) }
func (*searchTotalContract) ContractName() string         { return "easyops.api.cmdb.instance.SearchTotal" }
func (*searchTotalContract) ContractVersion() string      { return "1.0" }
func (*searchTotalContract) Pattern() (string, string) {
	return "POST", "/object/:objectId/instance/_search_total"
}
func (*searchTotalContract) Body() string { return "" }

var _UpdateInstanceContract = &updateInstanceContract{}

type updateInstanceContract struct{}

func (*updateInstanceContract) ServiceName() string          { return "instance.rpc" }
func (*updateInstanceContract) MethodName() string           { return "UpdateInstance" }
func (*updateInstanceContract) RequestMessage() interface{}  { return new(UpdateInstanceRequest) }
func (*updateInstanceContract) ResponseMessage() interface{} { return new(UpdateInstanceRequest) }
func (*updateInstanceContract) ContractName() string {
	return "easyops.api.cmdb.instance.UpdateInstance"
}
func (*updateInstanceContract) ContractVersion() string { return "1.0" }
func (*updateInstanceContract) Pattern() (string, string) {
	return "PUT", "/object/:objectId/instance/:instanceId"
}
func (*updateInstanceContract) Body() string { return "instance" }

var _UpdatePermissionBatchContract = &updatePermissionBatchContract{}

type updatePermissionBatchContract struct{}

func (*updatePermissionBatchContract) ServiceName() string { return "instance.rpc" }
func (*updatePermissionBatchContract) MethodName() string  { return "UpdatePermissionBatch" }
func (*updatePermissionBatchContract) RequestMessage() interface{} {
	return new(UpdatePermissionBatchRequest)
}
func (*updatePermissionBatchContract) ResponseMessage() interface{} {
	return new(UpdatePermissionBatchRequest)
}
func (*updatePermissionBatchContract) ContractName() string {
	return "easyops.api.cmdb.instance.UpdatePermissionBatch"
}
func (*updatePermissionBatchContract) ContractVersion() string { return "1.0" }
func (*updatePermissionBatchContract) Pattern() (string, string) {
	return "PUT", "/permission/:objectId/instances/_batch"
}
func (*updatePermissionBatchContract) Body() string { return "" }
