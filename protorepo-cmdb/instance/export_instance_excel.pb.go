// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: export_instance_excel.proto

package instance

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//ExportInstanceExcel请求
type ExportInstanceExcelRequest struct {
	//
	//模型对象ID
	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id" form:"object_id"`
	//
	//e.g.: { name: { $like: '%q%' } }, { $or: [{ name: { $like: '%q%' }}] }
	Query *types.Struct `protobuf:"bytes,2,opt,name=query,proto3" json:"query" form:"query"`
	//
	//e.g.: { instanceId: true, name: true }
	Fields *types.Struct `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields" form:"fields"`
	//
	//当为 true 时，只搜索与我相关实例
	OnlyMyInstance bool `protobuf:"varint,4,opt,name=only_my_instance,json=onlyMyInstance,proto3" json:"only_my_instance" form:"only_my_instance"`
	//
	//对于关联的实例数据是否只获取 relation_view 中指定的属性, 这个字段为 true 时, 会覆盖 fields 字段中指定的二级字段设置
	OnlyRelationView bool `protobuf:"varint,5,opt,name=only_relation_view,json=onlyRelationView,proto3" json:"only_relation_view" form:"only_relation_view"`
	//
	//按字段排序, 留空默认按照实例ID降序排序(1表示升序, -1表示降序) e.g.: { instanceId: 1 }
	Sort *types.Struct `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort" form:"sort"`
	//
	//按照权限过滤(通用实例都有 read, update, delete 权限控制, 主机实例在通用实例权限基础上有额外的 operate 权限, 应用实例在通用实例权限基础上有额外的 developClusterOperate, testClusterOperate, prereleaseClusterOperate, productionClusterOperate 权限) e.g.: [ "operate", "update" ]
	Permission           []string `protobuf:"bytes,7,rep,name=permission,proto3" json:"permission" form:"permission"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportInstanceExcelRequest) Reset()         { *m = ExportInstanceExcelRequest{} }
func (m *ExportInstanceExcelRequest) String() string { return proto.CompactTextString(m) }
func (*ExportInstanceExcelRequest) ProtoMessage()    {}
func (*ExportInstanceExcelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0296ef48bfcf5f9, []int{0}
}
func (m *ExportInstanceExcelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportInstanceExcelRequest.Unmarshal(m, b)
}
func (m *ExportInstanceExcelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportInstanceExcelRequest.Marshal(b, m, deterministic)
}
func (m *ExportInstanceExcelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportInstanceExcelRequest.Merge(m, src)
}
func (m *ExportInstanceExcelRequest) XXX_Size() int {
	return xxx_messageInfo_ExportInstanceExcelRequest.Size(m)
}
func (m *ExportInstanceExcelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportInstanceExcelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExportInstanceExcelRequest proto.InternalMessageInfo

func (m *ExportInstanceExcelRequest) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *ExportInstanceExcelRequest) GetQuery() *types.Struct {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExportInstanceExcelRequest) GetFields() *types.Struct {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ExportInstanceExcelRequest) GetOnlyMyInstance() bool {
	if m != nil {
		return m.OnlyMyInstance
	}
	return false
}

func (m *ExportInstanceExcelRequest) GetOnlyRelationView() bool {
	if m != nil {
		return m.OnlyRelationView
	}
	return false
}

func (m *ExportInstanceExcelRequest) GetSort() *types.Struct {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *ExportInstanceExcelRequest) GetPermission() []string {
	if m != nil {
		return m.Permission
	}
	return nil
}

func init() {
	proto.RegisterType((*ExportInstanceExcelRequest)(nil), "instance.ExportInstanceExcelRequest")
}

func init() { proto.RegisterFile("export_instance_excel.proto", fileDescriptor_b0296ef48bfcf5f9) }

var fileDescriptor_b0296ef48bfcf5f9 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x55, 0xd6, 0x95, 0xd6, 0xe3, 0x4f, 0x67, 0x09, 0x2d, 0xb4, 0x4c, 0xae, 0x2c, 0x2e,
	0x7a, 0x41, 0xd2, 0xc1, 0x04, 0x08, 0x84, 0x84, 0x88, 0xd4, 0x8b, 0x09, 0x71, 0x63, 0x10, 0x17,
	0x4c, 0x10, 0xa5, 0xa9, 0x1b, 0x0c, 0x49, 0x4e, 0x67, 0x3b, 0xeb, 0x02, 0x42, 0xe2, 0x49, 0x83,
	0xc4, 0x23, 0xe4, 0x09, 0x50, 0xed, 0xa4, 0x2b, 0xbb, 0xd8, 0xdd, 0xf1, 0xf9, 0x7e, 0xdf, 0x77,
	0xce, 0x49, 0xd0, 0x90, 0x5f, 0x2c, 0x41, 0xea, 0x40, 0x64, 0x4a, 0x87, 0x59, 0xc4, 0x03, 0x7e,
	0x11, 0xf1, 0xc4, 0x5b, 0x4a, 0xd0, 0x80, 0xbb, 0x4d, 0x77, 0xe0, 0xc6, 0x42, 0x7f, 0xcd, 0x67,
	0x5e, 0x04, 0xe9, 0x24, 0x86, 0x18, 0x26, 0x06, 0x98, 0xe5, 0x0b, 0xf3, 0x32, 0x0f, 0x53, 0x59,
	0xe3, 0xe0, 0xd9, 0x16, 0x9e, 0xae, 0x84, 0xfe, 0x0e, 0xab, 0x49, 0x0c, 0xae, 0x11, 0xdd, 0xf3,
	0x30, 0x11, 0xf3, 0x50, 0x83, 0x54, 0x93, 0x4d, 0x59, 0xfb, 0x1e, 0xc4, 0x00, 0x71, 0xc2, 0x2f,
	0xd3, 0x95, 0x96, 0x79, 0xa4, 0x6b, 0x75, 0x78, 0x55, 0xe5, 0xe9, 0x52, 0x17, 0x56, 0xa4, 0xbf,
	0xdb, 0x68, 0x30, 0x35, 0xb7, 0x9c, 0xd4, 0x4b, 0x4f, 0xd7, 0x97, 0x30, 0x7e, 0x96, 0x73, 0xa5,
	0xf1, 0x07, 0xd4, 0x83, 0xd9, 0x37, 0x1e, 0xe9, 0x40, 0xcc, 0x9d, 0xd6, 0xa8, 0x35, 0xee, 0xf9,
	0xcf, 0xab, 0x92, 0xf4, 0x17, 0x20, 0xd3, 0x97, 0x74, 0x23, 0xd1, 0xbf, 0x7f, 0x08, 0x41, 0x87,
	0x5f, 0x4e, 0x43, 0xf7, 0xc7, 0x1b, 0xf7, 0x53, 0xf0, 0xf9, 0xf4, 0xc8, 0x7d, 0xd1, 0xd4, 0x3f,
	0x8f, 0x1e, 0x1d, 0x3f, 0xfe, 0xf5, 0x90, 0x75, 0x2d, 0x7e, 0x32, 0xc7, 0xaf, 0xd1, 0xee, 0x59,
	0xce, 0x65, 0xe1, 0xdc, 0x18, 0xb5, 0xc6, 0x7b, 0x4f, 0x0e, 0x3c, 0xbb, 0xa1, 0xd7, 0x6c, 0xe8,
	0xbd, 0x37, 0xfb, 0xfb, 0xfd, 0xaa, 0x24, 0xb7, 0xec, 0x28, 0xc3, 0x53, 0x66, 0x7d, 0xd8, 0x47,
	0x9d, 0x85, 0xe0, 0xc9, 0x5c, 0x39, 0x3b, 0xd7, 0x27, 0xec, 0x57, 0x25, 0xb9, 0x6d, 0x13, 0xac,
	0x81, 0xb2, 0xda, 0x89, 0xa7, 0xa8, 0x0f, 0x59, 0x52, 0x04, 0x69, 0xb1, 0xf9, 0x8b, 0x4e, 0x7b,
	0xd4, 0x1a, 0x77, 0xfd, 0x61, 0x55, 0x92, 0x83, 0xfa, 0xc2, 0x2b, 0x04, 0x65, 0x77, 0xd6, 0xad,
	0x77, 0x45, 0xf3, 0xb5, 0xf0, 0x5b, 0x84, 0x0d, 0x24, 0x79, 0x12, 0x6a, 0x01, 0x59, 0x70, 0x2e,
	0xf8, 0xca, 0xd9, 0x35, 0x41, 0x87, 0x55, 0x49, 0xee, 0x6f, 0x05, 0xfd, 0xc7, 0x50, 0x66, 0xe6,
	0xb3, 0xba, 0xf7, 0x51, 0xf0, 0x15, 0x7e, 0x85, 0xda, 0x0a, 0xa4, 0x76, 0x3a, 0xd7, 0x5f, 0x75,
	0xb7, 0x2a, 0xc9, 0x9e, 0xcd, 0x5d, 0xe3, 0x94, 0x19, 0x17, 0x7e, 0x8a, 0xd0, 0x92, 0xcb, 0x54,
	0x28, 0x25, 0x20, 0x73, 0x6e, 0x8e, 0x76, 0xc6, 0x3d, 0xff, 0x5e, 0x55, 0x92, 0x7d, 0x8b, 0x5e,
	0x6a, 0x94, 0x6d, 0x81, 0xb3, 0x8e, 0x89, 0x3f, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x95, 0xb1,
	0xc4, 0x48, 0xd4, 0x02, 0x00, 0x00,
}
