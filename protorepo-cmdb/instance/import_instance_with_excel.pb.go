// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: import_instance_with_excel.proto

package instance

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//ImportInstanceWithExcel返回
type ImportInstanceWithExcelResponse struct {
	//
	//成功插入数量
	InsertCount int32 `protobuf:"varint,1,opt,name=insert_count,json=insertCount,proto3" json:"insert_count" form:"insert_count"`
	//
	//成功更新数量
	UpdateCount int32 `protobuf:"varint,2,opt,name=update_count,json=updateCount,proto3" json:"update_count" form:"update_count"`
	//
	//失败数量
	FailedCount int32 `protobuf:"varint,3,opt,name=failed_count,json=failedCount,proto3" json:"failed_count" form:"failed_count"`
	//
	//失败数据
	Data                 []*ImportInstanceWithExcelResponse_Data `protobuf:"bytes,4,rep,name=data,proto3" json:"data" form:"data"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ImportInstanceWithExcelResponse) Reset()         { *m = ImportInstanceWithExcelResponse{} }
func (m *ImportInstanceWithExcelResponse) String() string { return proto.CompactTextString(m) }
func (*ImportInstanceWithExcelResponse) ProtoMessage()    {}
func (*ImportInstanceWithExcelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abb72c9466afee5b, []int{0}
}
func (m *ImportInstanceWithExcelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportInstanceWithExcelResponse.Unmarshal(m, b)
}
func (m *ImportInstanceWithExcelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportInstanceWithExcelResponse.Marshal(b, m, deterministic)
}
func (m *ImportInstanceWithExcelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportInstanceWithExcelResponse.Merge(m, src)
}
func (m *ImportInstanceWithExcelResponse) XXX_Size() int {
	return xxx_messageInfo_ImportInstanceWithExcelResponse.Size(m)
}
func (m *ImportInstanceWithExcelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportInstanceWithExcelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportInstanceWithExcelResponse proto.InternalMessageInfo

func (m *ImportInstanceWithExcelResponse) GetInsertCount() int32 {
	if m != nil {
		return m.InsertCount
	}
	return 0
}

func (m *ImportInstanceWithExcelResponse) GetUpdateCount() int32 {
	if m != nil {
		return m.UpdateCount
	}
	return 0
}

func (m *ImportInstanceWithExcelResponse) GetFailedCount() int32 {
	if m != nil {
		return m.FailedCount
	}
	return 0
}

func (m *ImportInstanceWithExcelResponse) GetData() []*ImportInstanceWithExcelResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type ImportInstanceWithExcelResponse_Data struct {
	//
	//错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code" form:"code"`
	//
	//错误信息
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error" form:"error"`
	//
	//错误实例所在excel行数
	Line                 int32    `protobuf:"varint,3,opt,name=line,proto3" json:"line" form:"line"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportInstanceWithExcelResponse_Data) Reset()         { *m = ImportInstanceWithExcelResponse_Data{} }
func (m *ImportInstanceWithExcelResponse_Data) String() string { return proto.CompactTextString(m) }
func (*ImportInstanceWithExcelResponse_Data) ProtoMessage()    {}
func (*ImportInstanceWithExcelResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_abb72c9466afee5b, []int{0, 0}
}
func (m *ImportInstanceWithExcelResponse_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportInstanceWithExcelResponse_Data.Unmarshal(m, b)
}
func (m *ImportInstanceWithExcelResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportInstanceWithExcelResponse_Data.Marshal(b, m, deterministic)
}
func (m *ImportInstanceWithExcelResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportInstanceWithExcelResponse_Data.Merge(m, src)
}
func (m *ImportInstanceWithExcelResponse_Data) XXX_Size() int {
	return xxx_messageInfo_ImportInstanceWithExcelResponse_Data.Size(m)
}
func (m *ImportInstanceWithExcelResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportInstanceWithExcelResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_ImportInstanceWithExcelResponse_Data proto.InternalMessageInfo

func (m *ImportInstanceWithExcelResponse_Data) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ImportInstanceWithExcelResponse_Data) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ImportInstanceWithExcelResponse_Data) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

//
//ImportInstanceWithExcelApi返回
type ImportInstanceWithExcelResponseWrapper struct {
	//
	//返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code" form:"code"`
	//
	//返回码解释
	CodeExplain string `protobuf:"bytes,2,opt,name=codeExplain,proto3" json:"codeExplain" form:"codeExplain"`
	//
	//错误详情
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error" form:"error"`
	//
	//返回数据
	Data                 *ImportInstanceWithExcelResponse `protobuf:"bytes,4,opt,name=data,proto3" json:"data" form:"data"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ImportInstanceWithExcelResponseWrapper) Reset() {
	*m = ImportInstanceWithExcelResponseWrapper{}
}
func (m *ImportInstanceWithExcelResponseWrapper) String() string { return proto.CompactTextString(m) }
func (*ImportInstanceWithExcelResponseWrapper) ProtoMessage()    {}
func (*ImportInstanceWithExcelResponseWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_abb72c9466afee5b, []int{1}
}
func (m *ImportInstanceWithExcelResponseWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportInstanceWithExcelResponseWrapper.Unmarshal(m, b)
}
func (m *ImportInstanceWithExcelResponseWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportInstanceWithExcelResponseWrapper.Marshal(b, m, deterministic)
}
func (m *ImportInstanceWithExcelResponseWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportInstanceWithExcelResponseWrapper.Merge(m, src)
}
func (m *ImportInstanceWithExcelResponseWrapper) XXX_Size() int {
	return xxx_messageInfo_ImportInstanceWithExcelResponseWrapper.Size(m)
}
func (m *ImportInstanceWithExcelResponseWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportInstanceWithExcelResponseWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_ImportInstanceWithExcelResponseWrapper proto.InternalMessageInfo

func (m *ImportInstanceWithExcelResponseWrapper) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ImportInstanceWithExcelResponseWrapper) GetCodeExplain() string {
	if m != nil {
		return m.CodeExplain
	}
	return ""
}

func (m *ImportInstanceWithExcelResponseWrapper) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ImportInstanceWithExcelResponseWrapper) GetData() *ImportInstanceWithExcelResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ImportInstanceWithExcelResponse)(nil), "instance.ImportInstanceWithExcelResponse")
	proto.RegisterType((*ImportInstanceWithExcelResponse_Data)(nil), "instance.ImportInstanceWithExcelResponse.Data")
	proto.RegisterType((*ImportInstanceWithExcelResponseWrapper)(nil), "instance.ImportInstanceWithExcelResponseWrapper")
}

func init() { proto.RegisterFile("import_instance_with_excel.proto", fileDescriptor_abb72c9466afee5b) }

var fileDescriptor_abb72c9466afee5b = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x4e, 0xc2, 0x30,
	0x1c, 0xce, 0xdc, 0x30, 0xda, 0x91, 0x68, 0x66, 0xa2, 0x84, 0xcb, 0x48, 0x4d, 0x08, 0x1e, 0x1c,
	0x09, 0x5e, 0x0c, 0x47, 0x94, 0x03, 0x17, 0x0f, 0xf5, 0xc0, 0x71, 0x29, 0x5b, 0x81, 0x26, 0x63,
	0x6d, 0xba, 0x2e, 0xf2, 0x40, 0x3e, 0xd7, 0x1e, 0x62, 0x2f, 0xa0, 0xe9, 0x1f, 0x60, 0x21, 0x51,
	0x38, 0x6d, 0x5f, 0xbf, 0x3f, 0xfb, 0x7d, 0xbf, 0x0e, 0xf4, 0xe8, 0x86, 0x33, 0x21, 0x63, 0x9a,
	0x17, 0x12, 0xe7, 0x09, 0x89, 0xbf, 0xa8, 0x5c, 0xc7, 0x64, 0x9b, 0x90, 0x2c, 0xe2, 0x82, 0x49,
	0x16, 0x5c, 0xed, 0xa8, 0xee, 0xf3, 0x8a, 0xca, 0x75, 0xb9, 0x88, 0x12, 0xb6, 0x19, 0xae, 0xd8,
	0x8a, 0x0d, 0xb5, 0x60, 0x51, 0x2e, 0x35, 0xd2, 0x40, 0xbf, 0x19, 0x23, 0xfc, 0x76, 0x41, 0x38,
	0xd3, 0xe9, 0x33, 0x9b, 0x30, 0xa7, 0x72, 0x3d, 0x55, 0xd1, 0x88, 0x14, 0x9c, 0xe5, 0x05, 0x09,
	0xc6, 0xa0, 0x4d, 0xf3, 0x82, 0x08, 0x19, 0x27, 0xac, 0xcc, 0x65, 0xc7, 0xe9, 0x39, 0x83, 0xd6,
	0xe4, 0xa1, 0xae, 0xc2, 0xbb, 0x25, 0x13, 0x9b, 0x31, 0x6c, 0xb2, 0x10, 0xf9, 0x06, 0xbe, 0x29,
	0xa4, 0xbc, 0x25, 0x4f, 0xb1, 0x24, 0xd6, 0x7b, 0x71, 0xec, 0x6d, 0xb2, 0x10, 0xf9, 0x06, 0xee,
	0xbd, 0x4b, 0x4c, 0x33, 0x92, 0x5a, 0xaf, 0x7b, 0xec, 0x6d, 0xb2, 0x10, 0xf9, 0x06, 0x1a, 0xef,
	0x27, 0xf0, 0x52, 0x2c, 0x71, 0xc7, 0xeb, 0xb9, 0x03, 0x7f, 0x14, 0x45, 0xbb, 0xfd, 0x44, 0x27,
	0xca, 0x46, 0xef, 0x58, 0xe2, 0xc9, 0x4d, 0x5d, 0x85, 0xbe, 0xf9, 0x86, 0x4a, 0x81, 0x48, 0x87,
	0x75, 0xb7, 0xc0, 0x53, 0x74, 0xf0, 0x08, 0xbc, 0x84, 0xa5, 0xc4, 0x2e, 0xa2, 0x21, 0x56, 0xa7,
	0x10, 0x69, 0x32, 0xe8, 0x83, 0x16, 0x11, 0x82, 0x09, 0x5d, 0xf9, 0x7a, 0x72, 0x5b, 0x57, 0x61,
	0xdb, 0xa8, 0xf4, 0x31, 0x44, 0x86, 0x56, 0x61, 0x19, 0xcd, 0x89, 0x6d, 0xd7, 0x08, 0x53, 0xa7,
	0x10, 0x69, 0x12, 0xfe, 0x38, 0xa0, 0x7f, 0x62, 0xf2, 0xb9, 0xc0, 0x9c, 0x13, 0x71, 0xde, 0x70,
	0xaf, 0xc0, 0x57, 0xcf, 0xe9, 0x96, 0x67, 0x98, 0xe6, 0x76, 0xc4, 0xfb, 0xba, 0x0a, 0x83, 0x83,
	0xd6, 0x92, 0x10, 0x35, 0xa5, 0x87, 0x5a, 0xee, 0xff, 0xb5, 0x3e, 0xf6, 0x17, 0xe0, 0x0c, 0xfc,
	0xd1, 0xd3, 0xd9, 0x17, 0xf0, 0xc7, 0xee, 0x17, 0x97, 0xfa, 0x7f, 0x7d, 0xf9, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x2b, 0xb1, 0xda, 0xc6, 0x0c, 0x03, 0x00, 0x00,
}
