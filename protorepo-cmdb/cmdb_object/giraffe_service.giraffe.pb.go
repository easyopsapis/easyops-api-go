// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package cmdb_object

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	cmdb "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/cmdb"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for cmdb_object service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	GetDetail(ctx context.Context, in *GetDetailRequest) (*cmdb.CmdbObject, error)
	List(ctx context.Context, in *types.Empty) (*ListResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) GetDetail(ctx context.Context, in *GetDetailRequest) (*cmdb.CmdbObject, error) {
	out := new(cmdb.CmdbObject)
	err := c.c.Invoke(ctx, _GetDetailContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) List(ctx context.Context, in *types.Empty) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.c.Invoke(ctx, _ListContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for cmdb_object service.
type Service interface {
	GetDetail(context.Context, *GetDetailRequest) (*cmdb.CmdbObject, error)
	List(context.Context, *types.Empty) (*ListResponse, error)
}

func _GetDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetDetail(ctx, req.(*GetDetailRequest))
	}
}

func _ListEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx, req.(*types.Empty))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_GetDetailContract, _GetDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListContract, _ListEndpoint(srv))
}

// API Contract
var _GetDetailContract = &getDetailContract{}

type getDetailContract struct{}

func (*getDetailContract) ServiceName() string          { return "cmdb_object.rpc" }
func (*getDetailContract) MethodName() string           { return "GetDetail" }
func (*getDetailContract) RequestMessage() interface{}  { return new(GetDetailRequest) }
func (*getDetailContract) ResponseMessage() interface{} { return new(GetDetailRequest) }
func (*getDetailContract) ContractName() string         { return "easyops.api.cmdb.cmdb_object.GetDetail" }
func (*getDetailContract) ContractVersion() string      { return "1.0" }
func (*getDetailContract) Pattern() (string, string)    { return "GET", "/object/:objectId" }
func (*getDetailContract) Body() string                 { return "" }

var _ListContract = &listContract{}

type listContract struct{}

func (*listContract) ServiceName() string          { return "cmdb_object.rpc" }
func (*listContract) MethodName() string           { return "List" }
func (*listContract) RequestMessage() interface{}  { return new(types.Empty) }
func (*listContract) ResponseMessage() interface{} { return new(types.Empty) }
func (*listContract) ContractName() string         { return "easyops.api.cmdb.cmdb_object.List" }
func (*listContract) ContractVersion() string      { return "1.0" }
func (*listContract) Pattern() (string, string)    { return "GET", "/object" }
func (*listContract) Body() string                 { return "" }
