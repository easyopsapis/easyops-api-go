// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package job_task

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	ops_automation "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/ops_automation"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for job_task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	GetJobTasksDetail(ctx context.Context, in *GetJobTasksDetailRequest) (*ops_automation.JobTasks, error)
	JobTasksFlowCallback(ctx context.Context, in *JobTasksFlowCallbackRequest) (*JobTasksFlowCallbackResponse, error)
	JobTasksToolCallback(ctx context.Context, in *JobTasksToolCallbackRequest) (*JobTasksToolCallbackResponse, error)
	ListJobTasks(ctx context.Context, in *ListJobTasksRequest) (*ListJobTasksResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) GetJobTasksDetail(ctx context.Context, in *GetJobTasksDetailRequest) (*ops_automation.JobTasks, error) {
	out := new(ops_automation.JobTasks)
	err := c.c.Invoke(ctx, _GetJobTasksDetailMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) JobTasksFlowCallback(ctx context.Context, in *JobTasksFlowCallbackRequest) (*JobTasksFlowCallbackResponse, error) {
	out := new(JobTasksFlowCallbackResponse)
	err := c.c.Invoke(ctx, _JobTasksFlowCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) JobTasksToolCallback(ctx context.Context, in *JobTasksToolCallbackRequest) (*JobTasksToolCallbackResponse, error) {
	out := new(JobTasksToolCallbackResponse)
	err := c.c.Invoke(ctx, _JobTasksToolCallbackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListJobTasks(ctx context.Context, in *ListJobTasksRequest) (*ListJobTasksResponse, error) {
	out := new(ListJobTasksResponse)
	err := c.c.Invoke(ctx, _ListJobTasksMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for job_task service.
type Service interface {
	GetJobTasksDetail(context.Context, *GetJobTasksDetailRequest) (*ops_automation.JobTasks, error)
	JobTasksFlowCallback(context.Context, *JobTasksFlowCallbackRequest) (*JobTasksFlowCallbackResponse, error)
	JobTasksToolCallback(context.Context, *JobTasksToolCallbackRequest) (*JobTasksToolCallbackResponse, error)
	ListJobTasks(context.Context, *ListJobTasksRequest) (*ListJobTasksResponse, error)
}

func _GetJobTasksDetailEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetJobTasksDetail(ctx, req.(*GetJobTasksDetailRequest))
	}
}

func _JobTasksFlowCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.JobTasksFlowCallback(ctx, req.(*JobTasksFlowCallbackRequest))
	}
}

func _JobTasksToolCallbackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.JobTasksToolCallback(ctx, req.(*JobTasksToolCallbackRequest))
	}
}

func _ListJobTasksEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListJobTasks(ctx, req.(*ListJobTasksRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_GetJobTasksDetailMethodDesc, _GetJobTasksDetailEndpoint(srv))
	s.RegisterUnaryEndpoint(_JobTasksFlowCallbackMethodDesc, _JobTasksFlowCallbackEndpoint(srv))
	s.RegisterUnaryEndpoint(_JobTasksToolCallbackMethodDesc, _JobTasksToolCallbackEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListJobTasksMethodDesc, _ListJobTasksEndpoint(srv))
}

// Method Description
var _GetJobTasksDetailMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.job_task.GetJobTasksDetail",
		Version: "1.0",
	},
	ServiceName:  "job_task.rpc",
	MethodName:   "GetJobTasksDetail",
	RequestType:  (*GetJobTasksDetailRequest)(nil),
	ResponseType: (*ops_automation.JobTasks)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/ops_automation/v1/jobTasks/:jobTaskId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _JobTasksFlowCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.job_task.JobTasksFlowCallback",
		Version: "1.0",
	},
	ServiceName:  "job_task.rpc",
	MethodName:   "JobTasksFlowCallback",
	RequestType:  (*JobTasksFlowCallbackRequest)(nil),
	ResponseType: (*JobTasksFlowCallbackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/ops_automation/v1/jobTasks/flow/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _JobTasksToolCallbackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.job_task.JobTasksToolCallback",
		Version: "1.0",
	},
	ServiceName:  "job_task.rpc",
	MethodName:   "JobTasksToolCallback",
	RequestType:  (*JobTasksToolCallbackRequest)(nil),
	ResponseType: (*JobTasksToolCallbackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/ops_automation/v1/jobTasks/tool/callback",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListJobTasksMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.job_task.ListJobTasks",
		Version: "1.0",
	},
	ServiceName:  "job_task.rpc",
	MethodName:   "ListJobTasks",
	RequestType:  (*ListJobTasksRequest)(nil),
	ResponseType: (*ListJobTasksResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/ops_automation/v1/jobTasks",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
