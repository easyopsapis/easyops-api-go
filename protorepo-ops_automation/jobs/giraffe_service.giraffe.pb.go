// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package jobs

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	ops_automation "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/ops_automation"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for jobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateJobsExcution(ctx context.Context, in *CreateJobsExcutionRequest) (*CreateJobsExcutionResponse, error)
	CreateJobs(ctx context.Context, in *ops_automation.Jobs) (*CreateJobsResponse, error)
	DeleteJobs(ctx context.Context, in *DeleteJobsRequest) (*DeleteJobsResponse, error)
	GetJobs(ctx context.Context, in *GetJobsRequest) (*ops_automation.JobDetails, error)
	GetJobChangeLog(ctx context.Context, in *GetJobChangeLogRequest) (*GetJobChangeLogResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest) (*ListJobsResponse, error)
	UpdateJobs(ctx context.Context, in *UpdateJobsRequest) (*UpdateJobsResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateJobsExcution(ctx context.Context, in *CreateJobsExcutionRequest) (*CreateJobsExcutionResponse, error) {
	out := new(CreateJobsExcutionResponse)
	err := c.c.Invoke(ctx, _CreateJobsExcutionContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateJobs(ctx context.Context, in *ops_automation.Jobs) (*CreateJobsResponse, error) {
	out := new(CreateJobsResponse)
	err := c.c.Invoke(ctx, _CreateJobsContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteJobs(ctx context.Context, in *DeleteJobsRequest) (*DeleteJobsResponse, error) {
	out := new(DeleteJobsResponse)
	err := c.c.Invoke(ctx, _DeleteJobsContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetJobs(ctx context.Context, in *GetJobsRequest) (*ops_automation.JobDetails, error) {
	out := new(ops_automation.JobDetails)
	err := c.c.Invoke(ctx, _GetJobsContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetJobChangeLog(ctx context.Context, in *GetJobChangeLogRequest) (*GetJobChangeLogResponse, error) {
	out := new(GetJobChangeLogResponse)
	err := c.c.Invoke(ctx, _GetJobChangeLogContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListJobs(ctx context.Context, in *ListJobsRequest) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.c.Invoke(ctx, _ListJobsContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateJobs(ctx context.Context, in *UpdateJobsRequest) (*UpdateJobsResponse, error) {
	out := new(UpdateJobsResponse)
	err := c.c.Invoke(ctx, _UpdateJobsContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for jobs service.
type Service interface {
	CreateJobsExcution(context.Context, *CreateJobsExcutionRequest) (*CreateJobsExcutionResponse, error)
	CreateJobs(context.Context, *ops_automation.Jobs) (*CreateJobsResponse, error)
	DeleteJobs(context.Context, *DeleteJobsRequest) (*DeleteJobsResponse, error)
	GetJobs(context.Context, *GetJobsRequest) (*ops_automation.JobDetails, error)
	GetJobChangeLog(context.Context, *GetJobChangeLogRequest) (*GetJobChangeLogResponse, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	UpdateJobs(context.Context, *UpdateJobsRequest) (*UpdateJobsResponse, error)
}

func _CreateJobsExcutionEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateJobsExcution(ctx, req.(*CreateJobsExcutionRequest))
	}
}

func _CreateJobsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateJobs(ctx, req.(*ops_automation.Jobs))
	}
}

func _DeleteJobsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteJobs(ctx, req.(*DeleteJobsRequest))
	}
}

func _GetJobsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetJobs(ctx, req.(*GetJobsRequest))
	}
}

func _GetJobChangeLogEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetJobChangeLog(ctx, req.(*GetJobChangeLogRequest))
	}
}

func _ListJobsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListJobs(ctx, req.(*ListJobsRequest))
	}
}

func _UpdateJobsEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateJobs(ctx, req.(*UpdateJobsRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateJobsExcutionContract, _CreateJobsExcutionEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateJobsContract, _CreateJobsEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteJobsContract, _DeleteJobsEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetJobsContract, _GetJobsEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetJobChangeLogContract, _GetJobChangeLogEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListJobsContract, _ListJobsEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateJobsContract, _UpdateJobsEndpoint(srv))
}

// API Contract
var _CreateJobsExcutionContract = &createJobsExcutionContract{}

type createJobsExcutionContract struct{}

func (*createJobsExcutionContract) ServiceName() string         { return "jobs.rpc" }
func (*createJobsExcutionContract) MethodName() string          { return "CreateJobsExcution" }
func (*createJobsExcutionContract) RequestMessage() interface{} { return new(CreateJobsExcutionRequest) }
func (*createJobsExcutionContract) ResponseMessage() interface{} {
	return new(CreateJobsExcutionRequest)
}
func (*createJobsExcutionContract) ContractName() string {
	return "easyops.api.ops_automation.jobs.CreateJobsExcution"
}
func (*createJobsExcutionContract) ContractVersion() string   { return "1.0" }
func (*createJobsExcutionContract) Pattern() (string, string) { return "POST", "/jobs/execution" }
func (*createJobsExcutionContract) Body() string              { return "" }

var _CreateJobsContract = &createJobsContract{}

type createJobsContract struct{}

func (*createJobsContract) ServiceName() string          { return "jobs.rpc" }
func (*createJobsContract) MethodName() string           { return "CreateJobs" }
func (*createJobsContract) RequestMessage() interface{}  { return new(ops_automation.Jobs) }
func (*createJobsContract) ResponseMessage() interface{} { return new(ops_automation.Jobs) }
func (*createJobsContract) ContractName() string         { return "easyops.api.ops_automation.jobs.CreateJobs" }
func (*createJobsContract) ContractVersion() string      { return "1.0" }
func (*createJobsContract) Pattern() (string, string)    { return "POST", "/jobs" }
func (*createJobsContract) Body() string                 { return "" }

var _DeleteJobsContract = &deleteJobsContract{}

type deleteJobsContract struct{}

func (*deleteJobsContract) ServiceName() string          { return "jobs.rpc" }
func (*deleteJobsContract) MethodName() string           { return "DeleteJobs" }
func (*deleteJobsContract) RequestMessage() interface{}  { return new(DeleteJobsRequest) }
func (*deleteJobsContract) ResponseMessage() interface{} { return new(DeleteJobsRequest) }
func (*deleteJobsContract) ContractName() string         { return "easyops.api.ops_automation.jobs.DeleteJobs" }
func (*deleteJobsContract) ContractVersion() string      { return "1.0" }
func (*deleteJobsContract) Pattern() (string, string)    { return "DELETE", "/jobs/:jobId" }
func (*deleteJobsContract) Body() string                 { return "" }

var _GetJobsContract = &getJobsContract{}

type getJobsContract struct{}

func (*getJobsContract) ServiceName() string          { return "jobs.rpc" }
func (*getJobsContract) MethodName() string           { return "GetJobs" }
func (*getJobsContract) RequestMessage() interface{}  { return new(GetJobsRequest) }
func (*getJobsContract) ResponseMessage() interface{} { return new(GetJobsRequest) }
func (*getJobsContract) ContractName() string         { return "easyops.api.ops_automation.jobs.GetJobs" }
func (*getJobsContract) ContractVersion() string      { return "1.0" }
func (*getJobsContract) Pattern() (string, string)    { return "GET", "/jobs/:jobId" }
func (*getJobsContract) Body() string                 { return "" }

var _GetJobChangeLogContract = &getJobChangeLogContract{}

type getJobChangeLogContract struct{}

func (*getJobChangeLogContract) ServiceName() string          { return "jobs.rpc" }
func (*getJobChangeLogContract) MethodName() string           { return "GetJobChangeLog" }
func (*getJobChangeLogContract) RequestMessage() interface{}  { return new(GetJobChangeLogRequest) }
func (*getJobChangeLogContract) ResponseMessage() interface{} { return new(GetJobChangeLogRequest) }
func (*getJobChangeLogContract) ContractName() string {
	return "easyops.api.ops_automation.jobs.GetJobChangeLog"
}
func (*getJobChangeLogContract) ContractVersion() string   { return "1.0" }
func (*getJobChangeLogContract) Pattern() (string, string) { return "GET", "/jobs/@jobId/changeLog" }
func (*getJobChangeLogContract) Body() string              { return "" }

var _ListJobsContract = &listJobsContract{}

type listJobsContract struct{}

func (*listJobsContract) ServiceName() string          { return "jobs.rpc" }
func (*listJobsContract) MethodName() string           { return "ListJobs" }
func (*listJobsContract) RequestMessage() interface{}  { return new(ListJobsRequest) }
func (*listJobsContract) ResponseMessage() interface{} { return new(ListJobsRequest) }
func (*listJobsContract) ContractName() string         { return "easyops.api.ops_automation.jobs.ListJobs" }
func (*listJobsContract) ContractVersion() string      { return "1.0" }
func (*listJobsContract) Pattern() (string, string)    { return "GET", "/jobs" }
func (*listJobsContract) Body() string                 { return "" }

var _UpdateJobsContract = &updateJobsContract{}

type updateJobsContract struct{}

func (*updateJobsContract) ServiceName() string          { return "jobs.rpc" }
func (*updateJobsContract) MethodName() string           { return "UpdateJobs" }
func (*updateJobsContract) RequestMessage() interface{}  { return new(UpdateJobsRequest) }
func (*updateJobsContract) ResponseMessage() interface{} { return new(UpdateJobsRequest) }
func (*updateJobsContract) ContractName() string         { return "easyops.api.ops_automation.jobs.UpdateJobs" }
func (*updateJobsContract) ContractVersion() string      { return "1.0" }
func (*updateJobsContract) Pattern() (string, string)    { return "PUT", "/jobs/:jobId" }
func (*updateJobsContract) Body() string                 { return "" }
