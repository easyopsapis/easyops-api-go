// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package menu

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	ops_automation "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/ops_automation"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for menu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateMenu(ctx context.Context, in *ops_automation.Menu) (*CreateMenuResponse, error)
	CreateMenuTree(ctx context.Context, in *CreateMenuTreeRequest) (*CreateMenuTreeResponse, error)
	DeleteMenu(ctx context.Context, in *DeleteMenuRequest) (*DeleteMenuResponse, error)
	GetMenu(ctx context.Context, in *GetMenuRequest) (*GetMenuResponse, error)
	GetMenuTree(ctx context.Context, in *types.Empty) (*types.Struct, error)
	ListMenus(ctx context.Context, in *ListMenusRequest) (*ListMenusResponse, error)
	UpdateMenu(ctx context.Context, in *ops_automation.Menu) (*UpdateMenuResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateMenu(ctx context.Context, in *ops_automation.Menu) (*CreateMenuResponse, error) {
	out := new(CreateMenuResponse)
	err := c.c.Invoke(ctx, _CreateMenuMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateMenuTree(ctx context.Context, in *CreateMenuTreeRequest) (*CreateMenuTreeResponse, error) {
	out := new(CreateMenuTreeResponse)
	err := c.c.Invoke(ctx, _CreateMenuTreeMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteMenu(ctx context.Context, in *DeleteMenuRequest) (*DeleteMenuResponse, error) {
	out := new(DeleteMenuResponse)
	err := c.c.Invoke(ctx, _DeleteMenuMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetMenu(ctx context.Context, in *GetMenuRequest) (*GetMenuResponse, error) {
	out := new(GetMenuResponse)
	err := c.c.Invoke(ctx, _GetMenuMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetMenuTree(ctx context.Context, in *types.Empty) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _GetMenuTreeMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMenus(ctx context.Context, in *ListMenusRequest) (*ListMenusResponse, error) {
	out := new(ListMenusResponse)
	err := c.c.Invoke(ctx, _ListMenusMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateMenu(ctx context.Context, in *ops_automation.Menu) (*UpdateMenuResponse, error) {
	out := new(UpdateMenuResponse)
	err := c.c.Invoke(ctx, _UpdateMenuMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for menu service.
type Service interface {
	CreateMenu(context.Context, *ops_automation.Menu) (*CreateMenuResponse, error)
	CreateMenuTree(context.Context, *CreateMenuTreeRequest) (*CreateMenuTreeResponse, error)
	DeleteMenu(context.Context, *DeleteMenuRequest) (*DeleteMenuResponse, error)
	GetMenu(context.Context, *GetMenuRequest) (*GetMenuResponse, error)
	GetMenuTree(context.Context, *types.Empty) (*types.Struct, error)
	ListMenus(context.Context, *ListMenusRequest) (*ListMenusResponse, error)
	UpdateMenu(context.Context, *ops_automation.Menu) (*UpdateMenuResponse, error)
}

func _CreateMenuEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateMenu(ctx, req.(*ops_automation.Menu))
	}
}

func _CreateMenuTreeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateMenuTree(ctx, req.(*CreateMenuTreeRequest))
	}
}

func _DeleteMenuEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteMenu(ctx, req.(*DeleteMenuRequest))
	}
}

func _GetMenuEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetMenu(ctx, req.(*GetMenuRequest))
	}
}

func _GetMenuTreeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetMenuTree(ctx, req.(*types.Empty))
	}
}

func _ListMenusEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListMenus(ctx, req.(*ListMenusRequest))
	}
}

func _UpdateMenuEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateMenu(ctx, req.(*ops_automation.Menu))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateMenuMethodDesc, _CreateMenuEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateMenuTreeMethodDesc, _CreateMenuTreeEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteMenuMethodDesc, _DeleteMenuEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetMenuMethodDesc, _GetMenuEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetMenuTreeMethodDesc, _GetMenuTreeEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListMenusMethodDesc, _ListMenusEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateMenuMethodDesc, _UpdateMenuEndpoint(srv))
}

// Method Description
var _CreateMenuMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.menu.CreateMenu",
		Version: "1.0",
	},
	ServiceName:  "menu.rpc",
	MethodName:   "CreateMenu",
	RequestType:  (*ops_automation.Menu)(nil),
	ResponseType: (*CreateMenuResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/ops_automation/v1/menus",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _CreateMenuTreeMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.menu.CreateMenuTree",
		Version: "1.0",
	},
	ServiceName:  "menu.rpc",
	MethodName:   "CreateMenuTree",
	RequestType:  (*CreateMenuTreeRequest)(nil),
	ResponseType: (*CreateMenuTreeResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/ops_automation/v1/menuTree",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteMenuMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.menu.DeleteMenu",
		Version: "1.0",
	},
	ServiceName:  "menu.rpc",
	MethodName:   "DeleteMenu",
	RequestType:  (*DeleteMenuRequest)(nil),
	ResponseType: (*DeleteMenuResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/ops_automation/v1/menus/:menusId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetMenuMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.menu.GetMenu",
		Version: "1.0",
	},
	ServiceName:  "menu.rpc",
	MethodName:   "GetMenu",
	RequestType:  (*GetMenuRequest)(nil),
	ResponseType: (*GetMenuResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/ops_automation/v1/menus/:menusId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetMenuTreeMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.menu.GetMenuTree",
		Version: "1.0",
	},
	ServiceName:  "menu.rpc",
	MethodName:   "GetMenuTree",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*types.Struct)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/ops_automation/v1/menuTree",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListMenusMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.menu.ListMenus",
		Version: "1.0",
	},
	ServiceName:  "menu.rpc",
	MethodName:   "ListMenus",
	RequestType:  (*ListMenusRequest)(nil),
	ResponseType: (*ListMenusResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/ops_automation/v1/menus",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateMenuMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.ops_automation.menu.UpdateMenu",
		Version: "1.0",
	},
	ServiceName:  "menu.rpc",
	MethodName:   "UpdateMenu",
	RequestType:  (*ops_automation.Menu)(nil),
	ResponseType: (*UpdateMenuResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/ops_automation/v1/menus/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
