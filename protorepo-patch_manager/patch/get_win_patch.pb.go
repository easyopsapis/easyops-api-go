// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: get_win_patch.proto

package patch

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	patch_manager "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/patch_manager"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//GetWinPatch请求
type GetWinPatchRequest struct {
	//
	//补丁id
	PatchId              string   `protobuf:"bytes,1,opt,name=patchId,proto3" json:"patchId" form:"patchId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWinPatchRequest) Reset()         { *m = GetWinPatchRequest{} }
func (m *GetWinPatchRequest) String() string { return proto.CompactTextString(m) }
func (*GetWinPatchRequest) ProtoMessage()    {}
func (*GetWinPatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a9de1b82821b87, []int{0}
}
func (m *GetWinPatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWinPatchRequest.Unmarshal(m, b)
}
func (m *GetWinPatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWinPatchRequest.Marshal(b, m, deterministic)
}
func (m *GetWinPatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWinPatchRequest.Merge(m, src)
}
func (m *GetWinPatchRequest) XXX_Size() int {
	return xxx_messageInfo_GetWinPatchRequest.Size(m)
}
func (m *GetWinPatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWinPatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWinPatchRequest proto.InternalMessageInfo

func (m *GetWinPatchRequest) GetPatchId() string {
	if m != nil {
		return m.PatchId
	}
	return ""
}

//
//GetWinPatch返回
type GetWinPatchResponse struct {
	//
	//依赖补丁列表
	PRE_PATCH []*patch_manager.WinPatch `protobuf:"bytes,1,rep,name=PRE_PATCH,json=PREPATCH,proto3" json:"PRE_PATCH" form:"PRE_PATCH"`
	//
	//补丁编号
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	//
	//发布时间
	ReleaseTime string `protobuf:"bytes,3,opt,name=releaseTime,proto3" json:"releaseTime" form:"releaseTime"`
	//
	//适用系统
	OsSystem string `protobuf:"bytes,4,opt,name=osSystem,proto3" json:"osSystem" form:"osSystem"`
	//
	//是否需要重启
	RequireReboot bool `protobuf:"varint,5,opt,name=requireReboot,proto3" json:"requireReboot" form:"requireReboot"`
	//
	//MSRC编号
	Msrc string `protobuf:"bytes,6,opt,name=msrc,proto3" json:"msrc" form:"msrc"`
	//
	//操作系统架构
	OsArchitecture string `protobuf:"bytes,7,opt,name=osArchitecture,proto3" json:"osArchitecture" form:"osArchitecture"`
	//
	//补丁大小,单位KB
	Size_ int32 `protobuf:"varint,8,opt,name=size,proto3" json:"size" form:"size"`
	//
	//说明
	Desc string `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc" form:"desc"`
	//
	//补丁下载链接
	Url                  string   `protobuf:"bytes,10,opt,name=url,proto3" json:"url" form:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWinPatchResponse) Reset()         { *m = GetWinPatchResponse{} }
func (m *GetWinPatchResponse) String() string { return proto.CompactTextString(m) }
func (*GetWinPatchResponse) ProtoMessage()    {}
func (*GetWinPatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a9de1b82821b87, []int{1}
}
func (m *GetWinPatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWinPatchResponse.Unmarshal(m, b)
}
func (m *GetWinPatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWinPatchResponse.Marshal(b, m, deterministic)
}
func (m *GetWinPatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWinPatchResponse.Merge(m, src)
}
func (m *GetWinPatchResponse) XXX_Size() int {
	return xxx_messageInfo_GetWinPatchResponse.Size(m)
}
func (m *GetWinPatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWinPatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWinPatchResponse proto.InternalMessageInfo

func (m *GetWinPatchResponse) GetPRE_PATCH() []*patch_manager.WinPatch {
	if m != nil {
		return m.PRE_PATCH
	}
	return nil
}

func (m *GetWinPatchResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetWinPatchResponse) GetReleaseTime() string {
	if m != nil {
		return m.ReleaseTime
	}
	return ""
}

func (m *GetWinPatchResponse) GetOsSystem() string {
	if m != nil {
		return m.OsSystem
	}
	return ""
}

func (m *GetWinPatchResponse) GetRequireReboot() bool {
	if m != nil {
		return m.RequireReboot
	}
	return false
}

func (m *GetWinPatchResponse) GetMsrc() string {
	if m != nil {
		return m.Msrc
	}
	return ""
}

func (m *GetWinPatchResponse) GetOsArchitecture() string {
	if m != nil {
		return m.OsArchitecture
	}
	return ""
}

func (m *GetWinPatchResponse) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *GetWinPatchResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *GetWinPatchResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

//
//GetWinPatchApi返回
type GetWinPatchResponseWrapper struct {
	//
	//返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code" form:"code"`
	//
	//返回码解释
	CodeExplain string `protobuf:"bytes,2,opt,name=codeExplain,proto3" json:"codeExplain" form:"codeExplain"`
	//
	//错误详情
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error" form:"error"`
	//
	//返回数据
	Data                 *GetWinPatchResponse `protobuf:"bytes,4,opt,name=data,proto3" json:"data" form:"data"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetWinPatchResponseWrapper) Reset()         { *m = GetWinPatchResponseWrapper{} }
func (m *GetWinPatchResponseWrapper) String() string { return proto.CompactTextString(m) }
func (*GetWinPatchResponseWrapper) ProtoMessage()    {}
func (*GetWinPatchResponseWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a9de1b82821b87, []int{2}
}
func (m *GetWinPatchResponseWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWinPatchResponseWrapper.Unmarshal(m, b)
}
func (m *GetWinPatchResponseWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWinPatchResponseWrapper.Marshal(b, m, deterministic)
}
func (m *GetWinPatchResponseWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWinPatchResponseWrapper.Merge(m, src)
}
func (m *GetWinPatchResponseWrapper) XXX_Size() int {
	return xxx_messageInfo_GetWinPatchResponseWrapper.Size(m)
}
func (m *GetWinPatchResponseWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWinPatchResponseWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_GetWinPatchResponseWrapper proto.InternalMessageInfo

func (m *GetWinPatchResponseWrapper) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetWinPatchResponseWrapper) GetCodeExplain() string {
	if m != nil {
		return m.CodeExplain
	}
	return ""
}

func (m *GetWinPatchResponseWrapper) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetWinPatchResponseWrapper) GetData() *GetWinPatchResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GetWinPatchRequest)(nil), "patch.GetWinPatchRequest")
	proto.RegisterType((*GetWinPatchResponse)(nil), "patch.GetWinPatchResponse")
	proto.RegisterType((*GetWinPatchResponseWrapper)(nil), "patch.GetWinPatchResponseWrapper")
}

func init() { proto.RegisterFile("get_win_patch.proto", fileDescriptor_49a9de1b82821b87) }

var fileDescriptor_49a9de1b82821b87 = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x15, 0xb6, 0x6e, 0x9d, 0x0b, 0xdd, 0x94, 0x0d, 0x08, 0xbd, 0x49, 0x65, 0xa6, 0x29,
	0x65, 0x4a, 0xd2, 0x0f, 0x40, 0xac, 0x17, 0x94, 0x0d, 0x4d, 0x7c, 0x5c, 0x55, 0x66, 0x62, 0x12,
	0xa1, 0xab, 0xdc, 0xd4, 0xeb, 0x22, 0x92, 0x3a, 0x73, 0x5c, 0xc6, 0xb6, 0xee, 0x85, 0x90, 0x78,
	0x00, 0xde, 0x80, 0xa7, 0x08, 0x12, 0xe2, 0x8e, 0xbb, 0x3c, 0x01, 0xb2, 0xd3, 0x6e, 0x69, 0xb5,
	0x2b, 0xfb, 0x9c, 0xdf, 0xff, 0x6f, 0x9f, 0x63, 0x3b, 0x01, 0xeb, 0x03, 0xc2, 0xbb, 0x67, 0xde,
	0xb0, 0x1b, 0x62, 0xee, 0x9e, 0x58, 0x21, 0xa3, 0x9c, 0xaa, 0x39, 0x19, 0x94, 0xcc, 0x81, 0xc7,
	0x4f, 0x46, 0x3d, 0xcb, 0xa5, 0x81, 0x3d, 0xa0, 0x03, 0x6a, 0x4b, 0xda, 0x1b, 0x1d, 0xcb, 0x48,
	0x06, 0x72, 0x96, 0xba, 0x4a, 0x87, 0x03, 0x6a, 0x11, 0x1c, 0x9d, 0xd3, 0x30, 0xb2, 0x7c, 0xea,
	0x62, 0xdf, 0x76, 0xe9, 0x90, 0x33, 0xec, 0xf2, 0x28, 0x75, 0x32, 0x12, 0x52, 0x33, 0xa0, 0x7d,
	0xe2, 0x47, 0xf6, 0x44, 0x68, 0xcb, 0xd0, 0x96, 0xfb, 0x75, 0x03, 0x3c, 0xc4, 0x03, 0xc2, 0xec,
	0xb9, 0x72, 0x4a, 0xcf, 0x33, 0x75, 0x04, 0x67, 0x1e, 0xff, 0x42, 0xcf, 0xec, 0x01, 0x35, 0x25,
	0x34, 0xbf, 0x62, 0xdf, 0xeb, 0x63, 0x4e, 0x59, 0x64, 0x5f, 0x4f, 0x53, 0x1f, 0xfc, 0x08, 0xd4,
	0x37, 0x84, 0x1f, 0x7a, 0xc3, 0xb6, 0x58, 0x0c, 0x91, 0xd3, 0x11, 0x89, 0xb8, 0xfa, 0x0a, 0x2c,
	0xcb, 0xc5, 0xdf, 0xf5, 0x35, 0xa5, 0xac, 0x18, 0x2b, 0x7b, 0x5b, 0x49, 0xac, 0x17, 0x8f, 0x29,
	0x0b, 0x9a, 0x70, 0x02, 0xe0, 0x9f, 0xdf, 0xfa, 0x1a, 0x28, 0x1e, 0x39, 0x55, 0x73, 0x07, 0x9b,
	0x17, 0x9d, 0xcb, 0x5a, 0xe3, 0x6a, 0x13, 0x4d, 0x6d, 0xf0, 0x67, 0x0e, 0xac, 0xcf, 0x2c, 0x1c,
	0x85, 0x74, 0x18, 0x11, 0xf5, 0x3d, 0x58, 0x69, 0xa3, 0xfd, 0x6e, 0x7b, 0xf7, 0xe0, 0xf5, 0x5b,
	0x4d, 0x29, 0x2f, 0x18, 0x85, 0xfa, 0x43, 0x6b, 0xa6, 0x35, 0x6b, 0xea, 0xd9, 0xdb, 0x48, 0x62,
	0x7d, 0x2d, 0xdd, 0xf4, 0xda, 0x03, 0x51, 0xbe, 0x8d, 0xf6, 0xe5, 0x54, 0x7d, 0x0c, 0x16, 0x87,
	0x38, 0x20, 0xda, 0x1d, 0x59, 0xe2, 0x6a, 0x12, 0xeb, 0x85, 0x54, 0x2d, 0xb2, 0x10, 0x49, 0xa8,
	0xfe, 0x53, 0x40, 0x81, 0x11, 0x9f, 0xe0, 0x88, 0x1c, 0x78, 0x01, 0xd1, 0x16, 0xa4, 0xf8, 0x97,
	0x92, 0xc4, 0xba, 0x9a, 0xaa, 0x33, 0x54, 0x34, 0xf5, 0x43, 0x01, 0xdf, 0x95, 0x23, 0xc3, 0x68,
	0x35, 0x9d, 0x9a, 0xb9, 0xd3, 0x11, 0xfd, 0x75, 0x9e, 0x54, 0x5a, 0x72, 0xbc, 0x7c, 0x7a, 0x55,
	0x31, 0x8d, 0x9a, 0x53, 0x35, 0xeb, 0x9d, 0x71, 0x55, 0xf2, 0x8a, 0x69, 0x34, 0x9c, 0xaa, 0x59,
	0x9b, 0xc6, 0x63, 0xa7, 0x66, 0xd6, 0x53, 0x57, 0xc5, 0x39, 0x28, 0x77, 0x8c, 0xba, 0x53, 0x35,
	0x1b, 0x9d, 0xb1, 0xd4, 0xa4, 0xe9, 0xa6, 0xe1, 0x54, 0xcd, 0x67, 0xd3, 0xe0, 0x66, 0x6e, 0x7c,
	0xb6, 0xe4, 0xb8, 0x5d, 0x69, 0x19, 0x9f, 0xc6, 0xce, 0xb6, 0xd9, 0x31, 0x5a, 0xcd, 0x5b, 0xec,
	0x19, 0x77, 0x6b, 0x13, 0x65, 0xbb, 0x53, 0x6d, 0x90, 0xa7, 0xd1, 0x87, 0xf3, 0x88, 0x93, 0x40,
	0x5b, 0x94, 0x9d, 0xae, 0x27, 0xb1, 0xbe, 0x9a, 0x36, 0x3a, 0x25, 0x10, 0x5d, 0x8b, 0xd4, 0x97,
	0xe0, 0x1e, 0x23, 0xa7, 0x23, 0x8f, 0x11, 0x44, 0x7a, 0x94, 0x72, 0x2d, 0x57, 0x56, 0x8c, 0xfc,
	0x9e, 0x96, 0xc4, 0xfa, 0xc6, 0xf4, 0x78, 0x32, 0x18, 0xa2, 0x59, 0xb9, 0xb8, 0x83, 0x20, 0x62,
	0xae, 0xb6, 0x34, 0x7f, 0x07, 0x22, 0x0b, 0x91, 0x84, 0xea, 0x2e, 0x28, 0xd2, 0x68, 0x97, 0xb9,
	0x27, 0x1e, 0x27, 0x2e, 0x1f, 0x31, 0xa2, 0x2d, 0x4b, 0xf9, 0xa3, 0x24, 0xd6, 0xef, 0x4f, 0x6b,
	0xcb, 0x72, 0x88, 0xe6, 0x0c, 0x62, 0x9f, 0xc8, 0xbb, 0x20, 0x5a, 0xbe, 0xac, 0x18, 0xb9, 0xec,
	0x3e, 0x22, 0x0b, 0x91, 0x84, 0x42, 0xd4, 0x27, 0x91, 0xab, 0xad, 0xcc, 0x17, 0x23, 0xb2, 0x10,
	0x49, 0xa8, 0x96, 0xc1, 0xc2, 0x88, 0xf9, 0x1a, 0x90, 0x9a, 0x62, 0x12, 0xeb, 0x20, 0xd5, 0x8c,
	0x98, 0x0f, 0x91, 0x40, 0xf0, 0xaf, 0x02, 0x4a, 0xb7, 0xbc, 0xdd, 0x43, 0x86, 0xc3, 0x90, 0x30,
	0xb1, 0x8b, 0x4b, 0xfb, 0x44, 0x7e, 0x19, 0x33, 0xa5, 0x88, 0x2c, 0x44, 0x12, 0xaa, 0x2f, 0x40,
	0x41, 0x8c, 0xfb, 0xdf, 0x42, 0x1f, 0x7b, 0xc3, 0xc9, 0x13, 0x7d, 0x70, 0xf3, 0xe8, 0x32, 0x10,
	0xa2, 0xac, 0x54, 0xdd, 0x02, 0x39, 0xc2, 0x18, 0x65, 0x93, 0x97, 0xba, 0x96, 0xc4, 0xfa, 0xdd,
	0xd4, 0x23, 0xd3, 0x10, 0xa5, 0x58, 0x6d, 0x81, 0xc5, 0x3e, 0xe6, 0x58, 0x5e, 0x73, 0xa1, 0x5e,
	0x4a, 0x3f, 0x22, 0xeb, 0x96, 0xba, 0x67, 0x0e, 0x02, 0x73, 0x2c, 0x0e, 0x02, 0x73, 0xdc, 0x5b,
	0x92, 0x7f, 0x80, 0xc6, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x9a, 0x07, 0xa0, 0xdf, 0x04,
	0x00, 0x00,
}
