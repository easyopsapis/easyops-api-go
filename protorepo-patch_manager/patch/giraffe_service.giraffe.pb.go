// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package patch

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	patch_manager "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/patch_manager"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for patch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateWinPatch(ctx context.Context, in *patch_manager.WinPatch) (*CreateWinPatchResponse, error)
	DeleteWinPatch(ctx context.Context, in *DeleteWinPatchRequest) (*DeleteWinPatchResponse, error)
	GetWinPatch(ctx context.Context, in *GetWinPatchRequest) (*GetWinPatchResponse, error)
	ListWinPatch(ctx context.Context, in *ListWinPatchRequest) (*ListWinPatchResponse, error)
	UpdateWinPatch(ctx context.Context, in *UpdateWinPatchRequest) (*UpdateWinPatchResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateWinPatch(ctx context.Context, in *patch_manager.WinPatch) (*CreateWinPatchResponse, error) {
	out := new(CreateWinPatchResponse)
	err := c.c.Invoke(ctx, _CreateWinPatchMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteWinPatch(ctx context.Context, in *DeleteWinPatchRequest) (*DeleteWinPatchResponse, error) {
	out := new(DeleteWinPatchResponse)
	err := c.c.Invoke(ctx, _DeleteWinPatchMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetWinPatch(ctx context.Context, in *GetWinPatchRequest) (*GetWinPatchResponse, error) {
	out := new(GetWinPatchResponse)
	err := c.c.Invoke(ctx, _GetWinPatchMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListWinPatch(ctx context.Context, in *ListWinPatchRequest) (*ListWinPatchResponse, error) {
	out := new(ListWinPatchResponse)
	err := c.c.Invoke(ctx, _ListWinPatchMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateWinPatch(ctx context.Context, in *UpdateWinPatchRequest) (*UpdateWinPatchResponse, error) {
	out := new(UpdateWinPatchResponse)
	err := c.c.Invoke(ctx, _UpdateWinPatchMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for patch service.
type Service interface {
	CreateWinPatch(context.Context, *patch_manager.WinPatch) (*CreateWinPatchResponse, error)
	DeleteWinPatch(context.Context, *DeleteWinPatchRequest) (*DeleteWinPatchResponse, error)
	GetWinPatch(context.Context, *GetWinPatchRequest) (*GetWinPatchResponse, error)
	ListWinPatch(context.Context, *ListWinPatchRequest) (*ListWinPatchResponse, error)
	UpdateWinPatch(context.Context, *UpdateWinPatchRequest) (*UpdateWinPatchResponse, error)
}

func _CreateWinPatchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateWinPatch(ctx, req.(*patch_manager.WinPatch))
	}
}

func _DeleteWinPatchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteWinPatch(ctx, req.(*DeleteWinPatchRequest))
	}
}

func _GetWinPatchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetWinPatch(ctx, req.(*GetWinPatchRequest))
	}
}

func _ListWinPatchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListWinPatch(ctx, req.(*ListWinPatchRequest))
	}
}

func _UpdateWinPatchEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateWinPatch(ctx, req.(*UpdateWinPatchRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateWinPatchMethodDesc, _CreateWinPatchEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteWinPatchMethodDesc, _DeleteWinPatchEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetWinPatchMethodDesc, _GetWinPatchEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListWinPatchMethodDesc, _ListWinPatchEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateWinPatchMethodDesc, _UpdateWinPatchEndpoint(srv))
}

// Method Description
var _CreateWinPatchMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.patch_manager.patch.CreateWinPatch",
		Version: "1.0",
	},
	ServiceName:  "patch.rpc",
	MethodName:   "CreateWinPatch",
	RequestType:  (*patch_manager.WinPatch)(nil),
	ResponseType: (*CreateWinPatchResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/patch_manager/patch",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteWinPatchMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.patch_manager.patch.DeleteWinPatch",
		Version: "1.0",
	},
	ServiceName:  "patch.rpc",
	MethodName:   "DeleteWinPatch",
	RequestType:  (*DeleteWinPatchRequest)(nil),
	ResponseType: (*DeleteWinPatchResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/patch_manager/patch/:patchId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetWinPatchMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.patch_manager.patch.GetWinPatch",
		Version: "1.0",
	},
	ServiceName:  "patch.rpc",
	MethodName:   "GetWinPatch",
	RequestType:  (*GetWinPatchRequest)(nil),
	ResponseType: (*GetWinPatchResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/patch_manager/patch/:patchId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListWinPatchMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.patch_manager.patch.ListWinPatch",
		Version: "1.0",
	},
	ServiceName:  "patch.rpc",
	MethodName:   "ListWinPatch",
	RequestType:  (*ListWinPatchRequest)(nil),
	ResponseType: (*ListWinPatchResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/patch_manager/patch",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateWinPatchMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.patch_manager.patch.UpdateWinPatch",
		Version: "1.0",
	},
	ServiceName:  "patch.rpc",
	MethodName:   "UpdateWinPatch",
	RequestType:  (*UpdateWinPatchRequest)(nil),
	ResponseType: (*UpdateWinPatchResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/patch_manager/patch/:patchId",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
