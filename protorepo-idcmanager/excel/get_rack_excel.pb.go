// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: get_rack_excel.proto

package excel

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//GetIDCRackExcel请求
type GetIDCRackExcelRequest struct {
	//
	//机房ID
	IdcId string `protobuf:"bytes,1,opt,name=idcId,proto3" json:"idcId" form:"idcId"`
	//
	//文件名
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName" form:"fileName"`
	//
	//机柜信息
	Data                 []*GetIDCRackExcelRequest_Data `protobuf:"bytes,3,rep,name=data,proto3" json:"data" form:"data"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GetIDCRackExcelRequest) Reset()         { *m = GetIDCRackExcelRequest{} }
func (m *GetIDCRackExcelRequest) String() string { return proto.CompactTextString(m) }
func (*GetIDCRackExcelRequest) ProtoMessage()    {}
func (*GetIDCRackExcelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5c6753525b2ca07, []int{0}
}
func (m *GetIDCRackExcelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIDCRackExcelRequest.Unmarshal(m, b)
}
func (m *GetIDCRackExcelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIDCRackExcelRequest.Marshal(b, m, deterministic)
}
func (m *GetIDCRackExcelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIDCRackExcelRequest.Merge(m, src)
}
func (m *GetIDCRackExcelRequest) XXX_Size() int {
	return xxx_messageInfo_GetIDCRackExcelRequest.Size(m)
}
func (m *GetIDCRackExcelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIDCRackExcelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIDCRackExcelRequest proto.InternalMessageInfo

func (m *GetIDCRackExcelRequest) GetIdcId() string {
	if m != nil {
		return m.IdcId
	}
	return ""
}

func (m *GetIDCRackExcelRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *GetIDCRackExcelRequest) GetData() []*GetIDCRackExcelRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetIDCRackExcelRequest_Data struct {
	//
	//所属机房
	IdcName string `protobuf:"bytes,1,opt,name=idcName,proto3" json:"idcName" form:"idcName"`
	//
	//状态
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status" form:"status"`
	//
	//机柜类型
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type" form:"type"`
	//
	//已使用U数
	OccupiedU int32 `protobuf:"varint,4,opt,name=occupiedU,proto3" json:"occupiedU" form:"occupiedU"`
	//
	//占用率(如：98.1%)
	OccupiedUPercentage string `protobuf:"bytes,5,opt,name=occupiedUPercentage,proto3" json:"occupiedUPercentage" form:"occupiedUPercentage"`
	//
	//最大连续可用U数
	MaxuSize int32 `protobuf:"varint,6,opt,name=maxuSize,proto3" json:"maxuSize" form:"maxuSize"`
	//
	//关联产品线
	Products string `protobuf:"bytes,7,opt,name=products,proto3" json:"products" form:"products"`
	//
	//关联的客户
	Customers string `protobuf:"bytes,8,opt,name=customers,proto3" json:"customers" form:"customers"`
	//
	//是否包含单电源设备
	HasSinglePowerDevice bool `protobuf:"varint,9,opt,name=hasSinglePowerDevice,proto3" json:"hasSinglePowerDevice" form:"hasSinglePowerDevice"`
	//
	//备注
	Memo string `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo" form:"memo"`
	//
	//机柜ID
	InstanceId string `protobuf:"bytes,11,opt,name=instanceId,proto3" json:"instanceId" form:"instanceId"`
	//
	//机柜名称
	Name string `protobuf:"bytes,12,opt,name=name,proto3" json:"name" form:"name"`
	//
	//机柜编号
	Code string `protobuf:"bytes,13,opt,name=code,proto3" json:"code" form:"code"`
	//
	//机柜U数
	Unum int32 `protobuf:"varint,14,opt,name=unum,proto3" json:"unum" form:"unum"`
	//
	//空闲U位数
	FreeUnum             int32    `protobuf:"varint,15,opt,name=freeUnum,proto3" json:"freeUnum" form:"freeUnum"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIDCRackExcelRequest_Data) Reset()         { *m = GetIDCRackExcelRequest_Data{} }
func (m *GetIDCRackExcelRequest_Data) String() string { return proto.CompactTextString(m) }
func (*GetIDCRackExcelRequest_Data) ProtoMessage()    {}
func (*GetIDCRackExcelRequest_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5c6753525b2ca07, []int{0, 0}
}
func (m *GetIDCRackExcelRequest_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIDCRackExcelRequest_Data.Unmarshal(m, b)
}
func (m *GetIDCRackExcelRequest_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIDCRackExcelRequest_Data.Marshal(b, m, deterministic)
}
func (m *GetIDCRackExcelRequest_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIDCRackExcelRequest_Data.Merge(m, src)
}
func (m *GetIDCRackExcelRequest_Data) XXX_Size() int {
	return xxx_messageInfo_GetIDCRackExcelRequest_Data.Size(m)
}
func (m *GetIDCRackExcelRequest_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIDCRackExcelRequest_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GetIDCRackExcelRequest_Data proto.InternalMessageInfo

func (m *GetIDCRackExcelRequest_Data) GetIdcName() string {
	if m != nil {
		return m.IdcName
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetOccupiedU() int32 {
	if m != nil {
		return m.OccupiedU
	}
	return 0
}

func (m *GetIDCRackExcelRequest_Data) GetOccupiedUPercentage() string {
	if m != nil {
		return m.OccupiedUPercentage
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetMaxuSize() int32 {
	if m != nil {
		return m.MaxuSize
	}
	return 0
}

func (m *GetIDCRackExcelRequest_Data) GetProducts() string {
	if m != nil {
		return m.Products
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetCustomers() string {
	if m != nil {
		return m.Customers
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetHasSinglePowerDevice() bool {
	if m != nil {
		return m.HasSinglePowerDevice
	}
	return false
}

func (m *GetIDCRackExcelRequest_Data) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GetIDCRackExcelRequest_Data) GetUnum() int32 {
	if m != nil {
		return m.Unum
	}
	return 0
}

func (m *GetIDCRackExcelRequest_Data) GetFreeUnum() int32 {
	if m != nil {
		return m.FreeUnum
	}
	return 0
}

func init() {
	proto.RegisterType((*GetIDCRackExcelRequest)(nil), "excel.GetIDCRackExcelRequest")
	proto.RegisterType((*GetIDCRackExcelRequest_Data)(nil), "excel.GetIDCRackExcelRequest.Data")
}

func init() { proto.RegisterFile("get_rack_excel.proto", fileDescriptor_a5c6753525b2ca07) }

var fileDescriptor_a5c6753525b2ca07 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x4f, 0x4f, 0xdb, 0x4c,
	0x10, 0xc6, 0x95, 0x97, 0x24, 0xc0, 0xf2, 0x7f, 0x41, 0xaf, 0x56, 0x41, 0xaa, 0xa3, 0x2d, 0x87,
	0x20, 0x35, 0x49, 0x0b, 0x52, 0xa5, 0x72, 0x4c, 0xa9, 0x50, 0x2e, 0x15, 0x5a, 0xc4, 0xa9, 0x6a,
	0xd1, 0xb2, 0x1e, 0x8c, 0x45, 0xec, 0x4d, 0xed, 0x35, 0x01, 0xaa, 0x1e, 0xfb, 0x15, 0x7b, 0x74,
	0xa5, 0x7e, 0x04, 0x7f, 0x82, 0x6a, 0x67, 0x13, 0x27, 0xb2, 0x72, 0xf3, 0xcc, 0xf3, 0x7b, 0x76,
	0x67, 0x3c, 0xb3, 0xe4, 0x20, 0x00, 0x73, 0x93, 0x48, 0xf5, 0x70, 0x03, 0x4f, 0x0a, 0x46, 0xbd,
	0x71, 0xa2, 0x8d, 0xa6, 0x0d, 0x0c, 0x5a, 0xdd, 0x20, 0x34, 0xf7, 0xd9, 0x6d, 0x4f, 0xe9, 0xa8,
	0x1f, 0xe8, 0x40, 0xf7, 0x51, 0xbd, 0xcd, 0xee, 0x30, 0xc2, 0x00, 0xbf, 0x9c, 0xab, 0xf5, 0x7e,
	0x01, 0x8f, 0x26, 0xa1, 0x79, 0xd0, 0x93, 0x7e, 0xa0, 0xbb, 0x28, 0x76, 0x1f, 0xe5, 0x28, 0xf4,
	0xa5, 0xd1, 0x49, 0xda, 0x2f, 0x3f, 0xa7, 0xbe, 0xc3, 0x40, 0xeb, 0x60, 0x04, 0xf3, 0xd3, 0x21,
	0x1a, 0x9b, 0x67, 0x27, 0xf2, 0xdf, 0xab, 0xe4, 0xff, 0x0b, 0x30, 0xc3, 0xf3, 0x8f, 0x42, 0xaa,
	0x87, 0x4f, 0xb6, 0x2e, 0x01, 0xdf, 0x33, 0x48, 0x0d, 0x3d, 0x23, 0x8d, 0xd0, 0x57, 0x43, 0x9f,
	0xd5, 0xda, 0xb5, 0xce, 0xfa, 0xe0, 0xa8, 0xc8, 0xbd, 0xcd, 0x3b, 0x9d, 0x44, 0x67, 0x1c, 0xd3,
	0xfc, 0xef, 0x1f, 0x6f, 0x97, 0x6c, 0x7f, 0xfb, 0xf2, 0xb6, 0xfb, 0x41, 0x76, 0x5f, 0xbe, 0xfe,
	0x78, 0x77, 0xfa, 0xf3, 0x48, 0x38, 0x0b, 0xed, 0x93, 0xb5, 0xbb, 0x70, 0x04, 0x9f, 0x65, 0x04,
	0xec, 0x3f, 0xb4, 0xef, 0x17, 0xb9, 0xb7, 0xe3, 0xec, 0x33, 0x85, 0x8b, 0x12, 0xa2, 0x17, 0xa4,
	0xee, 0x4b, 0x23, 0xd9, 0x4a, 0x7b, 0xa5, 0xb3, 0x71, 0xc2, 0x7b, 0xee, 0x77, 0x2d, 0xaf, 0xac,
	0x77, 0x2e, 0x8d, 0x1c, 0xec, 0x14, 0xb9, 0xb7, 0xe1, 0x0e, 0xb4, 0x4e, 0x2e, 0xf0, 0x80, 0xd6,
	0xaf, 0x26, 0xa9, 0x5b, 0x9d, 0xbe, 0x21, 0xab, 0xa1, 0xaf, 0xb0, 0x02, 0xd7, 0x00, 0x2d, 0x72,
	0x6f, 0xbb, 0x6c, 0xc0, 0x15, 0x30, 0x43, 0xe8, 0x31, 0x69, 0xa6, 0x46, 0x9a, 0x2c, 0x9d, 0x96,
	0xbb, 0x57, 0xe4, 0xde, 0x96, 0x83, 0x5d, 0x9e, 0x8b, 0x29, 0x40, 0x5f, 0x93, 0xba, 0x79, 0x1e,
	0x03, 0x5b, 0x41, 0x70, 0xa1, 0x0c, 0x9b, 0xe5, 0x02, 0x45, 0x7a, 0x42, 0xd6, 0xb5, 0x52, 0xd9,
	0x38, 0x04, 0xff, 0x9a, 0xd5, 0xdb, 0xb5, 0x4e, 0x63, 0x70, 0x50, 0xe4, 0xde, 0xae, 0x23, 0x4b,
	0x89, 0x8b, 0x39, 0x46, 0x2f, 0xc9, 0x7e, 0x19, 0x5c, 0x42, 0xa2, 0x20, 0x36, 0x32, 0x00, 0xd6,
	0xc0, 0x7b, 0x5e, 0x15, 0xb9, 0xd7, 0xaa, 0xb8, 0xe7, 0x10, 0x17, 0xcb, 0xac, 0x76, 0x0c, 0x91,
	0x7c, 0xca, 0xae, 0xc2, 0x17, 0x60, 0x4d, 0x2c, 0x62, 0x61, 0x0c, 0x33, 0x85, 0x8b, 0x12, 0xb2,
	0x86, 0x71, 0xa2, 0xfd, 0x4c, 0x99, 0x94, 0xad, 0x56, 0xe7, 0x36, 0x53, 0xb8, 0x28, 0x21, 0xdb,
	0xa7, 0xca, 0x52, 0xa3, 0x23, 0x48, 0x52, 0xb6, 0x86, 0x8e, 0x85, 0x3e, 0x4b, 0x89, 0x8b, 0x39,
	0x46, 0xaf, 0xc8, 0xc1, 0xbd, 0x4c, 0xaf, 0xc2, 0x38, 0x18, 0xc1, 0xa5, 0x9e, 0x40, 0x72, 0x0e,
	0x8f, 0xa1, 0x02, 0xb6, 0xde, 0xae, 0x75, 0xd6, 0x06, 0x5e, 0x91, 0x7b, 0x87, 0xce, 0xbe, 0x8c,
	0xe2, 0x62, 0xa9, 0xd9, 0x4e, 0x25, 0x82, 0x48, 0x33, 0x52, 0x9d, 0x8a, 0xcd, 0x72, 0x81, 0x22,
	0x1d, 0x12, 0x12, 0xc6, 0xa9, 0x91, 0xb1, 0x82, 0xa1, 0xcf, 0x36, 0x10, 0x3d, 0x2e, 0x72, 0x6f,
	0x6f, 0xba, 0x16, 0xa5, 0xb6, 0x7c, 0xb9, 0x17, 0xcc, 0xf6, 0xbe, 0xd8, 0xee, 0xd6, 0x66, 0xf5,
	0xbe, 0x18, 0x17, 0x0b, 0x45, 0x0b, 0x29, 0xed, 0x03, 0xdb, 0xaa, 0x42, 0x36, 0xcb, 0x05, 0x8a,
	0x16, 0xca, 0xe2, 0x2c, 0x62, 0xdb, 0x38, 0xa0, 0x05, 0xc8, 0x66, 0xb9, 0x40, 0x11, 0x1f, 0x54,
	0x02, 0x70, 0x6d, 0xc1, 0x9d, 0xea, 0x24, 0x67, 0x8a, 0x7d, 0x50, 0xd3, 0xcf, 0xdb, 0x26, 0xbe,
	0xef, 0xd3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x99, 0xd9, 0xf3, 0x2f, 0x82, 0x04, 0x00, 0x00,
}
