// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: get_device_excel.proto

package excel

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//GetIDCDeviceExcel请求
type GetIDCDeviceExcelRequest struct {
	//
	//机房ID
	IdcId string `protobuf:"bytes,1,opt,name=idcId,proto3" json:"idcId" form:"idcId"`
	//
	//文件名
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName" form:"fileName"`
	//
	//设备信息
	Data                 []*GetIDCDeviceExcelRequest_Data `protobuf:"bytes,3,rep,name=data,proto3" json:"data" form:"data"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GetIDCDeviceExcelRequest) Reset()         { *m = GetIDCDeviceExcelRequest{} }
func (m *GetIDCDeviceExcelRequest) String() string { return proto.CompactTextString(m) }
func (*GetIDCDeviceExcelRequest) ProtoMessage()    {}
func (*GetIDCDeviceExcelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_004150e3c23ac4c3, []int{0}
}
func (m *GetIDCDeviceExcelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIDCDeviceExcelRequest.Unmarshal(m, b)
}
func (m *GetIDCDeviceExcelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIDCDeviceExcelRequest.Marshal(b, m, deterministic)
}
func (m *GetIDCDeviceExcelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIDCDeviceExcelRequest.Merge(m, src)
}
func (m *GetIDCDeviceExcelRequest) XXX_Size() int {
	return xxx_messageInfo_GetIDCDeviceExcelRequest.Size(m)
}
func (m *GetIDCDeviceExcelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIDCDeviceExcelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIDCDeviceExcelRequest proto.InternalMessageInfo

func (m *GetIDCDeviceExcelRequest) GetIdcId() string {
	if m != nil {
		return m.IdcId
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest) GetData() []*GetIDCDeviceExcelRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetIDCDeviceExcelRequest_Data struct {
	//
	//设备名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name"`
	//
	//所在机房
	IdcName string `protobuf:"bytes,2,opt,name=idcName,proto3" json:"idcName" form:"idcName"`
	//
	//所属机柜名称
	RackName string `protobuf:"bytes,3,opt,name=rackName,proto3" json:"rackName" form:"rackName"`
	//
	//所属机柜编号
	RackCode string `protobuf:"bytes,4,opt,name=rackCode,proto3" json:"rackCode" form:"rackCode"`
	//
	//设备类型
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type" form:"type"`
	//
	//起始U位
	StartU int32 `protobuf:"varint,6,opt,name=startU,proto3" json:"startU" form:"startU"`
	//
	//占用U位
	OccupiedU int32 `protobuf:"varint,7,opt,name=occupiedU,proto3" json:"occupiedU" form:"occupiedU"`
	//
	//管理IP
	Ip string `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip" form:"ip"`
	//
	//状态
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status" form:"status"`
	//
	//资产编号
	PropertyId string `protobuf:"bytes,10,opt,name=propertyId,proto3" json:"propertyId" form:"propertyId"`
	//
	//用途
	Use string `protobuf:"bytes,11,opt,name=use,proto3" json:"use" form:"use"`
	//
	//是否是单电源设备
	IsSinglePowerDevice bool `protobuf:"varint,12,opt,name=isSinglePowerDevice,proto3" json:"isSinglePowerDevice" form:"isSinglePowerDevice"`
	//
	//关联的客户
	Customers string `protobuf:"bytes,13,opt,name=customers,proto3" json:"customers" form:"customers"`
	//
	//关联产品线
	Products             string   `protobuf:"bytes,14,opt,name=products,proto3" json:"products" form:"products"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIDCDeviceExcelRequest_Data) Reset()         { *m = GetIDCDeviceExcelRequest_Data{} }
func (m *GetIDCDeviceExcelRequest_Data) String() string { return proto.CompactTextString(m) }
func (*GetIDCDeviceExcelRequest_Data) ProtoMessage()    {}
func (*GetIDCDeviceExcelRequest_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_004150e3c23ac4c3, []int{0, 0}
}
func (m *GetIDCDeviceExcelRequest_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIDCDeviceExcelRequest_Data.Unmarshal(m, b)
}
func (m *GetIDCDeviceExcelRequest_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIDCDeviceExcelRequest_Data.Marshal(b, m, deterministic)
}
func (m *GetIDCDeviceExcelRequest_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIDCDeviceExcelRequest_Data.Merge(m, src)
}
func (m *GetIDCDeviceExcelRequest_Data) XXX_Size() int {
	return xxx_messageInfo_GetIDCDeviceExcelRequest_Data.Size(m)
}
func (m *GetIDCDeviceExcelRequest_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIDCDeviceExcelRequest_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GetIDCDeviceExcelRequest_Data proto.InternalMessageInfo

func (m *GetIDCDeviceExcelRequest_Data) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetIdcName() string {
	if m != nil {
		return m.IdcName
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetRackName() string {
	if m != nil {
		return m.RackName
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetRackCode() string {
	if m != nil {
		return m.RackCode
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetStartU() int32 {
	if m != nil {
		return m.StartU
	}
	return 0
}

func (m *GetIDCDeviceExcelRequest_Data) GetOccupiedU() int32 {
	if m != nil {
		return m.OccupiedU
	}
	return 0
}

func (m *GetIDCDeviceExcelRequest_Data) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetPropertyId() string {
	if m != nil {
		return m.PropertyId
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetUse() string {
	if m != nil {
		return m.Use
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetIsSinglePowerDevice() bool {
	if m != nil {
		return m.IsSinglePowerDevice
	}
	return false
}

func (m *GetIDCDeviceExcelRequest_Data) GetCustomers() string {
	if m != nil {
		return m.Customers
	}
	return ""
}

func (m *GetIDCDeviceExcelRequest_Data) GetProducts() string {
	if m != nil {
		return m.Products
	}
	return ""
}

func init() {
	proto.RegisterType((*GetIDCDeviceExcelRequest)(nil), "excel.GetIDCDeviceExcelRequest")
	proto.RegisterType((*GetIDCDeviceExcelRequest_Data)(nil), "excel.GetIDCDeviceExcelRequest.Data")
}

func init() { proto.RegisterFile("get_device_excel.proto", fileDescriptor_004150e3c23ac4c3) }

var fileDescriptor_004150e3c23ac4c3 = []byte{
	// 786 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0xcf, 0x6e, 0xe3, 0x44,
	0x1c, 0xc7, 0x95, 0x26, 0xe9, 0xd6, 0xd3, 0xdd, 0x6c, 0xd7, 0x0b, 0xc8, 0x0a, 0x12, 0x8e, 0x4c,
	0x90, 0xc6, 0x4b, 0x9c, 0xc4, 0x4e, 0xd2, 0xd5, 0xe6, 0x52, 0x91, 0x2d, 0xa0, 0x5c, 0xd0, 0xca,
	0x68, 0x4f, 0x49, 0x76, 0xe5, 0xda, 0x13, 0x63, 0x35, 0xe9, 0x18, 0x7b, 0xdc, 0x52, 0x62, 0x9f,
	0x39, 0x22, 0xf1, 0x0c, 0x3c, 0x01, 0x12, 0xaf, 0x63, 0x24, 0x1e, 0xc1, 0x4f, 0x80, 0x66, 0x26,
	0xff, 0x68, 0x62, 0xe0, 0x50, 0x7a, 0x9b, 0x99, 0xef, 0xe7, 0x37, 0xf3, 0x19, 0xb7, 0xfa, 0x4d,
	0xc0, 0x47, 0x2e, 0x22, 0xef, 0x1d, 0x74, 0xed, 0xd9, 0xe8, 0x3d, 0xfa, 0xc1, 0x46, 0xb3, 0xa6,
	0x1f, 0x60, 0x82, 0xc5, 0x32, 0x9b, 0x54, 0x35, 0xd7, 0x23, 0xdf, 0x45, 0x17, 0x4d, 0x1b, 0xcf,
	0x5b, 0x2e, 0x76, 0x71, 0x8b, 0xa5, 0x17, 0xd1, 0x94, 0xcd, 0xd8, 0x84, 0x8d, 0x78, 0x55, 0xf5,
	0x74, 0x0b, 0x9f, 0xdf, 0x78, 0xe4, 0x12, 0xdf, 0xb4, 0x5c, 0xac, 0xb1, 0x50, 0xbb, 0xb6, 0x66,
	0x9e, 0x63, 0x11, 0x1c, 0x84, 0xad, 0xf5, 0x70, 0x59, 0xf7, 0xb1, 0x8b, 0xb1, 0x3b, 0x43, 0x9b,
	0xdd, 0xd1, 0xdc, 0x27, 0xb7, 0x3c, 0x54, 0x7e, 0x3a, 0x01, 0xd2, 0xd7, 0x88, 0x0c, 0xcf, 0x5f,
	0x9f, 0x33, 0xcf, 0x2f, 0xa9, 0x99, 0x89, 0xbe, 0x8f, 0x50, 0x48, 0xc4, 0x3e, 0x28, 0x7b, 0x8e,
	0x3d, 0x74, 0xa4, 0x42, 0xad, 0x00, 0x85, 0x41, 0x3d, 0x4b, 0xe5, 0xc7, 0x53, 0x1c, 0xcc, 0xfb,
	0x0a, 0x5b, 0x56, 0xfe, 0xfc, 0x43, 0x3e, 0x01, 0x95, 0x77, 0xa3, 0xb6, 0xf6, 0xca, 0xd2, 0x7e,
	0x9c, 0x2c, 0xf4, 0x4e, 0x52, 0x37, 0x79, 0x89, 0xd8, 0x02, 0x47, 0x53, 0x6f, 0x86, 0xbe, 0xb1,
	0xe6, 0x48, 0x3a, 0x60, 0xe5, 0xcf, 0xb3, 0x54, 0x7e, 0xca, 0xcb, 0x57, 0x89, 0x62, 0xae, 0x21,
	0x71, 0x08, 0x4a, 0x8e, 0x45, 0x2c, 0xa9, 0x58, 0x2b, 0xc2, 0x63, 0xa3, 0xde, 0xe4, 0x1f, 0x2c,
	0xcf, 0xad, 0x79, 0x6e, 0x11, 0x6b, 0xf0, 0x34, 0x4b, 0xe5, 0x63, 0xbe, 0x25, 0xad, 0x55, 0x4c,
	0xb6, 0x45, 0xf5, 0xb7, 0x0a, 0x28, 0xd1, 0x5c, 0xfc, 0x14, 0x94, 0xae, 0xa8, 0x00, 0xf7, 0xdf,
	0xa2, 0xaf, 0xd8, 0xe1, 0x2c, 0x14, 0x1b, 0xe0, 0x91, 0xe7, 0xd8, 0x5b, 0xa2, 0x62, 0x96, 0xca,
	0x95, 0xf5, 0x3d, 0xb9, 0xe7, 0x0a, 0xa1, 0xf7, 0x0a, 0x2c, 0xfb, 0x92, 0xe1, 0xc5, 0xbb, 0xf7,
	0x5a, 0x25, 0x8a, 0xb9, 0x86, 0x56, 0x05, 0xaf, 0xb1, 0x83, 0xa4, 0xd2, 0xbe, 0x02, 0x9a, 0x2c,
	0x0b, 0xe8, 0x90, 0x4a, 0x93, 0x5b, 0x1f, 0x49, 0xe5, 0xbb, 0xd2, 0x74, 0x55, 0x31, 0x59, 0x28,
	0xaa, 0xe0, 0x30, 0x24, 0x56, 0x40, 0xde, 0x4a, 0x87, 0xb5, 0x02, 0x2c, 0x0f, 0x9e, 0x65, 0xa9,
	0xfc, 0x84, 0x63, 0x7c, 0x5d, 0x31, 0x97, 0x80, 0x68, 0x00, 0x01, 0xdb, 0x76, 0xe4, 0x7b, 0xc8,
	0x79, 0x2b, 0x3d, 0x62, 0xf4, 0x07, 0x59, 0x2a, 0x9f, 0x70, 0x7a, 0x1d, 0x29, 0xe6, 0x06, 0x13,
	0x7f, 0x17, 0xc0, 0x81, 0xe7, 0x4b, 0x47, 0x4c, 0xe1, 0x57, 0x21, 0x4b, 0x65, 0x61, 0xf9, 0x41,
	0x7c, 0xfa, 0x57, 0xff, 0x45, 0x00, 0x3f, 0x0b, 0xef, 0x20, 0x34, 0x60, 0x6f, 0xd4, 0xd6, 0x7a,
	0x93, 0x85, 0x9e, 0xc4, 0xa3, 0xb6, 0xd6, 0x9d, 0x8c, 0x9d, 0x85, 0x9e, 0xa8, 0x74, 0xac, 0x4f,
	0xce, 0xe8, 0xa4, 0x61, 0x24, 0x2a, 0x1c, 0x37, 0xff, 0x23, 0xa9, 0x2e, 0x3a, 0x89, 0x1a, 0x8f,
	0xc3, 0x17, 0x10, 0x42, 0xfa, 0x5f, 0xf5, 0x85, 0xf6, 0x95, 0xa5, 0x4d, 0x27, 0x0b, 0xbd, 0xd1,
	0x4d, 0xfa, 0xea, 0xe2, 0x65, 0xb2, 0xb3, 0x1a, 0xf7, 0x55, 0x35, 0xde, 0x0b, 0x9f, 0x26, 0xb0,
	0xbf, 0x43, 0x43, 0x68, 0x70, 0x8f, 0xd8, 0x58, 0x5a, 0xc4, 0xfa, 0xd8, 0x19, 0x3b, 0xf1, 0x48,
	0xd7, 0x5e, 0x51, 0x0f, 0x2e, 0xfb, 0x2f, 0x0c, 0xd7, 0xcc, 0x3d, 0xb9, 0x97, 0x40, 0xb8, 0x7b,
	0xb6, 0xca, 0xaf, 0x18, 0xf7, 0x1f, 0xc4, 0xa1, 0x9b, 0xeb, 0x40, 0xcb, 0xf6, 0x45, 0x67, 0xf7,
	0x29, 0xf6, 0x0f, 0x66, 0x9d, 0x5c, 0xb3, 0x6e, 0x8e, 0xd9, 0xa2, 0xdd, 0x30, 0x92, 0x07, 0xb2,
	0x33, 0x72, 0xed, 0x7a, 0xf9, 0x76, 0x9d, 0x87, 0xb2, 0xd3, 0x73, 0xed, 0x4e, 0xf3, 0xed, 0xba,
	0xff, 0x87, 0x5d, 0x3f, 0x4f, 0xe4, 0x65, 0xbe, 0x48, 0xef, 0xfe, 0x45, 0x54, 0xf8, 0x59, 0xf3,
	0x73, 0xf5, 0x6c, 0x1c, 0xbe, 0xa8, 0x9b, 0x07, 0x9e, 0xbf, 0x6c, 0x8b, 0x24, 0x0a, 0x25, 0x81,
	0xb5, 0xae, 0xbf, 0xb7, 0x45, 0x12, 0x85, 0xbc, 0x2d, 0x92, 0x28, 0x14, 0x7b, 0x00, 0xf8, 0x01,
	0xf6, 0x51, 0x40, 0x6e, 0x87, 0x8e, 0x04, 0x18, 0xfe, 0x61, 0x96, 0xca, 0xcf, 0x38, 0xbe, 0xc9,
	0x14, 0x73, 0x0b, 0x14, 0x6b, 0xa0, 0x18, 0x85, 0x48, 0x3a, 0x66, 0x7c, 0x25, 0x4b, 0x65, 0xc0,
	0xf9, 0x28, 0x44, 0x8a, 0x49, 0x23, 0xf1, 0x0d, 0x78, 0xee, 0x85, 0xdf, 0x7a, 0x57, 0xee, 0x0c,
	0xbd, 0xc1, 0x37, 0x28, 0xe0, 0x8f, 0x97, 0xf4, 0xb8, 0x56, 0x80, 0x47, 0x83, 0x4f, 0xb2, 0x54,
	0xae, 0x2e, 0x5b, 0xe9, 0x2e, 0xa4, 0x98, 0xfb, 0x4a, 0x69, 0x07, 0xb7, 0xa3, 0x90, 0xe0, 0x39,
	0x0a, 0x42, 0xe9, 0x09, 0x3b, 0x79, 0xab, 0x83, 0xaf, 0x23, 0xc5, 0xdc, 0x60, 0xf4, 0xd9, 0xf1,
	0x03, 0xec, 0x44, 0x36, 0x09, 0xa5, 0xca, 0xdd, 0x67, 0x67, 0x95, 0x28, 0xe6, 0x1a, 0xba, 0x38,
	0x64, 0x3f, 0x08, 0x3a, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xb6, 0x19, 0xa0, 0xb5, 0x08,
	0x00, 0x00,
}
