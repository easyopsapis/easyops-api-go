// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package idcrack

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	idcmanager "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/idcmanager"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for idcrack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateUserSetting(ctx context.Context, in *idcmanager.UserSetting) (*types.Empty, error)
	ListIDCRack(ctx context.Context, in *ListIDCRackRequest) (*ListIDCRackResponse, error)
	ListDeviceType(ctx context.Context, in *types.Empty) (*ListDeviceTypeResponse, error)
	ListUserSetting(ctx context.Context, in *ListUserSettingRequest) (*ListUserSettingResponse, error)
	ListIDCRackV2(ctx context.Context, in *ListIDCRackV2Request) (*ListIDCRackV2Response, error)
	UpdateIDCRackLayout(ctx context.Context, in *UpdateIDCRackLayoutRequest) (*UpdateIDCRackLayoutResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateUserSetting(ctx context.Context, in *idcmanager.UserSetting) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _CreateUserSettingMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListIDCRack(ctx context.Context, in *ListIDCRackRequest) (*ListIDCRackResponse, error) {
	out := new(ListIDCRackResponse)
	err := c.c.Invoke(ctx, _ListIDCRackMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDeviceType(ctx context.Context, in *types.Empty) (*ListDeviceTypeResponse, error) {
	out := new(ListDeviceTypeResponse)
	err := c.c.Invoke(ctx, _ListDeviceTypeMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListUserSetting(ctx context.Context, in *ListUserSettingRequest) (*ListUserSettingResponse, error) {
	out := new(ListUserSettingResponse)
	err := c.c.Invoke(ctx, _ListUserSettingMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListIDCRackV2(ctx context.Context, in *ListIDCRackV2Request) (*ListIDCRackV2Response, error) {
	out := new(ListIDCRackV2Response)
	err := c.c.Invoke(ctx, _ListIDCRackV2MethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateIDCRackLayout(ctx context.Context, in *UpdateIDCRackLayoutRequest) (*UpdateIDCRackLayoutResponse, error) {
	out := new(UpdateIDCRackLayoutResponse)
	err := c.c.Invoke(ctx, _UpdateIDCRackLayoutMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for idcrack service.
type Service interface {
	CreateUserSetting(context.Context, *idcmanager.UserSetting) (*types.Empty, error)
	ListIDCRack(context.Context, *ListIDCRackRequest) (*ListIDCRackResponse, error)
	ListDeviceType(context.Context, *types.Empty) (*ListDeviceTypeResponse, error)
	ListUserSetting(context.Context, *ListUserSettingRequest) (*ListUserSettingResponse, error)
	ListIDCRackV2(context.Context, *ListIDCRackV2Request) (*ListIDCRackV2Response, error)
	UpdateIDCRackLayout(context.Context, *UpdateIDCRackLayoutRequest) (*UpdateIDCRackLayoutResponse, error)
}

func _CreateUserSettingEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateUserSetting(ctx, req.(*idcmanager.UserSetting))
	}
}

func _ListIDCRackEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListIDCRack(ctx, req.(*ListIDCRackRequest))
	}
}

func _ListDeviceTypeEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListDeviceType(ctx, req.(*types.Empty))
	}
}

func _ListUserSettingEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListUserSetting(ctx, req.(*ListUserSettingRequest))
	}
}

func _ListIDCRackV2Endpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListIDCRackV2(ctx, req.(*ListIDCRackV2Request))
	}
}

func _UpdateIDCRackLayoutEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateIDCRackLayout(ctx, req.(*UpdateIDCRackLayoutRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateUserSettingMethodDesc, _CreateUserSettingEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListIDCRackMethodDesc, _ListIDCRackEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListDeviceTypeMethodDesc, _ListDeviceTypeEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListUserSettingMethodDesc, _ListUserSettingEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListIDCRackV2MethodDesc, _ListIDCRackV2Endpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateIDCRackLayoutMethodDesc, _UpdateIDCRackLayoutEndpoint(srv))
}

// Method Description
var _CreateUserSettingMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.idcmanager.idcrack.CreateUserSetting",
		Version: "1.0",
	},
	ServiceName:  "idcrack.rpc",
	MethodName:   "CreateUserSetting",
	RequestType:  (*idcmanager.UserSetting)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/idcmanager/v1/user_setting",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListIDCRackMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.idcmanager.idcrack.ListIDCRack",
		Version: "1.0",
	},
	ServiceName:  "idcrack.rpc",
	MethodName:   "ListIDCRack",
	RequestType:  (*ListIDCRackRequest)(nil),
	ResponseType: (*ListIDCRackResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/idcmanager/v1/idcracks",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListDeviceTypeMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.idcmanager.idcrack.ListDeviceType",
		Version: "1.0",
	},
	ServiceName:  "idcrack.rpc",
	MethodName:   "ListDeviceType",
	RequestType:  (*types.Empty)(nil),
	ResponseType: (*ListDeviceTypeResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/idcmanager/v1/device_types",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListUserSettingMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.idcmanager.idcrack.ListUserSetting",
		Version: "1.0",
	},
	ServiceName:  "idcrack.rpc",
	MethodName:   "ListUserSetting",
	RequestType:  (*ListUserSettingRequest)(nil),
	ResponseType: (*ListUserSettingResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/idcmanager/v1/user_setting",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListIDCRackV2MethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.idcmanager.idcrack.ListIDCRackV2",
		Version: "1.0",
	},
	ServiceName:  "idcrack.rpc",
	MethodName:   "ListIDCRackV2",
	RequestType:  (*ListIDCRackV2Request)(nil),
	ResponseType: (*ListIDCRackV2Response)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/idcmanager/v2/idcracks",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateIDCRackLayoutMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.idcmanager.idcrack.UpdateIDCRackLayout",
		Version: "1.0",
	},
	ServiceName:  "idcrack.rpc",
	MethodName:   "UpdateIDCRackLayout",
	RequestType:  (*UpdateIDCRackLayoutRequest)(nil),
	ResponseType: (*UpdateIDCRackLayoutResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/idcmanager/v1/idcracks/:idcrackId/layout",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
