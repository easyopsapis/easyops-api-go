// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package container

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	topology "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/topology"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for container service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateContainer(ctx context.Context, in *CreateContainerRequest) (*CreateContainerResponse, error)
	DeleteContainer(ctx context.Context, in *DeleteContainerRequest) (*DeleteContainerResponse, error)
	GetContainer(ctx context.Context, in *GetContainerRequest) (*topology.Container, error)
	ListContainer(ctx context.Context, in *ListContainerRequest) (*ListContainerResponse, error)
	UpdateContainer(ctx context.Context, in *UpdateContainerRequest) (*UpdateContainerResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateContainer(ctx context.Context, in *CreateContainerRequest) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := c.c.Invoke(ctx, _CreateContainerMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteContainer(ctx context.Context, in *DeleteContainerRequest) (*DeleteContainerResponse, error) {
	out := new(DeleteContainerResponse)
	err := c.c.Invoke(ctx, _DeleteContainerMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetContainer(ctx context.Context, in *GetContainerRequest) (*topology.Container, error) {
	out := new(topology.Container)
	err := c.c.Invoke(ctx, _GetContainerMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListContainer(ctx context.Context, in *ListContainerRequest) (*ListContainerResponse, error) {
	out := new(ListContainerResponse)
	err := c.c.Invoke(ctx, _ListContainerMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateContainer(ctx context.Context, in *UpdateContainerRequest) (*UpdateContainerResponse, error) {
	out := new(UpdateContainerResponse)
	err := c.c.Invoke(ctx, _UpdateContainerMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for container service.
type Service interface {
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	DeleteContainer(context.Context, *DeleteContainerRequest) (*DeleteContainerResponse, error)
	GetContainer(context.Context, *GetContainerRequest) (*topology.Container, error)
	ListContainer(context.Context, *ListContainerRequest) (*ListContainerResponse, error)
	UpdateContainer(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error)
}

func _CreateContainerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateContainer(ctx, req.(*CreateContainerRequest))
	}
}

func _DeleteContainerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteContainer(ctx, req.(*DeleteContainerRequest))
	}
}

func _GetContainerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetContainer(ctx, req.(*GetContainerRequest))
	}
}

func _ListContainerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListContainer(ctx, req.(*ListContainerRequest))
	}
}

func _UpdateContainerEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateContainer(ctx, req.(*UpdateContainerRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateContainerMethodDesc, _CreateContainerEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteContainerMethodDesc, _DeleteContainerEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetContainerMethodDesc, _GetContainerEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListContainerMethodDesc, _ListContainerEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateContainerMethodDesc, _UpdateContainerEndpoint(srv))
}

// Method Description
var _CreateContainerMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.container.CreateContainer",
		Version: "1.0",
	},
	ServiceName:  "container.rpc",
	MethodName:   "CreateContainer",
	RequestType:  (*CreateContainerRequest)(nil),
	ResponseType: (*CreateContainerResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/container",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteContainerMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.container.DeleteContainer",
		Version: "1.0",
	},
	ServiceName:  "container.rpc",
	MethodName:   "DeleteContainer",
	RequestType:  (*DeleteContainerRequest)(nil),
	ResponseType: (*DeleteContainerResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/container/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetContainerMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.container.GetContainer",
		Version: "1.0",
	},
	ServiceName:  "container.rpc",
	MethodName:   "GetContainer",
	RequestType:  (*GetContainerRequest)(nil),
	ResponseType: (*topology.Container)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/container/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListContainerMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.container.ListContainer",
		Version: "1.0",
	},
	ServiceName:  "container.rpc",
	MethodName:   "ListContainer",
	RequestType:  (*ListContainerRequest)(nil),
	ResponseType: (*ListContainerResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/container",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateContainerMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.container.UpdateContainer",
		Version: "1.0",
	},
	ServiceName:  "container.rpc",
	MethodName:   "UpdateContainer",
	RequestType:  (*UpdateContainerRequest)(nil),
	ResponseType: (*UpdateContainerResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/container/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
