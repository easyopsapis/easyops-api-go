// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package topo_view

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	topology "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/topology"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for topo_view service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateTopoView(ctx context.Context, in *CreateTopoViewRequest) (*topology.TopoView, error)
	DeleteTopoView(ctx context.Context, in *DeleteTopoViewRequest) (*types.Empty, error)
	GetTopoView(ctx context.Context, in *GetTopoViewRequest) (*topology.TopoView, error)
	ListTopoView(ctx context.Context, in *ListTopoViewRequest) (*ListTopoViewResponse, error)
	UpdateTopoView(ctx context.Context, in *UpdateTopoViewRequest) (*topology.TopoView, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateTopoView(ctx context.Context, in *CreateTopoViewRequest) (*topology.TopoView, error) {
	out := new(topology.TopoView)
	err := c.c.Invoke(ctx, _CreateTopoViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteTopoView(ctx context.Context, in *DeleteTopoViewRequest) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteTopoViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetTopoView(ctx context.Context, in *GetTopoViewRequest) (*topology.TopoView, error) {
	out := new(topology.TopoView)
	err := c.c.Invoke(ctx, _GetTopoViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListTopoView(ctx context.Context, in *ListTopoViewRequest) (*ListTopoViewResponse, error) {
	out := new(ListTopoViewResponse)
	err := c.c.Invoke(ctx, _ListTopoViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateTopoView(ctx context.Context, in *UpdateTopoViewRequest) (*topology.TopoView, error) {
	out := new(topology.TopoView)
	err := c.c.Invoke(ctx, _UpdateTopoViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for topo_view service.
type Service interface {
	CreateTopoView(context.Context, *CreateTopoViewRequest) (*topology.TopoView, error)
	DeleteTopoView(context.Context, *DeleteTopoViewRequest) (*types.Empty, error)
	GetTopoView(context.Context, *GetTopoViewRequest) (*topology.TopoView, error)
	ListTopoView(context.Context, *ListTopoViewRequest) (*ListTopoViewResponse, error)
	UpdateTopoView(context.Context, *UpdateTopoViewRequest) (*topology.TopoView, error)
}

func _CreateTopoViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTopoView(ctx, req.(*CreateTopoViewRequest))
	}
}

func _DeleteTopoViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteTopoView(ctx, req.(*DeleteTopoViewRequest))
	}
}

func _GetTopoViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTopoView(ctx, req.(*GetTopoViewRequest))
	}
}

func _ListTopoViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListTopoView(ctx, req.(*ListTopoViewRequest))
	}
}

func _UpdateTopoViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateTopoView(ctx, req.(*UpdateTopoViewRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateTopoViewMethodDesc, _CreateTopoViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteTopoViewMethodDesc, _DeleteTopoViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetTopoViewMethodDesc, _GetTopoViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListTopoViewMethodDesc, _ListTopoViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateTopoViewMethodDesc, _UpdateTopoViewEndpoint(srv))
}

// Method Description
var _CreateTopoViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.topo_view.CreateTopoView",
		Version: "1.0",
	},
	ServiceName:  "topo_view.rpc",
	MethodName:   "CreateTopoView",
	RequestType:  (*CreateTopoViewRequest)(nil),
	ResponseType: (*topology.TopoView)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/topology/v1/view",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteTopoViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.topo_view.DeleteTopoView",
		Version: "1.0",
	},
	ServiceName:  "topo_view.rpc",
	MethodName:   "DeleteTopoView",
	RequestType:  (*DeleteTopoViewRequest)(nil),
	ResponseType: (*types.Empty)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/topology/v1/view/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetTopoViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.topo_view.GetTopoView",
		Version: "1.0",
	},
	ServiceName:  "topo_view.rpc",
	MethodName:   "GetTopoView",
	RequestType:  (*GetTopoViewRequest)(nil),
	ResponseType: (*topology.TopoView)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/topology/v1/view/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListTopoViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.topo_view.ListTopoView",
		Version: "1.0",
	},
	ServiceName:  "topo_view.rpc",
	MethodName:   "ListTopoView",
	RequestType:  (*ListTopoViewRequest)(nil),
	ResponseType: (*ListTopoViewResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/topology/v1/views",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateTopoViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.topo_view.UpdateTopoView",
		Version: "1.0",
	},
	ServiceName:  "topo_view.rpc",
	MethodName:   "UpdateTopoView",
	RequestType:  (*UpdateTopoViewRequest)(nil),
	ResponseType: (*topology.TopoView)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/topology/v1/view/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
