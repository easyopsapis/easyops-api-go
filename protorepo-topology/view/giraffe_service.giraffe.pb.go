// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package view

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	go_proto_giraffe "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	topology "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/topology"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client
var _ go_proto_giraffe.Contract

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion4 // please upgrade the giraffe_micro package

// Client is the client API for view service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateView(ctx context.Context, in *CreateViewRequest) (*CreateViewResponse, error)
	DeleteView(ctx context.Context, in *DeleteViewRequest) (*DeleteViewResponse, error)
	FetchCmdbBusinessView(ctx context.Context, in *FetchCmdbBusinessViewRequest) (*topology.View, error)
	FetchOriginView(ctx context.Context, in *FetchOriginViewRequest) (*topology.View, error)
	GetView(ctx context.Context, in *GetViewRequest) (*topology.View, error)
	ListView(ctx context.Context, in *ListViewRequest) (*ListViewResponse, error)
	UpdateView(ctx context.Context, in *UpdateViewRequest) (*UpdateViewResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateView(ctx context.Context, in *CreateViewRequest) (*CreateViewResponse, error) {
	out := new(CreateViewResponse)
	err := c.c.Invoke(ctx, _CreateViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteView(ctx context.Context, in *DeleteViewRequest) (*DeleteViewResponse, error) {
	out := new(DeleteViewResponse)
	err := c.c.Invoke(ctx, _DeleteViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) FetchCmdbBusinessView(ctx context.Context, in *FetchCmdbBusinessViewRequest) (*topology.View, error) {
	out := new(topology.View)
	err := c.c.Invoke(ctx, _FetchCmdbBusinessViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) FetchOriginView(ctx context.Context, in *FetchOriginViewRequest) (*topology.View, error) {
	out := new(topology.View)
	err := c.c.Invoke(ctx, _FetchOriginViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetView(ctx context.Context, in *GetViewRequest) (*topology.View, error) {
	out := new(topology.View)
	err := c.c.Invoke(ctx, _GetViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListView(ctx context.Context, in *ListViewRequest) (*ListViewResponse, error) {
	out := new(ListViewResponse)
	err := c.c.Invoke(ctx, _ListViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateView(ctx context.Context, in *UpdateViewRequest) (*UpdateViewResponse, error) {
	out := new(UpdateViewResponse)
	err := c.c.Invoke(ctx, _UpdateViewMethodDesc, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for view service.
type Service interface {
	CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error)
	DeleteView(context.Context, *DeleteViewRequest) (*DeleteViewResponse, error)
	FetchCmdbBusinessView(context.Context, *FetchCmdbBusinessViewRequest) (*topology.View, error)
	FetchOriginView(context.Context, *FetchOriginViewRequest) (*topology.View, error)
	GetView(context.Context, *GetViewRequest) (*topology.View, error)
	ListView(context.Context, *ListViewRequest) (*ListViewResponse, error)
	UpdateView(context.Context, *UpdateViewRequest) (*UpdateViewResponse, error)
}

func _CreateViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateView(ctx, req.(*CreateViewRequest))
	}
}

func _DeleteViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteView(ctx, req.(*DeleteViewRequest))
	}
}

func _FetchCmdbBusinessViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FetchCmdbBusinessView(ctx, req.(*FetchCmdbBusinessViewRequest))
	}
}

func _FetchOriginViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FetchOriginView(ctx, req.(*FetchOriginViewRequest))
	}
}

func _GetViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetView(ctx, req.(*GetViewRequest))
	}
}

func _ListViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListView(ctx, req.(*ListViewRequest))
	}
}

func _UpdateViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateView(ctx, req.(*UpdateViewRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateViewMethodDesc, _CreateViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteViewMethodDesc, _DeleteViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_FetchCmdbBusinessViewMethodDesc, _FetchCmdbBusinessViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_FetchOriginViewMethodDesc, _FetchOriginViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetViewMethodDesc, _GetViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListViewMethodDesc, _ListViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateViewMethodDesc, _UpdateViewEndpoint(srv))
}

// Method Description
var _CreateViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.view.CreateView",
		Version: "1.0",
	},
	ServiceName:  "view.rpc",
	MethodName:   "CreateView",
	RequestType:  (*CreateViewRequest)(nil),
	ResponseType: (*CreateViewResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/view",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _DeleteViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.view.DeleteView",
		Version: "1.0",
	},
	ServiceName:  "view.rpc",
	MethodName:   "DeleteView",
	RequestType:  (*DeleteViewRequest)(nil),
	ResponseType: (*DeleteViewResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Delete{
			Delete: "/api/v1/view/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _FetchCmdbBusinessViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.view.FetchCmdbBusinessView",
		Version: "1.0",
	},
	ServiceName:  "view.rpc",
	MethodName:   "FetchCmdbBusinessView",
	RequestType:  (*FetchCmdbBusinessViewRequest)(nil),
	ResponseType: (*topology.View)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/view/cmdb/business",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _FetchOriginViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.view.FetchOriginView",
		Version: "1.0",
	},
	ServiceName:  "view.rpc",
	MethodName:   "FetchOriginView",
	RequestType:  (*FetchOriginViewRequest)(nil),
	ResponseType: (*topology.View)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Post{
			Post: "/api/v1/view/origin",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _GetViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.view.GetView",
		Version: "1.0",
	},
	ServiceName:  "view.rpc",
	MethodName:   "GetView",
	RequestType:  (*GetViewRequest)(nil),
	ResponseType: (*topology.View)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/view/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _ListViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.view.ListView",
		Version: "1.0",
	},
	ServiceName:  "view.rpc",
	MethodName:   "ListView",
	RequestType:  (*ListViewRequest)(nil),
	ResponseType: (*ListViewResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Get{
			Get: "/api/v1/view",
		},
		Body:         "",
		ResponseBody: "data",
	},
}

var _UpdateViewMethodDesc = &giraffe_micro.MethodDesc{
	Contract: &go_proto_giraffe.Contract{
		Name:    "easyops.api.topology.view.UpdateView",
		Version: "1.0",
	},
	ServiceName:  "view.rpc",
	MethodName:   "UpdateView",
	RequestType:  (*UpdateViewRequest)(nil),
	ResponseType: (*UpdateViewResponse)(nil),
	HttpRule: &go_proto_giraffe.HttpRule{
		Pattern: &go_proto_giraffe.HttpRule_Put{
			Put: "/api/v1/view/:id",
		},
		Body:         "",
		ResponseBody: "data",
	},
}
