// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giraffe_service.proto

package view

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/go-proto-giraffe"
	proto "github.com/gogo/protobuf/proto"
	topology "github.com/easyopsapis/easyops-api-go/protorepo-models/easyops/model/topology"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for view service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	CreateView(ctx context.Context, in *CreateViewRequest) (*CreateViewResponse, error)
	DeleteView(ctx context.Context, in *DeleteViewRequest) (*DeleteViewResponse, error)
	FetchCmdbBusinessView(ctx context.Context, in *FetchCmdbBusinessViewRequest) (*topology.View, error)
	FetchOriginView(ctx context.Context, in *FetchOriginViewRequest) (*topology.View, error)
	GetView(ctx context.Context, in *GetViewRequest) (*topology.View, error)
	ListView(ctx context.Context, in *ListViewRequest) (*ListViewResponse, error)
	UpdateView(ctx context.Context, in *UpdateViewRequest) (*UpdateViewResponse, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) CreateView(ctx context.Context, in *CreateViewRequest) (*CreateViewResponse, error) {
	out := new(CreateViewResponse)
	err := c.c.Invoke(ctx, _CreateViewContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteView(ctx context.Context, in *DeleteViewRequest) (*DeleteViewResponse, error) {
	out := new(DeleteViewResponse)
	err := c.c.Invoke(ctx, _DeleteViewContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) FetchCmdbBusinessView(ctx context.Context, in *FetchCmdbBusinessViewRequest) (*topology.View, error) {
	out := new(topology.View)
	err := c.c.Invoke(ctx, _FetchCmdbBusinessViewContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) FetchOriginView(ctx context.Context, in *FetchOriginViewRequest) (*topology.View, error) {
	out := new(topology.View)
	err := c.c.Invoke(ctx, _FetchOriginViewContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetView(ctx context.Context, in *GetViewRequest) (*topology.View, error) {
	out := new(topology.View)
	err := c.c.Invoke(ctx, _GetViewContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListView(ctx context.Context, in *ListViewRequest) (*ListViewResponse, error) {
	out := new(ListViewResponse)
	err := c.c.Invoke(ctx, _ListViewContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateView(ctx context.Context, in *UpdateViewRequest) (*UpdateViewResponse, error) {
	out := new(UpdateViewResponse)
	err := c.c.Invoke(ctx, _UpdateViewContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for view service.
type Service interface {
	CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error)
	DeleteView(context.Context, *DeleteViewRequest) (*DeleteViewResponse, error)
	FetchCmdbBusinessView(context.Context, *FetchCmdbBusinessViewRequest) (*topology.View, error)
	FetchOriginView(context.Context, *FetchOriginViewRequest) (*topology.View, error)
	GetView(context.Context, *GetViewRequest) (*topology.View, error)
	ListView(context.Context, *ListViewRequest) (*ListViewResponse, error)
	UpdateView(context.Context, *UpdateViewRequest) (*UpdateViewResponse, error)
}

func _CreateViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateView(ctx, req.(*CreateViewRequest))
	}
}

func _DeleteViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteView(ctx, req.(*DeleteViewRequest))
	}
}

func _FetchCmdbBusinessViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FetchCmdbBusinessView(ctx, req.(*FetchCmdbBusinessViewRequest))
	}
}

func _FetchOriginViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FetchOriginView(ctx, req.(*FetchOriginViewRequest))
	}
}

func _GetViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetView(ctx, req.(*GetViewRequest))
	}
}

func _ListViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListView(ctx, req.(*ListViewRequest))
	}
}

func _UpdateViewEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateView(ctx, req.(*UpdateViewRequest))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_CreateViewContract, _CreateViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteViewContract, _DeleteViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_FetchCmdbBusinessViewContract, _FetchCmdbBusinessViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_FetchOriginViewContract, _FetchOriginViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_GetViewContract, _GetViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_ListViewContract, _ListViewEndpoint(srv))
	s.RegisterUnaryEndpoint(_UpdateViewContract, _UpdateViewEndpoint(srv))
}

// API Contract
var _CreateViewContract = &createViewContract{}

type createViewContract struct{}

func (*createViewContract) ServiceName() string          { return "view.rpc" }
func (*createViewContract) MethodName() string           { return "CreateView" }
func (*createViewContract) RequestMessage() interface{}  { return new(CreateViewRequest) }
func (*createViewContract) ResponseMessage() interface{} { return new(CreateViewRequest) }
func (*createViewContract) ContractName() string         { return "easyops.api.topology.view.CreateView" }
func (*createViewContract) ContractVersion() string      { return "1.0" }
func (*createViewContract) Pattern() (string, string)    { return "POST", "/api/v1/view" }
func (*createViewContract) Body() string                 { return "" }

var _DeleteViewContract = &deleteViewContract{}

type deleteViewContract struct{}

func (*deleteViewContract) ServiceName() string          { return "view.rpc" }
func (*deleteViewContract) MethodName() string           { return "DeleteView" }
func (*deleteViewContract) RequestMessage() interface{}  { return new(DeleteViewRequest) }
func (*deleteViewContract) ResponseMessage() interface{} { return new(DeleteViewRequest) }
func (*deleteViewContract) ContractName() string         { return "easyops.api.topology.view.DeleteView" }
func (*deleteViewContract) ContractVersion() string      { return "1.0" }
func (*deleteViewContract) Pattern() (string, string)    { return "DELETE", "/api/v1/view/:id" }
func (*deleteViewContract) Body() string                 { return "" }

var _FetchCmdbBusinessViewContract = &fetchCmdbBusinessViewContract{}

type fetchCmdbBusinessViewContract struct{}

func (*fetchCmdbBusinessViewContract) ServiceName() string { return "view.rpc" }
func (*fetchCmdbBusinessViewContract) MethodName() string  { return "FetchCmdbBusinessView" }
func (*fetchCmdbBusinessViewContract) RequestMessage() interface{} {
	return new(FetchCmdbBusinessViewRequest)
}
func (*fetchCmdbBusinessViewContract) ResponseMessage() interface{} {
	return new(FetchCmdbBusinessViewRequest)
}
func (*fetchCmdbBusinessViewContract) ContractName() string {
	return "easyops.api.topology.view.FetchCmdbBusinessView"
}
func (*fetchCmdbBusinessViewContract) ContractVersion() string { return "1.0" }
func (*fetchCmdbBusinessViewContract) Pattern() (string, string) {
	return "POST", "/api/v1/view/cmdb/business"
}
func (*fetchCmdbBusinessViewContract) Body() string { return "" }

var _FetchOriginViewContract = &fetchOriginViewContract{}

type fetchOriginViewContract struct{}

func (*fetchOriginViewContract) ServiceName() string          { return "view.rpc" }
func (*fetchOriginViewContract) MethodName() string           { return "FetchOriginView" }
func (*fetchOriginViewContract) RequestMessage() interface{}  { return new(FetchOriginViewRequest) }
func (*fetchOriginViewContract) ResponseMessage() interface{} { return new(FetchOriginViewRequest) }
func (*fetchOriginViewContract) ContractName() string {
	return "easyops.api.topology.view.FetchOriginView"
}
func (*fetchOriginViewContract) ContractVersion() string   { return "1.0" }
func (*fetchOriginViewContract) Pattern() (string, string) { return "POST", "/api/v1/view/origin" }
func (*fetchOriginViewContract) Body() string              { return "" }

var _GetViewContract = &getViewContract{}

type getViewContract struct{}

func (*getViewContract) ServiceName() string          { return "view.rpc" }
func (*getViewContract) MethodName() string           { return "GetView" }
func (*getViewContract) RequestMessage() interface{}  { return new(GetViewRequest) }
func (*getViewContract) ResponseMessage() interface{} { return new(GetViewRequest) }
func (*getViewContract) ContractName() string         { return "easyops.api.topology.view.GetView" }
func (*getViewContract) ContractVersion() string      { return "1.0" }
func (*getViewContract) Pattern() (string, string)    { return "GET", "/api/v1/view/:id" }
func (*getViewContract) Body() string                 { return "" }

var _ListViewContract = &listViewContract{}

type listViewContract struct{}

func (*listViewContract) ServiceName() string          { return "view.rpc" }
func (*listViewContract) MethodName() string           { return "ListView" }
func (*listViewContract) RequestMessage() interface{}  { return new(ListViewRequest) }
func (*listViewContract) ResponseMessage() interface{} { return new(ListViewRequest) }
func (*listViewContract) ContractName() string         { return "easyops.api.topology.view.ListView" }
func (*listViewContract) ContractVersion() string      { return "1.0" }
func (*listViewContract) Pattern() (string, string)    { return "GET", "/api/v1/view" }
func (*listViewContract) Body() string                 { return "" }

var _UpdateViewContract = &updateViewContract{}

type updateViewContract struct{}

func (*updateViewContract) ServiceName() string          { return "view.rpc" }
func (*updateViewContract) MethodName() string           { return "UpdateView" }
func (*updateViewContract) RequestMessage() interface{}  { return new(UpdateViewRequest) }
func (*updateViewContract) ResponseMessage() interface{} { return new(UpdateViewRequest) }
func (*updateViewContract) ContractName() string         { return "easyops.api.topology.view.UpdateView" }
func (*updateViewContract) ContractVersion() string      { return "1.0" }
func (*updateViewContract) Pattern() (string, string)    { return "PUT", "/api/v1/view/:id" }
func (*updateViewContract) Body() string                 { return "" }
